{"meta":{"version":1,"warehouse":"2.2.0"},"models":{"Asset":[{"_id":"source/img/2016-03-30-differences-between-post-array-and-query-string-with-php-curl/1.png","path":"img/2016-03-30-differences-between-post-array-and-query-string-with-php-curl/1.png","modified":0,"renderable":0},{"_id":"source/img/2016-03-30-differences-between-post-array-and-query-string-with-php-curl/3.png","path":"img/2016-03-30-differences-between-post-array-and-query-string-with-php-curl/3.png","modified":0,"renderable":0},{"_id":"source/img/2016-03-30-differences-between-post-array-and-query-string-with-php-curl/2.png","path":"img/2016-03-30-differences-between-post-array-and-query-string-with-php-curl/2.png","modified":0,"renderable":0},{"_id":"source/img/2016-03-30-differences-between-post-array-and-query-string-with-php-curl/4.png","path":"img/2016-03-30-differences-between-post-array-and-query-string-with-php-curl/4.png","modified":0,"renderable":0},{"_id":"themes/indigo/source/icon/favicon.ico","path":"icon/favicon.ico","modified":0,"renderable":1},{"_id":"themes/indigo/source/css/style.less","path":"css/style.less","modified":0,"renderable":1},{"_id":"themes/indigo/source/img/brand.jpg","path":"img/brand.jpg","modified":0,"renderable":1},{"_id":"themes/indigo/source/img/avatar.jpg","path":"img/avatar.jpg","modified":0,"renderable":1},{"_id":"themes/indigo/source/img/cc.png","path":"img/cc.png","modified":0,"renderable":1},{"_id":"themes/indigo/source/img/img-loading.png","path":"img/img-loading.png","modified":0,"renderable":1},{"_id":"themes/indigo/source/img/img-err.png","path":"img/img-err.png","modified":0,"renderable":1},{"_id":"themes/indigo/source/img/brand_old.jpg","path":"img/brand_old.jpg","modified":0,"renderable":1},{"_id":"themes/indigo/source/js/main.js","path":"js/main.js","modified":0,"renderable":1},{"_id":"themes/indigo/source/js/main.min.js","path":"js/main.min.js","modified":0,"renderable":1},{"_id":"themes/indigo/source/js/search.min.js","path":"js/search.min.js","modified":0,"renderable":1},{"_id":"themes/indigo/source/js/search.js","path":"js/search.js","modified":0,"renderable":1},{"_id":"themes/indigo/source/img/alipay.jpg","path":"img/alipay.jpg","modified":0,"renderable":1},{"_id":"themes/indigo/source/js/embed.min.js","path":"js/embed.min.js","modified":0,"renderable":1},{"_id":"themes/indigo/source/js/embed.js","path":"js/embed.js","modified":0,"renderable":1},{"_id":"themes/indigo/source/img/wechat.jpg","path":"img/wechat.jpg","modified":0,"renderable":1},{"_id":"themes/indigo/source/css/fonts/roboto/Roboto-Bold.woff2","path":"css/fonts/roboto/Roboto-Bold.woff2","modified":0,"renderable":1},{"_id":"themes/indigo/source/css/fonts/roboto/Roboto-Bold.woff","path":"css/fonts/roboto/Roboto-Bold.woff","modified":0,"renderable":1},{"_id":"themes/indigo/source/css/fonts/roboto/Roboto-Bold.eot","path":"css/fonts/roboto/Roboto-Bold.eot","modified":0,"renderable":1},{"_id":"themes/indigo/source/css/fonts/roboto/Roboto-Light.woff","path":"css/fonts/roboto/Roboto-Light.woff","modified":0,"renderable":1},{"_id":"themes/indigo/source/css/fonts/roboto/Roboto-Light.eot","path":"css/fonts/roboto/Roboto-Light.eot","modified":0,"renderable":1},{"_id":"themes/indigo/source/css/fonts/roboto/Roboto-Light.woff2","path":"css/fonts/roboto/Roboto-Light.woff2","modified":0,"renderable":1},{"_id":"themes/indigo/source/css/fonts/roboto/Roboto-Medium.woff","path":"css/fonts/roboto/Roboto-Medium.woff","modified":0,"renderable":1},{"_id":"themes/indigo/source/css/fonts/roboto/Roboto-Medium.woff2","path":"css/fonts/roboto/Roboto-Medium.woff2","modified":0,"renderable":1},{"_id":"themes/indigo/source/css/fonts/roboto/Roboto-Medium.eot","path":"css/fonts/roboto/Roboto-Medium.eot","modified":0,"renderable":1},{"_id":"themes/indigo/source/css/fonts/roboto/Roboto-Regular.woff","path":"css/fonts/roboto/Roboto-Regular.woff","modified":0,"renderable":1},{"_id":"themes/indigo/source/css/fonts/roboto/Roboto-Regular.eot","path":"css/fonts/roboto/Roboto-Regular.eot","modified":0,"renderable":1},{"_id":"themes/indigo/source/css/fonts/roboto/Roboto-Thin.eot","path":"css/fonts/roboto/Roboto-Thin.eot","modified":0,"renderable":1},{"_id":"themes/indigo/source/css/fonts/roboto/Roboto-Regular.woff2","path":"css/fonts/roboto/Roboto-Regular.woff2","modified":0,"renderable":1},{"_id":"themes/indigo/source/css/fonts/roboto/Roboto-Thin.woff2","path":"css/fonts/roboto/Roboto-Thin.woff2","modified":0,"renderable":1},{"_id":"themes/indigo/source/css/fonts/roboto/Roboto-Thin.woff","path":"css/fonts/roboto/Roboto-Thin.woff","modified":0,"renderable":1},{"_id":"themes/indigo/source/css/fonts/roboto/Roboto-Bold.ttf","path":"css/fonts/roboto/Roboto-Bold.ttf","modified":0,"renderable":1},{"_id":"themes/indigo/source/css/fonts/roboto/Roboto-Light.ttf","path":"css/fonts/roboto/Roboto-Light.ttf","modified":0,"renderable":1},{"_id":"themes/indigo/source/css/fonts/roboto/Roboto-Medium.ttf","path":"css/fonts/roboto/Roboto-Medium.ttf","modified":0,"renderable":1},{"_id":"themes/indigo/source/css/fonts/roboto/Roboto-Regular.ttf","path":"css/fonts/roboto/Roboto-Regular.ttf","modified":0,"renderable":1},{"_id":"themes/indigo/source/css/fonts/roboto/Roboto-Thin.ttf","path":"css/fonts/roboto/Roboto-Thin.ttf","modified":0,"renderable":1},{"_id":"themes/indigo/source/css/fonts/fontawesome/fontawesome-webfont.woff","path":"css/fonts/fontawesome/fontawesome-webfont.woff","modified":0,"renderable":1},{"_id":"themes/indigo/source/css/fonts/fontawesome/fontawesome-webfont.woff2","path":"css/fonts/fontawesome/fontawesome-webfont.woff2","modified":0,"renderable":1},{"_id":"themes/indigo/source/css/fonts/fontawesome/fontawesome-webfont.ttf","path":"css/fonts/fontawesome/fontawesome-webfont.ttf","modified":0,"renderable":1},{"_id":"themes/indigo/source/css/fonts/fontawesome/fontawesome-webfont.eot","path":"css/fonts/fontawesome/fontawesome-webfont.eot","modified":0,"renderable":1},{"_id":"themes/indigo/source/css/fonts/fontawesome/FontAwesome.otf","path":"css/fonts/fontawesome/FontAwesome.otf","modified":0,"renderable":1},{"_id":"themes/indigo/source/css/fonts/fontawesome/fontawesome-webfont.svg","path":"css/fonts/fontawesome/fontawesome-webfont.svg","modified":0,"renderable":1}],"Cache":[{"_id":"themes/indigo/package.json","hash":"5b007304520293ca544f482bf49007e013b8f3d3","modified":1486533360000},{"_id":"themes/indigo/.editorconfig","hash":"67a03b88eadd7810f2e01866e73814074ecd3b87","modified":1486533360000},{"_id":"source/_posts/_css-selectors.md","hash":"ce66557d3a22536bee2fcd92bdc60878eefc54e5","modified":1489644689000},{"_id":"themes/indigo/README.md","hash":"1ee068cd61a6ce20d7b723070ae318119881201e","modified":1486533360000},{"_id":"source/_posts/_dev-php-extension-in-c-2.md","hash":"6b9cd6dcf5492ec51d8aa1229c45f639de707e96","modified":1489644833000},{"_id":"source/_posts/_cloud-clipboard-based-on-lan.md","hash":"e1edfa4be01b1172a5d0b51a5e4ce68bcc8bb8f6","modified":1489644850000},{"_id":"source/_posts/_dev-php-extension-in-c-1.md","hash":"d5e8ce390944731f8c47ae243435cf1ea74f3703","modified":1489644820000},{"_id":"source/_posts/_node-module-load.md","hash":"c5790ce2e21d4c0908cbb0ad4a807316ba50087e","modified":1489644709000},{"_id":"source/_posts/_nginx-multi-site.md","hash":"bd7ab1122c6ee779dafd964a8f1fbfce4f5535b7","modified":1489644909000},{"_id":"themes/indigo/_config.yml","hash":"b7cef7a73e80ee53f7411232708be026e16eeb8a","modified":1501413764626},{"_id":"source/_posts/_typescript-study-notes-1.md","hash":"2da68ec430ba2e08c34569c78962db1895200fdc","modified":1489644659000},{"_id":"source/_posts/c-getch-getchar.md","hash":"3c47399e22c78a3a57105b8d3b7d04137590a607","modified":1486531876000},{"_id":"source/_posts/http-debug-tools.md","hash":"a60c352fff160707d758261b1823e2bd73e1d868","modified":1501421882925},{"_id":"source/_posts/_typescript-study-notes-2.md","hash":"1dd58568b12f1bab9d6373c115d663c5121df133","modified":1489644668000},{"_id":"source/_posts/differences-between-post-array-and-query-string-with-php-curl.md","hash":"3a565a648f0c6dfb68ec39a8d409678a4385c87a","modified":1486549339000},{"_id":"source/_posts/git-stack-on-windows.md","hash":"8d90750b07db9227f205c532d0a7d8b87f921216","modified":1501389699707},{"_id":"source/_posts/echarts-problems.md","hash":"f1e9d11df4b62de3f8fbe3582d182a09a10c2db6","modified":1487658518000},{"_id":"source/_posts/jsonp-and-cross-domain.md","hash":"81f729ddf2177da5899b2e09433356a6dea20106","modified":1486531863000},{"_id":"source/_posts/javascript-get-url-search-params.md","hash":"689141a03ef3cc6fed24eea4e3186b88b7da0b7b","modified":1486531813000},{"_id":"source/_posts/mod-and-rem-in-javascript.md","hash":"b6228e1cf222be59430dd69409f31916bbb7f1c7","modified":1486531890000},{"_id":"source/_posts/number-to-excel-letter.md","hash":"afac95e784d48530654769a24ee6a2a606eee956","modified":1486532390000},{"_id":"source/_posts/start-a-nodejs-project-with-typescript.md","hash":"945e812484e1df236c3b3d8a70277f4495360030","modified":1489645401000},{"_id":"source/_posts/tcp-notes.md","hash":"929fd9e84bb8f3ae211f9d8b13c3a7eb5ab50215","modified":1501412902625},{"_id":"source/_posts/wechat-button-manage.md","hash":"4c4c74d8f11db0b5ff0dc4f06bd6645643f20289","modified":1486531736000},{"_id":"source/_posts/wechat-auth-get-user-info.md","hash":"a26282de5dfaa0557efcbb843dbb7b0a48bda0bf","modified":1486531786000},{"_id":"source/categories/index.md","hash":"cf66d0080df11b8d38f4506e3f50b57c735a8624","modified":1486530660000},{"_id":"source/_posts/wechat-qr-code-manage.md","hash":"c5a6c7d28fbc09604b77465edd3283befabcdeab","modified":1486531760000},{"_id":"source/friends/index.md","hash":"a276eca5c21533915a86eae52b5718ca94e004ac","modified":1486744035000},{"_id":"source/tags/index.md","hash":"5742bfda2f05ed6a6fca513ec4d6ba134476bfc5","modified":1486530594000},{"_id":"themes/indigo/layout/category.ejs","hash":"e5ba5cc2e092c199285b8097ef12ffe70bf84c91","modified":1486533360000},{"_id":"themes/indigo/layout/categories.ejs","hash":"62845655a74a428c975c2781666741ad38e96425","modified":1486533360000},{"_id":"themes/indigo/layout/index.ejs","hash":"772c1985c7743e101598b4eddc253f9174c5605b","modified":1486533360000},{"_id":"themes/indigo/layout/layout.ejs","hash":"770af84fff104c398ce8b6c995130cddd3e9a1e9","modified":1486533360000},{"_id":"themes/indigo/layout/archive.ejs","hash":"6897178ba358379d6a4b7c0ba1bc2ab97ad5303a","modified":1486533360000},{"_id":"themes/indigo/layout/friends.ejs","hash":"911ab7b19d40b6cde2125409810295ea65e6251b","modified":1486746337000},{"_id":"themes/indigo/layout/tag.ejs","hash":"90a231dea3a364b329a740e5d6c49c8cf5664fe9","modified":1486533360000},{"_id":"themes/indigo/scripts/plugins.js","hash":"93dc7299cc41f52d64b94122fafa2a6a87f80f08","modified":1486533360000},{"_id":"themes/indigo/layout/post.ejs","hash":"efc3352828351f8574c51e8a93dc56c66660c3b1","modified":1486533360000},{"_id":"themes/indigo/layout/tags.ejs","hash":"c67269471388d755559a0855afbf7d0a2f8d2459","modified":1486533360000},{"_id":"source/img/2016-03-30-differences-between-post-array-and-query-string-with-php-curl/1.png","hash":"439df20f130d5e6560b1ba8d9fb7039a93fc8293","modified":1461813117000},{"_id":"source/img/2016-03-30-differences-between-post-array-and-query-string-with-php-curl/3.png","hash":"f1e5c1798851628855149268df72f6810c084626","modified":1461813117000},{"_id":"source/img/2016-03-30-differences-between-post-array-and-query-string-with-php-curl/2.png","hash":"685fe404c06f4e82f67ff77a7442a739f1de9723","modified":1461813117000},{"_id":"source/img/2016-03-30-differences-between-post-array-and-query-string-with-php-curl/4.png","hash":"07635e22149b6a752b1547ffff92cc61d03171e8","modified":1461813117000},{"_id":"themes/indigo/layout/_partial/after-footer.ejs","hash":"1351dbfca311f0d50a939f9e1a91c4f65bbcdf5f","modified":1486533360000},{"_id":"themes/indigo/layout/page.ejs","hash":"567c42b978da4c39b8b4982df19b940c26bc32a4","modified":1486533360000},{"_id":"themes/indigo/layout/_partial/footer.ejs","hash":"227c3e3c26fe36fa0cfdae79c65930473e90f150","modified":1486533360000},{"_id":"themes/indigo/layout/_partial/archive.ejs","hash":"c294c98617ce14082f9b3d5eec83328f480f5597","modified":1486533360000},{"_id":"themes/indigo/layout/_partial/loading.ejs","hash":"8b3e037dd5f3d4564012689c5cd6f63caf73df0f","modified":1486444638000},{"_id":"themes/indigo/layout/_partial/header.ejs","hash":"b741f288646b26325be55a79a30b61399a72328e","modified":1486533360000},{"_id":"themes/indigo/layout/_partial/paginator.ejs","hash":"13952250463f70d1c1bbbfdd7f4ee8160dd6d99b","modified":1486533360000},{"_id":"themes/indigo/layout/_partial/menu.ejs","hash":"95fd5c5f838a05a7533b0a7947e434a4bafefdb9","modified":1486533360000},{"_id":"themes/indigo/layout/_partial/head.ejs","hash":"eb25d46668f84ed4209596be674b3146c86f8c95","modified":1486533360000},{"_id":"themes/indigo/layout/_partial/index-item.ejs","hash":"302f72be03dceff935ba818870b9fedcdf855c94","modified":1486533360000},{"_id":"themes/indigo/layout/_partial/search.ejs","hash":"752109904304fdb8e988ee1254df2af9c0701466","modified":1486533360000},{"_id":"themes/indigo/layout/_partial/post.ejs","hash":"ee9eec3c29e8d089deb00579d82b07a4d26b2a8f","modified":1486533360000},{"_id":"themes/indigo/layout/_partial/script.ejs","hash":"102db1c3f463d8e075ef40e3003247f2bd24da9c","modified":1486533360000},{"_id":"themes/indigo/source/icon/favicon.ico","hash":"ba13e10002c3454a01e8fe16c1223c313d1483a2","modified":1486473766000},{"_id":"themes/indigo/source/css/style.less","hash":"2235bfc5fcde90ca8dfa7e299b984b2bb98cf5e7","modified":1486533361000},{"_id":"themes/indigo/source/img/brand.jpg","hash":"f4605bacbcbe6a4d3cdb5dabb9cf9b2bf95f79d7","modified":1422889977000},{"_id":"themes/indigo/source/img/avatar.jpg","hash":"2c45df448b6eabb279c8d9a82522d9dc90c8e831","modified":1486533403000},{"_id":"themes/indigo/source/img/cc.png","hash":"ebce75a62b40976a72d43f0bd937d859ac24d87c","modified":1486444639000},{"_id":"themes/indigo/source/img/img-loading.png","hash":"a9cd5cd11866824f31e3d1c5e23badfeb3f73031","modified":1486444639000},{"_id":"themes/indigo/source/img/img-err.png","hash":"23a63ea26eb3c1d5e677d9883cf36cc1a1a1228b","modified":1486444639000},{"_id":"themes/indigo/source/img/brand_old.jpg","hash":"0e237f1b433851c156e1f1cdaeb044054b3b9879","modified":1486444639000},{"_id":"themes/indigo/source/js/main.js","hash":"1dc11773fd777271bb9a49cd632670b193681f31","modified":1486533361000},{"_id":"themes/indigo/source/js/main.min.js","hash":"10fc64abfd344b9bd8dc56888961a20e0edc81ae","modified":1486533361000},{"_id":"themes/indigo/source/js/search.min.js","hash":"c0c3d048af0d6b840f6f1dfda08911c7bfdb5dc1","modified":1486533361000},{"_id":"themes/indigo/source/js/search.js","hash":"e9075b0dd68bce7750fb32a1e3c46f81fdcca6f6","modified":1486533361000},{"_id":"themes/indigo/source/img/alipay.jpg","hash":"695ed9d84ec5fbf72dd36131a7fd7302fefef6d3","modified":1486565853000},{"_id":"themes/indigo/source/js/embed.min.js","hash":"035953ada7f0223a2692b650a8a8c1f97a1b46c8","modified":1486533361000},{"_id":"themes/indigo/layout/_partial/plugins/disqus.ejs","hash":"86fe837ab16cb60754b0a73bb9efa38b04f3023f","modified":1486533360000},{"_id":"themes/indigo/layout/_partial/plugins/duoshuo-count.ejs","hash":"56e0a83ee77c7022aad528703e848a71a185ca12","modified":1486533360000},{"_id":"themes/indigo/layout/_partial/plugins/baidu.ejs","hash":"da1355eea131952031e54c45560555e6d3aa5a33","modified":1486533360000},{"_id":"themes/indigo/layout/_partial/tags-bar.ejs","hash":"d7d49a92e28d97b1b5f2ab7c0d1a457c5b2c8f4c","modified":1486533360000},{"_id":"themes/indigo/layout/_partial/plugins/duoshuo-js.ejs","hash":"fedcbd48f60d516e0caab24b3fea9dfc3914ea31","modified":1486533360000},{"_id":"themes/indigo/layout/_partial/plugins/google-analytics.ejs","hash":"b5b87761751a897949e085a8f1ace78b0b8babd5","modified":1486533360000},{"_id":"themes/indigo/layout/_partial/plugins/page-visit.ejs","hash":"bb9deb32c54ea6820f622b923e62592915e9f21f","modified":1486533360000},{"_id":"themes/indigo/layout/_partial/plugins/tajs.ejs","hash":"ef9c77d8c6e004b014c83c5f9333e7174f8bafa3","modified":1486533360000},{"_id":"themes/indigo/layout/_partial/plugins/site-visit.ejs","hash":"a2c247c2e32016563dd6a22c21474072d93f4dbd","modified":1486533360000},{"_id":"themes/indigo/layout/_partial/plugins/duoshuo.ejs","hash":"25d3e25875e5f6b5a0597896dbe800c2187d58ac","modified":1486533360000},{"_id":"themes/indigo/layout/_partial/post/date.ejs","hash":"0ef6e022cf124b7e0cea62c922e6f0453b25041e","modified":1486533360000},{"_id":"themes/indigo/layout/_partial/post/copyright.ejs","hash":"ff4338860073302a2d19b2887c21a39856394ef7","modified":1486533360000},{"_id":"themes/indigo/layout/_partial/plugins/mathjax.ejs","hash":"dce9c8edc74342fc420ec25c94be2068d5d1c225","modified":1486533360000},{"_id":"themes/indigo/layout/_partial/post/category.ejs","hash":"c08e44cbd7315dec7afb6054b04d3c7b82c3bde8","modified":1486444638000},{"_id":"themes/indigo/layout/_partial/post/comment.ejs","hash":"89bb301ba4c3d539eb61df33ea9e8354a9d003ce","modified":1486533360000},{"_id":"themes/indigo/layout/_partial/post/reward-btn.ejs","hash":"b46160005224821a439dec9f1ff183e2f66d9f4b","modified":1486533360000},{"_id":"themes/indigo/layout/_partial/post/reward.ejs","hash":"e48e275869c9b3dd9dd5313aef19e18bc6e4868c","modified":1486533360000},{"_id":"themes/indigo/layout/_partial/post/share-fab.ejs","hash":"2ec7de870988cfbc8ea9872cddf7e4076ac64a57","modified":1486533360000},{"_id":"themes/indigo/layout/_partial/post/nav.ejs","hash":"03719097851575a2c1bb95774058b224f6402a1f","modified":1486533360000},{"_id":"themes/indigo/layout/_partial/post/head-meta.ejs","hash":"f137c126672769e9571be2bb0a70ea8dda644b0e","modified":1486444638000},{"_id":"themes/indigo/layout/_partial/post/tag.ejs","hash":"412894001b1ac6e63012b26b1109a0856651c076","modified":1486533360000},{"_id":"themes/indigo/layout/_partial/post/share.ejs","hash":"7d79a67b3e5e6989f22fb0e0904fa540bfca5fcc","modified":1486533360000},{"_id":"themes/indigo/layout/_partial/post/title.ejs","hash":"eaad7af7888bddd7095243a43ff38f55ad8c494a","modified":1486444638000},{"_id":"themes/indigo/layout/_partial/post/toc.ejs","hash":"0d8f0a4ab14c227cd52802095fc4974b6a7aae67","modified":1486533360000},{"_id":"themes/indigo/source/css/_duoshuo/custom.less","hash":"4829a9e46e4287c81806a4b675446baf61469128","modified":1486533360000},{"_id":"themes/indigo/source/css/_duoshuo/common.less","hash":"3831573b116be85a8b61b4040073d615092a4e26","modified":1486533360000},{"_id":"themes/indigo/source/css/_duoshuo/dialog.less","hash":"b8ff5b1ad549031399ea1482c4ac0724d1119e97","modified":1486533360000},{"_id":"themes/indigo/source/css/_duoshuo/login.less","hash":"3540d01cea125952b3d191e28a754778491a2319","modified":1486533360000},{"_id":"themes/indigo/source/css/_duoshuo/embed.less","hash":"81d1eb62500b12ef975e7ea6743d738ce9100a98","modified":1486533360000},{"_id":"themes/indigo/source/css/_duoshuo/global.less","hash":"78d7335c6f654d66417aa553914d25fc21368016","modified":1486533360000},{"_id":"themes/indigo/source/css/_duoshuo/recent-visitors.less","hash":"5307b1449d06639c8d897184599a73c737ffeed7","modified":1486533360000},{"_id":"themes/indigo/source/css/_duoshuo/mixins.less","hash":"43ae6371cbd7c89575d10cce8fc25c184dedefc0","modified":1486533360000},{"_id":"themes/indigo/source/css/_duoshuo/recent-comments.less","hash":"2bc2cb483a04a0ad44dc7f3f3fe0e281c664e760","modified":1486533360000},{"_id":"themes/indigo/source/css/_duoshuo/share.less","hash":"45816bd1b01f2fed2f180fd14620ada0b09f2598","modified":1486533360000},{"_id":"themes/indigo/source/css/_duoshuo/variables.less","hash":"e4df4f20f5117f84ae67f5cdd8182b4c033c6654","modified":1486533360000},{"_id":"themes/indigo/source/css/_partial/archives.less","hash":"382fc22cd5cc073e881768a65600d97eba9f1d21","modified":1486533360000},{"_id":"themes/indigo/source/css/_partial/gotop.less","hash":"bad63006b3bd4849bf53ad38482af0d9971061d3","modified":1486444638000},{"_id":"themes/indigo/source/css/_partial/article.less","hash":"abbd2469128ccc5261ed31e9cb39026c9829b548","modified":1486533360000},{"_id":"themes/indigo/layout/_partial/post/updated.ejs","hash":"43fa8ad1f3601ae6c9440e10c2b271eb18b0929f","modified":1486533360000},{"_id":"themes/indigo/source/css/_duoshuo/thread.less","hash":"b82efa0e5a5fc8320ee847f194048c3ad00eb023","modified":1486533360000},{"_id":"themes/indigo/source/css/_partial/header.less","hash":"880b4a28e97d556ed15b07642d25115f9b6ba4f6","modified":1486742074000},{"_id":"themes/indigo/source/css/_partial/highlight.less","hash":"99e48793dc0b4ffb66ecaf2d1315145872f9bb98","modified":1486533360000},{"_id":"themes/indigo/source/css/_partial/loading.less","hash":"85157ddf3877b5c58e8f1d737dda3dfb1bfd540b","modified":1486533360000},{"_id":"themes/indigo/source/css/_partial/lightbox.less","hash":"38419aaf3c1832e84ade331f051f110fdc8b960f","modified":1486533360000},{"_id":"themes/indigo/source/css/_partial/layout.less","hash":"174b95e668229e470c411ee87517af757b7fdb85","modified":1486737402000},{"_id":"themes/indigo/source/css/_partial/postlist.less","hash":"c954f2b3eae77ab86afc742afbfa8e0253c96a7e","modified":1486533360000},{"_id":"themes/indigo/source/css/_partial/reward.less","hash":"0ee290661ff436b6a3bc8fff99ee2ca18ab7d757","modified":1486533360000},{"_id":"themes/indigo/source/css/_partial/roboto.less","hash":"3e457942995da8840e7662fa6cb551a7e12ea294","modified":1486444638000},{"_id":"themes/indigo/source/css/_partial/search.less","hash":"dbc23e77e586ee682a21475f5eb568628ea6720f","modified":1486533360000},{"_id":"themes/indigo/source/css/_partial/share.less","hash":"a683c96a59470efd35722b763c55149a46e35156","modified":1486533360000},{"_id":"themes/indigo/source/css/_partial/page.less","hash":"33b0a5edcedc26a4c592c812c5785bb20d3c93db","modified":1486533360000},{"_id":"themes/indigo/source/css/_partial/tags.less","hash":"01eb7f84193180928a6ed4796ee8802f6c1628e7","modified":1486533360000},{"_id":"themes/indigo/source/css/_partial/waves.less","hash":"a02eaa601887f947257f6016679b62dc96a61c0c","modified":1486533361000},{"_id":"themes/indigo/source/css/_duoshuo/notify.less","hash":"b4443555ff98d14fb70d793037a28077e7e2fee9","modified":1486533360000},{"_id":"themes/indigo/source/js/embed.js","hash":"74d6ddb4cf412d4537f9e537cdb9d41d5fb99935","modified":1486533361000},{"_id":"themes/indigo/source/css/_partial/variable.less","hash":"cecfdb760a0769d69842bf05636eaebfb458976e","modified":1486742419000},{"_id":"themes/indigo/source/img/wechat.jpg","hash":"e8c70682e933ad951afa813f3b2378f0a9902431","modified":1486565604000},{"_id":"themes/indigo/source/css/_partial/fontawesome.less","hash":"907c10fa4388b7ae7e141b026fb98cc9f758d785","modified":1486533360000},{"_id":"themes/indigo/source/css/fonts/roboto/Roboto-Bold.woff2","hash":"933b866d09c2b087707a98dab64b3888865eeb96","modified":1486444638000},{"_id":"themes/indigo/source/css/fonts/roboto/Roboto-Bold.woff","hash":"ee99cd87a59a9a5d4092c83232bb3eec67547425","modified":1486444638000},{"_id":"themes/indigo/source/css/fonts/roboto/Roboto-Bold.eot","hash":"a76cd602f5188b9fbd4ba7443dcb9c064e3dbf10","modified":1486444638000},{"_id":"themes/indigo/source/css/fonts/roboto/Roboto-Light.woff","hash":"6300f659be9e834ab263efe2fb3c581d48b1e7b2","modified":1486444638000},{"_id":"themes/indigo/source/css/fonts/roboto/Roboto-Light.eot","hash":"42fe156996197e5eb0c0264c5d1bb3b4681f4595","modified":1486444638000},{"_id":"themes/indigo/source/css/fonts/roboto/Roboto-Light.woff2","hash":"bbdc28b887400fcb340b504ec2904993af42a5d7","modified":1486444638000},{"_id":"themes/indigo/source/css/fonts/roboto/Roboto-Medium.woff","hash":"d45f84922131364989ad6578c7a06b6b4fc22c34","modified":1486444639000},{"_id":"themes/indigo/source/css/fonts/roboto/Roboto-Medium.woff2","hash":"6cc1b73571af9e827c4e7e91418f476703cd4c4b","modified":1486444639000},{"_id":"themes/indigo/source/css/fonts/roboto/Roboto-Medium.eot","hash":"1517f4b6e1c5d0e5198f937557253aac8fab0416","modified":1486444638000},{"_id":"themes/indigo/source/css/fonts/roboto/Roboto-Regular.woff","hash":"74734dde8d94e7268170f9b994dedfbdcb5b3a15","modified":1486444639000},{"_id":"themes/indigo/source/css/fonts/roboto/Roboto-Regular.eot","hash":"77ae3e980ec03863ebe2587a8ef9ddfd06941db0","modified":1486444639000},{"_id":"themes/indigo/source/css/fonts/roboto/Roboto-Thin.eot","hash":"0790a51a848dbe7292c98f9d0459218bf1a8ffdd","modified":1486444639000},{"_id":"themes/indigo/source/css/fonts/roboto/Roboto-Regular.woff2","hash":"ed1558b0541f5e01ce48c7db1588371b990eec19","modified":1486444639000},{"_id":"themes/indigo/source/css/fonts/roboto/Roboto-Thin.woff2","hash":"2449e3dac5ddb7c3da8bb07450493b62d052758c","modified":1486444639000},{"_id":"themes/indigo/source/css/fonts/roboto/Roboto-Thin.woff","hash":"fbc3e71d456c96667d8082ab910e3946ef89240b","modified":1486444639000},{"_id":"themes/indigo/source/css/fonts/roboto/Roboto-Bold.ttf","hash":"47327df0f35e7cd7c8645874897a7449697544ae","modified":1486444638000},{"_id":"themes/indigo/source/css/fonts/roboto/Roboto-Light.ttf","hash":"e321c183e2b75ee19813892b7bac8d7c411cb88a","modified":1486444638000},{"_id":"themes/indigo/source/css/fonts/roboto/Roboto-Medium.ttf","hash":"6060ca726b9760b76f7c347dce9d2fa1fe42ec92","modified":1486444639000},{"_id":"themes/indigo/source/css/fonts/roboto/Roboto-Regular.ttf","hash":"824b5480c977a8166e177e5357d13164ccc45f47","modified":1486444639000},{"_id":"themes/indigo/source/css/fonts/roboto/Roboto-Thin.ttf","hash":"173ed64528b4d010a76d8d38deb1d7e7eed58eda","modified":1486444639000},{"_id":"themes/indigo/source/css/fonts/fontawesome/fontawesome-webfont.woff","hash":"28b782240b3e76db824e12c02754a9731a167527","modified":1486533361000},{"_id":"themes/indigo/source/css/fonts/fontawesome/fontawesome-webfont.woff2","hash":"d6f48cba7d076fb6f2fd6ba993a75b9dc1ecbf0c","modified":1486533361000},{"_id":"themes/indigo/source/css/fonts/fontawesome/fontawesome-webfont.ttf","hash":"13b1eab65a983c7a73bc7997c479d66943f7c6cb","modified":1486533361000},{"_id":"themes/indigo/source/css/fonts/fontawesome/fontawesome-webfont.eot","hash":"d980c2ce873dc43af460d4d572d441304499f400","modified":1486533361000},{"_id":"themes/indigo/source/css/fonts/fontawesome/FontAwesome.otf","hash":"048707bc52ac4b6563aaa383bfe8660a0ddc908c","modified":1486533361000},{"_id":"themes/indigo/source/css/fonts/fontawesome/fontawesome-webfont.svg","hash":"b5483b11f8ba213e733b5b8af9927a04fec996f6","modified":1486533361000},{"_id":"public/atom.xml","hash":"1b76f320419fb2d8f42d0c4848471b2276deab40","modified":1501421927603},{"_id":"public/content.json","hash":"2d5da0e794ce568da0b03a51846db43e7e756b8e","modified":1501421928353},{"_id":"public/friends/index.html","hash":"d1a03c5d7c815a080fbaa73c895824414c0475d0","modified":1501421928438},{"_id":"public/archives/page/2/index.html","hash":"ab9b64eb59ff3614f386a9bd3baa8936ad8ede44","modified":1501421928469},{"_id":"public/archives/2015/index.html","hash":"3a524fd70804fcb801d893be6b35a7c9adcdace8","modified":1501421928470},{"_id":"public/archives/2015/12/index.html","hash":"300ac90803f21f539d80e43883c77f6f6b887ef2","modified":1501421928470},{"_id":"public/archives/2016/03/index.html","hash":"abef797085509d585a3092ab4599465e4367f3c4","modified":1501421928470},{"_id":"public/archives/2016/04/index.html","hash":"f4839bbdbc220ce82fabf230c96339092c8b4577","modified":1501421928470},{"_id":"public/archives/2016/06/index.html","hash":"fae7fcb9f444d1ec6895d75f89e7f7aa608471d2","modified":1501421928470},{"_id":"public/archives/2017/index.html","hash":"b36e2df8745bc4e67b091a053b7831801b02fed7","modified":1501421928470},{"_id":"public/archives/2017/02/index.html","hash":"5c53d73236d17f95da377d0eba3672f11bc84bba","modified":1501421928470},{"_id":"public/archives/2017/03/index.html","hash":"df2a78ec916d928e4ebeeed7156d69a28b7f1a0f","modified":1501421928470},{"_id":"public/archives/2017/07/index.html","hash":"545c6a202ef82ae5ac32ab3e79c670dd57f27d33","modified":1501421928470},{"_id":"public/categories/C/index.html","hash":"a8ac6d0bca92fa28184065452342c0a8835d4f03","modified":1501421928470},{"_id":"public/categories/PHP/index.html","hash":"61a9e1791fc4bec53fe97b8002f9a29b1f63ec21","modified":1501421928470},{"_id":"public/categories/JavaScript/index.html","hash":"0b2461513a80a40e7fccec80eeee5d1d8a12ce19","modified":1501421928471},{"_id":"public/categories/Git/index.html","hash":"e1f926acfb46462971416e50b75bb85d45789627","modified":1501421928472},{"_id":"public/categories/TypeScript/index.html","hash":"b0d6d74f6742162dad39729b841f89ac9f26c7a6","modified":1501421928472},{"_id":"public/categories/WeChat/index.html","hash":"0051cfd4d0c1b4c172e694da63d5e857a86130d2","modified":1501421928472},{"_id":"public/categories/TCP/index.html","hash":"9633680fa1a83eaeb972607d602b5b28bbe7bfcc","modified":1501421928472},{"_id":"public/tags/c/index.html","hash":"c0ed7d67b5f49114dc166200168b362630b285b0","modified":1501421928472},{"_id":"public/tags/buffer/index.html","hash":"7fb3cd39abf848f694ed059c418db10ec9e1f0bd","modified":1501421928472},{"_id":"public/tags/LF/index.html","hash":"2ef9363b7d57277783bb6afe5aef526f3e5442f0","modified":1501421928472},{"_id":"public/tags/windows/index.html","hash":"a990683cb03552c50de5ebd6411327c4b9ac2409","modified":1501421928472},{"_id":"public/tags/post/index.html","hash":"9d394c1193b12e3c59677b179c097127c133cf15","modified":1501421928472},{"_id":"public/tags/echarts/index.html","hash":"4765a1af2769041493f3ae8a1071ed37cb0f41ca","modified":1501421928472},{"_id":"public/tags/math/index.html","hash":"1d7b3cb1e871b093ae608b640232ed48ab3521a3","modified":1501421928472},{"_id":"public/tags/jsonp/index.html","hash":"b1199d0e88650a46ea0dafcdc2800b8099fb3b7a","modified":1501421928473},{"_id":"public/tags/cross-domain/index.html","hash":"d4e7aaa6a1db01a348cd2b2cd1325d99b1f1150a","modified":1501421928473},{"_id":"public/tags/regex/index.html","hash":"453016d08774866631d8bbd38cab646cbbf95e3b","modified":1501421928473},{"_id":"public/tags/git/index.html","hash":"1a2d5c4b2aa95d93724bae8e410cd7a911bc9b26","modified":1501421928473},{"_id":"public/tags/server/index.html","hash":"db72d54a2c5d3f8cdec8fe46355f4e675a443054","modified":1501421928473},{"_id":"public/tags/node-js/index.html","hash":"a48436f9ae22bf47b355040fb2722abf1a0b3eac","modified":1501421928473},{"_id":"public/tags/TypeScript/index.html","hash":"4c8f9bb5a1fa1dee6ae1d569ea5d4b0649438c17","modified":1501421928473},{"_id":"public/tags/convert/index.html","hash":"693e87a50af559611e876f9817760f6eb10c1529","modified":1501421928473},{"_id":"public/tags/tcp/index.html","hash":"96aa26fff0c5cfb0050e29decfe000239dbcdc8d","modified":1501421928473},{"_id":"public/categories/index.html","hash":"3508fbaef654487418fad3c3b611897b13157dc3","modified":1501421928473},{"_id":"public/tags/index.html","hash":"153469b13156add762d58cc488f468e549a9424b","modified":1501421928473},{"_id":"public/2017/07/30/tcp-notes/index.html","hash":"399a8b428464ceb867a59794caae214d445d2ce7","modified":1501421928473},{"_id":"public/2017/03/16/start-a-nodejs-project-with-typescript/index.html","hash":"f8a5d3b0edfb08f2a5de9bee3805e603e2443e62","modified":1501421928473},{"_id":"public/2017/02/21/echarts-problems/index.html","hash":"d5b30380d23f83052b0a80507bb2c1cb04f88325","modified":1501421928473},{"_id":"public/2016/06/07/mod-and-rem-in-javascript/index.html","hash":"681460a6cc20b5d2cb229b3c4d134519211c3710","modified":1501421928473},{"_id":"public/2016/04/28/c-getch-getchar/index.html","hash":"24a157b90119d802f7252c1c22686d19ad4c6f59","modified":1501421928473},{"_id":"public/2016/04/01/jsonp-and-cross-domain/index.html","hash":"7d970f8e078b979e00364a2b9771cb0b4f02db13","modified":1501421928473},{"_id":"public/2016/03/30/differences-between-post-array-and-query-string-with-php-curl/index.html","hash":"5ae4fa78ef0df47505fbaaaa34854146c29c70ac","modified":1501421928473},{"_id":"public/2016/03/28/git-stack-on-windows/index.html","hash":"18e19e23d39edb9da47686195ed380275d85dea3","modified":1501421928474},{"_id":"public/2016/03/27/javascript-get-url-search-params/index.html","hash":"624f4aa85fc3865a6e6a395e9172eb5bf74200a6","modified":1501421928474},{"_id":"public/2016/03/22/wechat-auth-get-user-info/index.html","hash":"f2394d25db1fddaf31ece63d25e2102f6243cd98","modified":1501421928474},{"_id":"public/2015/12/26/number-to-excel-letter/index.html","hash":"f867e72e9b165b1adfb3feea425d574641ee3568","modified":1501421928474},{"_id":"public/2015/12/09/wechat-button-manage/index.html","hash":"87f3f209148919ece9d4802fdadd9d8cf46d47e6","modified":1501421928474},{"_id":"public/2015/12/09/wechat-qr-code-manage/index.html","hash":"e080bc2acfff78d2ddfbc691b3e0ab5a39468a9c","modified":1501421928474},{"_id":"public/archives/index.html","hash":"0a3a6975750c23ea731e4890637c828aca40f770","modified":1501421928474},{"_id":"public/archives/2016/index.html","hash":"82aa5d3bb299f99eff9fc52c97a43b25da29ebec","modified":1501421928474},{"_id":"public/tags/tools/index.html","hash":"01dfe439d64333b455f5f64791ef0795c20ac006","modified":1501421928474},{"_id":"public/tags/php/index.html","hash":"098d036afa590b661f1847ef961b2fb1423db60a","modified":1501421928474},{"_id":"public/tags/curl/index.html","hash":"2a6a30845cae6c50582c234cab23e2786f551f3b","modified":1501421928475},{"_id":"public/tags/javascript/index.html","hash":"b730b6d85ff1bc7f0cb57938a8795dd0c2497d9a","modified":1501421928475},{"_id":"public/tags/wechat/index.html","hash":"6d35b5f5f1a0fc65faf409b28152c9418f736e3a","modified":1501421928475},{"_id":"public/index.html","hash":"aa44d8a17e816a7936cdf051d6cf3422c15285fc","modified":1501421928475},{"_id":"public/page/2/index.html","hash":"3e7b1a367af73acbca75f86ecff67b25ec3254ba","modified":1501421928475},{"_id":"public/categories/Tools/index.html","hash":"cab74b7fc4c5517bb43da975821031562c795ab7","modified":1501421928504},{"_id":"public/2017/07/30/http-debug-tools/index.html","hash":"a6fe5d05a539dd047c408a53e4277183e7f5a49b","modified":1501421928504}],"Category":[{"name":"C","_id":"cj5qp2xa90004qo89ds4s0jmf"},{"name":"PHP","_id":"cj5qp2xaq000aqo89wcm67ddq"},{"name":"JavaScript","_id":"cj5qp2xav000fqo89c8ufpqb3"},{"name":"Git","_id":"cj5qp2xbj0012qo89qc6ys3nz"},{"name":"TypeScript","_id":"cj5qp2xbl0017qo89frv8sl21"},{"name":"WeChat","_id":"cj5qp2xbo001aqo89so29sgws"},{"name":"TCP","_id":"cj5qp2xbq001eqo895slxnc74"},{"name":"Tools","_id":"cj5qrukr20000ek89rvgat2pi"}],"Data":[],"Page":[{"layout":"categories","comments":0,"_content":"","source":"categories/index.md","raw":"---\nlayout: categories\ncomments: false\n---\n","date":"2017-04-22T19:11:12.777Z","updated":"2017-02-08T05:11:00.000Z","path":"categories/index.html","title":"","_id":"cj5qp2xa40001qo89iuleqrqo","content":"","excerpt":"","more":""},{"layout":"tags","comments":0,"_content":"","source":"tags/index.md","raw":"---\nlayout: tags\ncomments: false\n---\n","date":"2017-04-22T19:11:12.777Z","updated":"2017-02-08T05:09:54.000Z","path":"tags/index.html","title":"","_id":"cj5qp2xa80003qo89kwdyckda","content":"","excerpt":"","more":""},{"layout":"friends","comments":0,"_content":"","source":"friends/index.md","raw":"---\nlayout: friends\ncomments: false\n---\n","date":"2017-04-22T19:11:12.777Z","updated":"2017-02-10T16:27:15.000Z","path":"friends/index.html","title":"","_id":"cj5qp2xah0007qo89j0z8kjrm","content":"","excerpt":"","more":""}],"Post":[{"layout":"post","title":"关于C语言中的getch和getchar函数","description":"c-getch-getchar","date":"2016-04-27T16:00:00.000Z","_content":"\n最近在阅读K&R的经典之作The C Programming Language（C程序设计语言）时遇到了一个看似简单的函数 `getchar()` ，书中对其的描述是：\n\n> `getchar()` 函数从文本流中读出下一个输入字符，并将其作为结果值返回。\n\n并给出一段用于文件复制的代码：\n\n```c\n#include <stdio.h>\n\nmain()\n{\n    int c;\n    while ((c = getchar()) != EOF)\n    {\n        putchar(c);\n    }\n}\n```\n\n书中说该例子*就是把输入一次一个字符地复制到输出*。而我在Ubuntu下和Windows下运行程序时发现每次输入完回车后，程序才会将输入的内容整行输出，即：\n\n```bash\nabcdef\nabcdef\n```\n\n在网上查到， `getchar()` 是**有缓冲区、有回显**的，用户输入的字符（包括回车）被放在键盘缓冲区中，当用户输入回车后 `getchar()` 函数从缓冲区中每次读入一个字符，后续的 `getchar()` 不会等待用户按键，而是直接从缓冲区读取字符，直到读完缓冲区中的字符。\n\n[有人](http://blog.csdn.net/stars2009/article/details/3837488)这样解释书中的描述：\n\n> 在大师编写C的时候，当时并没有所谓终端输入的概念，所有的输入实际上都是按照文件进行读取的，文件中一般都是以行为单位的。因此，只有遇到换行符，那么程序会认为输入结束，然后采取执行程序的其他部分。同时，输入是按照文件的方式存取的，那么要结束一个文件的输入就需用到EOF (Enf Of File). 这也就是为什么getchar结束输入退出时要用EOF的原因。\n\n而C语言中的 `getch()` 函数是**无缓冲区、无回显**的。同时，在Windows下（换行符为 `\\r\\n` ）调试的过程中发现 `getchar()` 和 `getch()` 对于换行符的处理不同： `getchar()` 返回的的是 `\\n` 而 `getch()` 接收到 `\\r` 就返回了。对此也[有人](http://bbs.csdn.net/topics/360137572#post-370454446)这样解释：\n\n> 因为getchar()是标准的C库函数，在UNIX系统里回车一律只用\\n。\nWindows里回车输入的其实是\\r\\n，但是C库会对其进行处理（读写文本文件时也会），统一转换为规范的\\n。而getch()则是比较低级的，会越过这个处理，貌似没有经过输入流缓冲，而是直接调用键盘服务中断获得的，就是原始按键。\n\n另外，程序中使用 `int c` 而不是 `char c` 的原因是\n\n> EOF在函数库里一般定义为-1。因此，在这种情况下，getchar函数返回一个负值，把一个负值赋给一个char型的变量是不正确的。\n\n","source":"_posts/c-getch-getchar.md","raw":"---\nlayout: post\ntitle: \"关于C语言中的getch和getchar函数\"\ndescription: \"c-getch-getchar\"\ncategory: C\ntags: [c, buffer, LF, windows]\ndate: 2016-04-28\n---\n\n最近在阅读K&R的经典之作The C Programming Language（C程序设计语言）时遇到了一个看似简单的函数 `getchar()` ，书中对其的描述是：\n\n> `getchar()` 函数从文本流中读出下一个输入字符，并将其作为结果值返回。\n\n并给出一段用于文件复制的代码：\n\n```c\n#include <stdio.h>\n\nmain()\n{\n    int c;\n    while ((c = getchar()) != EOF)\n    {\n        putchar(c);\n    }\n}\n```\n\n书中说该例子*就是把输入一次一个字符地复制到输出*。而我在Ubuntu下和Windows下运行程序时发现每次输入完回车后，程序才会将输入的内容整行输出，即：\n\n```bash\nabcdef\nabcdef\n```\n\n在网上查到， `getchar()` 是**有缓冲区、有回显**的，用户输入的字符（包括回车）被放在键盘缓冲区中，当用户输入回车后 `getchar()` 函数从缓冲区中每次读入一个字符，后续的 `getchar()` 不会等待用户按键，而是直接从缓冲区读取字符，直到读完缓冲区中的字符。\n\n[有人](http://blog.csdn.net/stars2009/article/details/3837488)这样解释书中的描述：\n\n> 在大师编写C的时候，当时并没有所谓终端输入的概念，所有的输入实际上都是按照文件进行读取的，文件中一般都是以行为单位的。因此，只有遇到换行符，那么程序会认为输入结束，然后采取执行程序的其他部分。同时，输入是按照文件的方式存取的，那么要结束一个文件的输入就需用到EOF (Enf Of File). 这也就是为什么getchar结束输入退出时要用EOF的原因。\n\n而C语言中的 `getch()` 函数是**无缓冲区、无回显**的。同时，在Windows下（换行符为 `\\r\\n` ）调试的过程中发现 `getchar()` 和 `getch()` 对于换行符的处理不同： `getchar()` 返回的的是 `\\n` 而 `getch()` 接收到 `\\r` 就返回了。对此也[有人](http://bbs.csdn.net/topics/360137572#post-370454446)这样解释：\n\n> 因为getchar()是标准的C库函数，在UNIX系统里回车一律只用\\n。\nWindows里回车输入的其实是\\r\\n，但是C库会对其进行处理（读写文本文件时也会），统一转换为规范的\\n。而getch()则是比较低级的，会越过这个处理，貌似没有经过输入流缓冲，而是直接调用键盘服务中断获得的，就是原始按键。\n\n另外，程序中使用 `int c` 而不是 `char c` 的原因是\n\n> EOF在函数库里一般定义为-1。因此，在这种情况下，getchar函数返回一个负值，把一个负值赋给一个char型的变量是不正确的。\n\n","slug":"c-getch-getchar","published":1,"updated":"2017-02-08T05:31:16.000Z","comments":1,"photos":[],"link":"","_id":"cj5qp2x9z0000qo89kyqnvykv","content":"<p>最近在阅读K&amp;R的经典之作The C Programming Language（C程序设计语言）时遇到了一个看似简单的函数 <code>getchar()</code> ，书中对其的描述是：</p>\n<blockquote>\n<p><code>getchar()</code> 函数从文本流中读出下一个输入字符，并将其作为结果值返回。</p>\n</blockquote>\n<p>并给出一段用于文件复制的代码：</p>\n<figure class=\"highlight c\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div><div class=\"line\">6</div><div class=\"line\">7</div><div class=\"line\">8</div><div class=\"line\">9</div><div class=\"line\">10</div></pre></td><td class=\"code\"><pre><div class=\"line\"><span class=\"meta\">#<span class=\"meta-keyword\">include</span> <span class=\"meta-string\">&lt;stdio.h&gt;</span></span></div><div class=\"line\"></div><div class=\"line\">main()</div><div class=\"line\">&#123;</div><div class=\"line\">    <span class=\"keyword\">int</span> c;</div><div class=\"line\">    <span class=\"keyword\">while</span> ((c = getchar()) != EOF)</div><div class=\"line\">    &#123;</div><div class=\"line\">        <span class=\"built_in\">putchar</span>(c);</div><div class=\"line\">    &#125;</div><div class=\"line\">&#125;</div></pre></td></tr></table></figure>\n<p>书中说该例子<em>就是把输入一次一个字符地复制到输出</em>。而我在Ubuntu下和Windows下运行程序时发现每次输入完回车后，程序才会将输入的内容整行输出，即：</p>\n<figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div></pre></td><td class=\"code\"><pre><div class=\"line\">abcdef</div><div class=\"line\">abcdef</div></pre></td></tr></table></figure>\n<p>在网上查到， <code>getchar()</code> 是<strong>有缓冲区、有回显</strong>的，用户输入的字符（包括回车）被放在键盘缓冲区中，当用户输入回车后 <code>getchar()</code> 函数从缓冲区中每次读入一个字符，后续的 <code>getchar()</code> 不会等待用户按键，而是直接从缓冲区读取字符，直到读完缓冲区中的字符。</p>\n<p><a href=\"http://blog.csdn.net/stars2009/article/details/3837488\" target=\"_blank\" rel=\"external\">有人</a>这样解释书中的描述：</p>\n<blockquote>\n<p>在大师编写C的时候，当时并没有所谓终端输入的概念，所有的输入实际上都是按照文件进行读取的，文件中一般都是以行为单位的。因此，只有遇到换行符，那么程序会认为输入结束，然后采取执行程序的其他部分。同时，输入是按照文件的方式存取的，那么要结束一个文件的输入就需用到EOF (Enf Of File). 这也就是为什么getchar结束输入退出时要用EOF的原因。</p>\n</blockquote>\n<p>而C语言中的 <code>getch()</code> 函数是<strong>无缓冲区、无回显</strong>的。同时，在Windows下（换行符为 <code>\\r\\n</code> ）调试的过程中发现 <code>getchar()</code> 和 <code>getch()</code> 对于换行符的处理不同： <code>getchar()</code> 返回的的是 <code>\\n</code> 而 <code>getch()</code> 接收到 <code>\\r</code> 就返回了。对此也<a href=\"http://bbs.csdn.net/topics/360137572#post-370454446\" target=\"_blank\" rel=\"external\">有人</a>这样解释：</p>\n<blockquote>\n<p>因为getchar()是标准的C库函数，在UNIX系统里回车一律只用\\n。<br>Windows里回车输入的其实是\\r\\n，但是C库会对其进行处理（读写文本文件时也会），统一转换为规范的\\n。而getch()则是比较低级的，会越过这个处理，貌似没有经过输入流缓冲，而是直接调用键盘服务中断获得的，就是原始按键。</p>\n</blockquote>\n<p>另外，程序中使用 <code>int c</code> 而不是 <code>char c</code> 的原因是</p>\n<blockquote>\n<p>EOF在函数库里一般定义为-1。因此，在这种情况下，getchar函数返回一个负值，把一个负值赋给一个char型的变量是不正确的。</p>\n</blockquote>\n","excerpt":"","more":"<p>最近在阅读K&amp;R的经典之作The C Programming Language（C程序设计语言）时遇到了一个看似简单的函数 <code>getchar()</code> ，书中对其的描述是：</p>\n<blockquote>\n<p><code>getchar()</code> 函数从文本流中读出下一个输入字符，并将其作为结果值返回。</p>\n</blockquote>\n<p>并给出一段用于文件复制的代码：</p>\n<figure class=\"highlight c\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div><div class=\"line\">6</div><div class=\"line\">7</div><div class=\"line\">8</div><div class=\"line\">9</div><div class=\"line\">10</div></pre></td><td class=\"code\"><pre><div class=\"line\"><span class=\"meta\">#<span class=\"meta-keyword\">include</span> <span class=\"meta-string\">&lt;stdio.h&gt;</span></span></div><div class=\"line\"></div><div class=\"line\">main()</div><div class=\"line\">&#123;</div><div class=\"line\">    <span class=\"keyword\">int</span> c;</div><div class=\"line\">    <span class=\"keyword\">while</span> ((c = getchar()) != EOF)</div><div class=\"line\">    &#123;</div><div class=\"line\">        <span class=\"built_in\">putchar</span>(c);</div><div class=\"line\">    &#125;</div><div class=\"line\">&#125;</div></pre></td></tr></table></figure>\n<p>书中说该例子<em>就是把输入一次一个字符地复制到输出</em>。而我在Ubuntu下和Windows下运行程序时发现每次输入完回车后，程序才会将输入的内容整行输出，即：</p>\n<figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div></pre></td><td class=\"code\"><pre><div class=\"line\">abcdef</div><div class=\"line\">abcdef</div></pre></td></tr></table></figure>\n<p>在网上查到， <code>getchar()</code> 是<strong>有缓冲区、有回显</strong>的，用户输入的字符（包括回车）被放在键盘缓冲区中，当用户输入回车后 <code>getchar()</code> 函数从缓冲区中每次读入一个字符，后续的 <code>getchar()</code> 不会等待用户按键，而是直接从缓冲区读取字符，直到读完缓冲区中的字符。</p>\n<p><a href=\"http://blog.csdn.net/stars2009/article/details/3837488\">有人</a>这样解释书中的描述：</p>\n<blockquote>\n<p>在大师编写C的时候，当时并没有所谓终端输入的概念，所有的输入实际上都是按照文件进行读取的，文件中一般都是以行为单位的。因此，只有遇到换行符，那么程序会认为输入结束，然后采取执行程序的其他部分。同时，输入是按照文件的方式存取的，那么要结束一个文件的输入就需用到EOF (Enf Of File). 这也就是为什么getchar结束输入退出时要用EOF的原因。</p>\n</blockquote>\n<p>而C语言中的 <code>getch()</code> 函数是<strong>无缓冲区、无回显</strong>的。同时，在Windows下（换行符为 <code>\\r\\n</code> ）调试的过程中发现 <code>getchar()</code> 和 <code>getch()</code> 对于换行符的处理不同： <code>getchar()</code> 返回的的是 <code>\\n</code> 而 <code>getch()</code> 接收到 <code>\\r</code> 就返回了。对此也<a href=\"http://bbs.csdn.net/topics/360137572#post-370454446\">有人</a>这样解释：</p>\n<blockquote>\n<p>因为getchar()是标准的C库函数，在UNIX系统里回车一律只用\\n。<br>Windows里回车输入的其实是\\r\\n，但是C库会对其进行处理（读写文本文件时也会），统一转换为规范的\\n。而getch()则是比较低级的，会越过这个处理，貌似没有经过输入流缓冲，而是直接调用键盘服务中断获得的，就是原始按键。</p>\n</blockquote>\n<p>另外，程序中使用 <code>int c</code> 而不是 <code>char c</code> 的原因是</p>\n<blockquote>\n<p>EOF在函数库里一般定义为-1。因此，在这种情况下，getchar函数返回一个负值，把一个负值赋给一个char型的变量是不正确的。</p>\n</blockquote>\n"},{"title":"一些好用的HTTP调试工具","date":"2017-07-30T12:19:16.000Z","description":"http-debug-tools","_content":"\n## 一、发送请求\n\n### cURL\n\ncURL 是Linux下的命令行工具，windows 下可通过MinGW安装（安装Git for windows即可）。\n\n基本用法：\n\n- GET\n\n```bash\ncurl \"http://www.hotmail.com/when/junk.cgi?birthyear=1905&press=OK\"\n```\n\n- POST\n\n```bash\n# application/x-www-form-urlencoded\ncurl --data \"birthyear=1905&press=%20OK%20\"  http://www.example.com/when.cgi\n```\n\n- HEAD\n\n```bash\ncurl --head \"http://www.hotmail.com/when/junk.cgi?birthyear=1905&press=OK\"\n```\n\n### HTTPie\n\nHTTPie 是使用python开发的命令行工具，可用pip安装。\n\n基本用法：\n\n```bash\nhttp [flags] [METHOD] URL [ITEM [ITEM]]\n```\n\n### Postman/Restlet Client\n\nPostman 和 Restlet Client都是Chrome下的扩展（应用），具有图形化界面，很容易使用。\n- [Postman](https://chrome.google.com/webstore/detail/postman/fhbjgbiflinjbdggehcddcbncdddomop)\n- [Restlet Client](https://chrome.google.com/webstore/detail/restlet-client-rest-api-t/aejoelaoggembcahagimdiliamlcdmfm)\n\n## 二、抓包(未完待续。。。)\n\n### Fiddler/Charles\n\n### Wireshark\n\n### Chrome dev-tools\n\n### TcpDump\n\n## 参考\n\n- [curl - Tutorial](https://curl.haxx.se/docs/httpscripting.html)\n\n- [Documentation | HTTPie – CLI HTTP client](https://httpie.org/doc)","source":"_posts/http-debug-tools.md","raw":"---\ntitle: 一些好用的HTTP调试工具\ndate: 2017-07-30 20:19:16\ntags: [tools]\ndescription: \"http-debug-tools\"\ncategory: Tools\n---\n\n## 一、发送请求\n\n### cURL\n\ncURL 是Linux下的命令行工具，windows 下可通过MinGW安装（安装Git for windows即可）。\n\n基本用法：\n\n- GET\n\n```bash\ncurl \"http://www.hotmail.com/when/junk.cgi?birthyear=1905&press=OK\"\n```\n\n- POST\n\n```bash\n# application/x-www-form-urlencoded\ncurl --data \"birthyear=1905&press=%20OK%20\"  http://www.example.com/when.cgi\n```\n\n- HEAD\n\n```bash\ncurl --head \"http://www.hotmail.com/when/junk.cgi?birthyear=1905&press=OK\"\n```\n\n### HTTPie\n\nHTTPie 是使用python开发的命令行工具，可用pip安装。\n\n基本用法：\n\n```bash\nhttp [flags] [METHOD] URL [ITEM [ITEM]]\n```\n\n### Postman/Restlet Client\n\nPostman 和 Restlet Client都是Chrome下的扩展（应用），具有图形化界面，很容易使用。\n- [Postman](https://chrome.google.com/webstore/detail/postman/fhbjgbiflinjbdggehcddcbncdddomop)\n- [Restlet Client](https://chrome.google.com/webstore/detail/restlet-client-rest-api-t/aejoelaoggembcahagimdiliamlcdmfm)\n\n## 二、抓包(未完待续。。。)\n\n### Fiddler/Charles\n\n### Wireshark\n\n### Chrome dev-tools\n\n### TcpDump\n\n## 参考\n\n- [curl - Tutorial](https://curl.haxx.se/docs/httpscripting.html)\n\n- [Documentation | HTTPie – CLI HTTP client](https://httpie.org/doc)","slug":"http-debug-tools","published":1,"updated":"2017-07-30T13:38:02.925Z","_id":"cj5qp2xa60002qo89bx7l5rno","comments":1,"layout":"post","photos":[],"link":"","content":"<h2 id=\"一、发送请求\"><a href=\"#一、发送请求\" class=\"headerlink\" title=\"一、发送请求\"></a>一、发送请求</h2><h3 id=\"cURL\"><a href=\"#cURL\" class=\"headerlink\" title=\"cURL\"></a>cURL</h3><p>cURL 是Linux下的命令行工具，windows 下可通过MinGW安装（安装Git for windows即可）。</p>\n<p>基本用法：</p>\n<ul>\n<li>GET</li>\n</ul>\n<figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div></pre></td><td class=\"code\"><pre><div class=\"line\">curl <span class=\"string\">\"http://www.hotmail.com/when/junk.cgi?birthyear=1905&amp;press=OK\"</span></div></pre></td></tr></table></figure>\n<ul>\n<li>POST</li>\n</ul>\n<figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div></pre></td><td class=\"code\"><pre><div class=\"line\"><span class=\"comment\"># application/x-www-form-urlencoded</span></div><div class=\"line\">curl --data <span class=\"string\">\"birthyear=1905&amp;press=%20OK%20\"</span>  http://www.example.com/when.cgi</div></pre></td></tr></table></figure>\n<ul>\n<li>HEAD</li>\n</ul>\n<figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div></pre></td><td class=\"code\"><pre><div class=\"line\">curl --head <span class=\"string\">\"http://www.hotmail.com/when/junk.cgi?birthyear=1905&amp;press=OK\"</span></div></pre></td></tr></table></figure>\n<h3 id=\"HTTPie\"><a href=\"#HTTPie\" class=\"headerlink\" title=\"HTTPie\"></a>HTTPie</h3><p>HTTPie 是使用python开发的命令行工具，可用pip安装。</p>\n<p>基本用法：</p>\n<figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div></pre></td><td class=\"code\"><pre><div class=\"line\">http [flags] [METHOD] URL [ITEM [ITEM]]</div></pre></td></tr></table></figure>\n<h3 id=\"Postman-Restlet-Client\"><a href=\"#Postman-Restlet-Client\" class=\"headerlink\" title=\"Postman/Restlet Client\"></a>Postman/Restlet Client</h3><p>Postman 和 Restlet Client都是Chrome下的扩展（应用），具有图形化界面，很容易使用。</p>\n<ul>\n<li><a href=\"https://chrome.google.com/webstore/detail/postman/fhbjgbiflinjbdggehcddcbncdddomop\" target=\"_blank\" rel=\"external\">Postman</a></li>\n<li><a href=\"https://chrome.google.com/webstore/detail/restlet-client-rest-api-t/aejoelaoggembcahagimdiliamlcdmfm\" target=\"_blank\" rel=\"external\">Restlet Client</a></li>\n</ul>\n<h2 id=\"二、抓包-未完待续。。。\"><a href=\"#二、抓包-未完待续。。。\" class=\"headerlink\" title=\"二、抓包(未完待续。。。)\"></a>二、抓包(未完待续。。。)</h2><h3 id=\"Fiddler-Charles\"><a href=\"#Fiddler-Charles\" class=\"headerlink\" title=\"Fiddler/Charles\"></a>Fiddler/Charles</h3><h3 id=\"Wireshark\"><a href=\"#Wireshark\" class=\"headerlink\" title=\"Wireshark\"></a>Wireshark</h3><h3 id=\"Chrome-dev-tools\"><a href=\"#Chrome-dev-tools\" class=\"headerlink\" title=\"Chrome dev-tools\"></a>Chrome dev-tools</h3><h3 id=\"TcpDump\"><a href=\"#TcpDump\" class=\"headerlink\" title=\"TcpDump\"></a>TcpDump</h3><h2 id=\"参考\"><a href=\"#参考\" class=\"headerlink\" title=\"参考\"></a>参考</h2><ul>\n<li><p><a href=\"https://curl.haxx.se/docs/httpscripting.html\" target=\"_blank\" rel=\"external\">curl - Tutorial</a></p>\n</li>\n<li><p><a href=\"https://httpie.org/doc\" target=\"_blank\" rel=\"external\">Documentation | HTTPie – CLI HTTP client</a></p>\n</li>\n</ul>\n","excerpt":"","more":"<h2 id=\"一、发送请求\"><a href=\"#一、发送请求\" class=\"headerlink\" title=\"一、发送请求\"></a>一、发送请求</h2><h3 id=\"cURL\"><a href=\"#cURL\" class=\"headerlink\" title=\"cURL\"></a>cURL</h3><p>cURL 是Linux下的命令行工具，windows 下可通过MinGW安装（安装Git for windows即可）。</p>\n<p>基本用法：</p>\n<ul>\n<li>GET</li>\n</ul>\n<figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div></pre></td><td class=\"code\"><pre><div class=\"line\">curl <span class=\"string\">\"http://www.hotmail.com/when/junk.cgi?birthyear=1905&amp;press=OK\"</span></div></pre></td></tr></table></figure>\n<ul>\n<li>POST</li>\n</ul>\n<figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div></pre></td><td class=\"code\"><pre><div class=\"line\"><span class=\"comment\"># application/x-www-form-urlencoded</span></div><div class=\"line\">curl --data <span class=\"string\">\"birthyear=1905&amp;press=%20OK%20\"</span>  http://www.example.com/when.cgi</div></pre></td></tr></table></figure>\n<ul>\n<li>HEAD</li>\n</ul>\n<figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div></pre></td><td class=\"code\"><pre><div class=\"line\">curl --head <span class=\"string\">\"http://www.hotmail.com/when/junk.cgi?birthyear=1905&amp;press=OK\"</span></div></pre></td></tr></table></figure>\n<h3 id=\"HTTPie\"><a href=\"#HTTPie\" class=\"headerlink\" title=\"HTTPie\"></a>HTTPie</h3><p>HTTPie 是使用python开发的命令行工具，可用pip安装。</p>\n<p>基本用法：</p>\n<figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div></pre></td><td class=\"code\"><pre><div class=\"line\">http [flags] [METHOD] URL [ITEM [ITEM]]</div></pre></td></tr></table></figure>\n<h3 id=\"Postman-Restlet-Client\"><a href=\"#Postman-Restlet-Client\" class=\"headerlink\" title=\"Postman/Restlet Client\"></a>Postman/Restlet Client</h3><p>Postman 和 Restlet Client都是Chrome下的扩展（应用），具有图形化界面，很容易使用。</p>\n<ul>\n<li><a href=\"https://chrome.google.com/webstore/detail/postman/fhbjgbiflinjbdggehcddcbncdddomop\">Postman</a></li>\n<li><a href=\"https://chrome.google.com/webstore/detail/restlet-client-rest-api-t/aejoelaoggembcahagimdiliamlcdmfm\">Restlet Client</a></li>\n</ul>\n<h2 id=\"二、抓包-未完待续。。。\"><a href=\"#二、抓包-未完待续。。。\" class=\"headerlink\" title=\"二、抓包(未完待续。。。)\"></a>二、抓包(未完待续。。。)</h2><h3 id=\"Fiddler-Charles\"><a href=\"#Fiddler-Charles\" class=\"headerlink\" title=\"Fiddler/Charles\"></a>Fiddler/Charles</h3><h3 id=\"Wireshark\"><a href=\"#Wireshark\" class=\"headerlink\" title=\"Wireshark\"></a>Wireshark</h3><h3 id=\"Chrome-dev-tools\"><a href=\"#Chrome-dev-tools\" class=\"headerlink\" title=\"Chrome dev-tools\"></a>Chrome dev-tools</h3><h3 id=\"TcpDump\"><a href=\"#TcpDump\" class=\"headerlink\" title=\"TcpDump\"></a>TcpDump</h3><h2 id=\"参考\"><a href=\"#参考\" class=\"headerlink\" title=\"参考\"></a>参考</h2><ul>\n<li><p><a href=\"https://curl.haxx.se/docs/httpscripting.html\">curl - Tutorial</a></p>\n</li>\n<li><p><a href=\"https://httpie.org/doc\">Documentation | HTTPie – CLI HTTP client</a></p>\n</li>\n</ul>\n"},{"layout":"post","title":"PHP curl post 数组与 post query字符串的区别","description":"","comments":1,"date":"2016-03-29T16:00:00.000Z","_content":"\n使用PHP的curl方法post数据时通常使用以下方法：\n\n```php\n$post_fields = [\"aaa\"=>\"aaaa\", \"bbb\"=>\"bbbb\"];\n$url = \"http://localhost/sandbox/PHPTest/output.php\";\n$ch = curl_init();\ncurl_setopt($ch, CURLOPT_URL, $url);\ncurl_setopt($ch, CURLOPT_POST, 1);\ncurl_setopt($ch, CURLOPT_POSTFIELDS, $post_fields);\ncurl_setopt($ch, CURLOPT_RETURNTRANSFER, 1);\n$response = curl_exec($ch);\necho $response;\n```\n\n$url为php页面时，该方法没有遇到问题，但$url为jsp页面时，出现post数据为空的情况，即在jsp页面用`request.getParameter(\"aaa\")`得到的结果为null。尝试将$post_fields拼接为query字符串：\n\n```php\n$post_fields = http_build_query($post_fields);\n```\n\n结果正确。\n抓包对比直接post数组与post query字符串两种方法结果如下：\n\n- ### 直接post数组\n    - header\n\n        ![array header](http://leoyoung07.github.io/blog/img/2016-03-30-differences-between-post-array-and-query-string-with-php-curl/1.png)\n    - body\n\n        ![array body](http://leoyoung07.github.io/blog/img/2016-03-30-differences-between-post-array-and-query-string-with-php-curl/2.png)\n\n- ### post query字符串\n    - header\n\n        ![query string header](http://leoyoung07.github.io/blog/img/2016-03-30-differences-between-post-array-and-query-string-with-php-curl/3.png)\n    - body\n\n        ![query string body](http://leoyoung07.github.io/blog/img/2016-03-30-differences-between-post-array-and-query-string-with-php-curl/4.png)\n\n可见，直接post数组时，Content-type为`multipart/form-data`；而post query字符串时Content-type为`application/x-www-form-urlencoded`。\n\nPHP手册中对CURLOPT_POSTFIELDS的说明如下：\n\n> 全部数据使用HTTP协议中的\"POST\"操作来发送。要发送文件，在文件名前面加上@前缀并使用完整路径。这个参数可以通过urlencoded后的字符串类似'para1=val1&para2=val2&...'或使用一个以字段名为键值，字段数据为值的数组。如果value是一个数组，Content-Type头将会被设置成multipart/form-data。","source":"_posts/differences-between-post-array-and-query-string-with-php-curl.md","raw":"---\nlayout: post\ntitle: \"PHP curl post 数组与 post query字符串的区别\"\ndescription: \"\"\ncomments: true\ncategory: PHP\ntags: [php, curl, post]\ndate: 2016-03-30\n---\n\n使用PHP的curl方法post数据时通常使用以下方法：\n\n```php\n$post_fields = [\"aaa\"=>\"aaaa\", \"bbb\"=>\"bbbb\"];\n$url = \"http://localhost/sandbox/PHPTest/output.php\";\n$ch = curl_init();\ncurl_setopt($ch, CURLOPT_URL, $url);\ncurl_setopt($ch, CURLOPT_POST, 1);\ncurl_setopt($ch, CURLOPT_POSTFIELDS, $post_fields);\ncurl_setopt($ch, CURLOPT_RETURNTRANSFER, 1);\n$response = curl_exec($ch);\necho $response;\n```\n\n$url为php页面时，该方法没有遇到问题，但$url为jsp页面时，出现post数据为空的情况，即在jsp页面用`request.getParameter(\"aaa\")`得到的结果为null。尝试将$post_fields拼接为query字符串：\n\n```php\n$post_fields = http_build_query($post_fields);\n```\n\n结果正确。\n抓包对比直接post数组与post query字符串两种方法结果如下：\n\n- ### 直接post数组\n    - header\n\n        ![array header](http://leoyoung07.github.io/blog/img/2016-03-30-differences-between-post-array-and-query-string-with-php-curl/1.png)\n    - body\n\n        ![array body](http://leoyoung07.github.io/blog/img/2016-03-30-differences-between-post-array-and-query-string-with-php-curl/2.png)\n\n- ### post query字符串\n    - header\n\n        ![query string header](http://leoyoung07.github.io/blog/img/2016-03-30-differences-between-post-array-and-query-string-with-php-curl/3.png)\n    - body\n\n        ![query string body](http://leoyoung07.github.io/blog/img/2016-03-30-differences-between-post-array-and-query-string-with-php-curl/4.png)\n\n可见，直接post数组时，Content-type为`multipart/form-data`；而post query字符串时Content-type为`application/x-www-form-urlencoded`。\n\nPHP手册中对CURLOPT_POSTFIELDS的说明如下：\n\n> 全部数据使用HTTP协议中的\"POST\"操作来发送。要发送文件，在文件名前面加上@前缀并使用完整路径。这个参数可以通过urlencoded后的字符串类似'para1=val1&para2=val2&...'或使用一个以字段名为键值，字段数据为值的数组。如果value是一个数组，Content-Type头将会被设置成multipart/form-data。","slug":"differences-between-post-array-and-query-string-with-php-curl","published":1,"updated":"2017-02-08T10:22:19.000Z","photos":[],"link":"","_id":"cj5qp2xae0006qo89eb67eqeu","content":"<p>使用PHP的curl方法post数据时通常使用以下方法：</p>\n<figure class=\"highlight php\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div><div class=\"line\">6</div><div class=\"line\">7</div><div class=\"line\">8</div><div class=\"line\">9</div></pre></td><td class=\"code\"><pre><div class=\"line\">$post_fields = [<span class=\"string\">\"aaa\"</span>=&gt;<span class=\"string\">\"aaaa\"</span>, <span class=\"string\">\"bbb\"</span>=&gt;<span class=\"string\">\"bbbb\"</span>];</div><div class=\"line\">$url = <span class=\"string\">\"http://localhost/sandbox/PHPTest/output.php\"</span>;</div><div class=\"line\">$ch = curl_init();</div><div class=\"line\">curl_setopt($ch, CURLOPT_URL, $url);</div><div class=\"line\">curl_setopt($ch, CURLOPT_POST, <span class=\"number\">1</span>);</div><div class=\"line\">curl_setopt($ch, CURLOPT_POSTFIELDS, $post_fields);</div><div class=\"line\">curl_setopt($ch, CURLOPT_RETURNTRANSFER, <span class=\"number\">1</span>);</div><div class=\"line\">$response = curl_exec($ch);</div><div class=\"line\"><span class=\"keyword\">echo</span> $response;</div></pre></td></tr></table></figure>\n<p>$url为php页面时，该方法没有遇到问题，但$url为jsp页面时，出现post数据为空的情况，即在jsp页面用<code>request.getParameter(&quot;aaa&quot;)</code>得到的结果为null。尝试将$post_fields拼接为query字符串：</p>\n<figure class=\"highlight php\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div></pre></td><td class=\"code\"><pre><div class=\"line\">$post_fields = http_build_query($post_fields);</div></pre></td></tr></table></figure>\n<p>结果正确。<br>抓包对比直接post数组与post query字符串两种方法结果如下：</p>\n<ul>\n<li><h3 id=\"直接post数组\"><a href=\"#直接post数组\" class=\"headerlink\" title=\"直接post数组\"></a>直接post数组</h3><ul>\n<li><p>header</p>\n<p>  <img src=\"http://leoyoung07.github.io/blog/img/2016-03-30-differences-between-post-array-and-query-string-with-php-curl/1.png\" alt=\"array header\"></p>\n</li>\n<li><p>body</p>\n<p>  <img src=\"http://leoyoung07.github.io/blog/img/2016-03-30-differences-between-post-array-and-query-string-with-php-curl/2.png\" alt=\"array body\"></p>\n</li>\n</ul>\n</li>\n<li><h3 id=\"post-query字符串\"><a href=\"#post-query字符串\" class=\"headerlink\" title=\"post query字符串\"></a>post query字符串</h3><ul>\n<li><p>header</p>\n<p>  <img src=\"http://leoyoung07.github.io/blog/img/2016-03-30-differences-between-post-array-and-query-string-with-php-curl/3.png\" alt=\"query string header\"></p>\n</li>\n<li><p>body</p>\n<p>  <img src=\"http://leoyoung07.github.io/blog/img/2016-03-30-differences-between-post-array-and-query-string-with-php-curl/4.png\" alt=\"query string body\"></p>\n</li>\n</ul>\n</li>\n</ul>\n<p>可见，直接post数组时，Content-type为<code>multipart/form-data</code>；而post query字符串时Content-type为<code>application/x-www-form-urlencoded</code>。</p>\n<p>PHP手册中对CURLOPT_POSTFIELDS的说明如下：</p>\n<blockquote>\n<p>全部数据使用HTTP协议中的”POST”操作来发送。要发送文件，在文件名前面加上@前缀并使用完整路径。这个参数可以通过urlencoded后的字符串类似’para1=val1&amp;para2=val2&amp;…’或使用一个以字段名为键值，字段数据为值的数组。如果value是一个数组，Content-Type头将会被设置成multipart/form-data。</p>\n</blockquote>\n","excerpt":"","more":"<p>使用PHP的curl方法post数据时通常使用以下方法：</p>\n<figure class=\"highlight php\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div><div class=\"line\">6</div><div class=\"line\">7</div><div class=\"line\">8</div><div class=\"line\">9</div></pre></td><td class=\"code\"><pre><div class=\"line\">$post_fields = [<span class=\"string\">\"aaa\"</span>=&gt;<span class=\"string\">\"aaaa\"</span>, <span class=\"string\">\"bbb\"</span>=&gt;<span class=\"string\">\"bbbb\"</span>];</div><div class=\"line\">$url = <span class=\"string\">\"http://localhost/sandbox/PHPTest/output.php\"</span>;</div><div class=\"line\">$ch = curl_init();</div><div class=\"line\">curl_setopt($ch, CURLOPT_URL, $url);</div><div class=\"line\">curl_setopt($ch, CURLOPT_POST, <span class=\"number\">1</span>);</div><div class=\"line\">curl_setopt($ch, CURLOPT_POSTFIELDS, $post_fields);</div><div class=\"line\">curl_setopt($ch, CURLOPT_RETURNTRANSFER, <span class=\"number\">1</span>);</div><div class=\"line\">$response = curl_exec($ch);</div><div class=\"line\"><span class=\"keyword\">echo</span> $response;</div></pre></td></tr></table></figure>\n<p>$url为php页面时，该方法没有遇到问题，但$url为jsp页面时，出现post数据为空的情况，即在jsp页面用<code>request.getParameter(&quot;aaa&quot;)</code>得到的结果为null。尝试将$post_fields拼接为query字符串：</p>\n<figure class=\"highlight php\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div></pre></td><td class=\"code\"><pre><div class=\"line\">$post_fields = http_build_query($post_fields);</div></pre></td></tr></table></figure>\n<p>结果正确。<br>抓包对比直接post数组与post query字符串两种方法结果如下：</p>\n<ul>\n<li><h3 id=\"直接post数组\"><a href=\"#直接post数组\" class=\"headerlink\" title=\"直接post数组\"></a>直接post数组</h3><ul>\n<li><p>header</p>\n<p>  <img src=\"http://leoyoung07.github.io/blog/img/2016-03-30-differences-between-post-array-and-query-string-with-php-curl/1.png\" alt=\"array header\"></p>\n</li>\n<li><p>body</p>\n<p>  <img src=\"http://leoyoung07.github.io/blog/img/2016-03-30-differences-between-post-array-and-query-string-with-php-curl/2.png\" alt=\"array body\"></p>\n</li>\n</ul>\n</li>\n<li><h3 id=\"post-query字符串\"><a href=\"#post-query字符串\" class=\"headerlink\" title=\"post query字符串\"></a>post query字符串</h3><ul>\n<li><p>header</p>\n<p>  <img src=\"http://leoyoung07.github.io/blog/img/2016-03-30-differences-between-post-array-and-query-string-with-php-curl/3.png\" alt=\"query string header\"></p>\n</li>\n<li><p>body</p>\n<p>  <img src=\"http://leoyoung07.github.io/blog/img/2016-03-30-differences-between-post-array-and-query-string-with-php-curl/4.png\" alt=\"query string body\"></p>\n</li>\n</ul>\n</li>\n</ul>\n<p>可见，直接post数组时，Content-type为<code>multipart/form-data</code>；而post query字符串时Content-type为<code>application/x-www-form-urlencoded</code>。</p>\n<p>PHP手册中对CURLOPT_POSTFIELDS的说明如下：</p>\n<blockquote>\n<p>全部数据使用HTTP协议中的”POST”操作来发送。要发送文件，在文件名前面加上@前缀并使用完整路径。这个参数可以通过urlencoded后的字符串类似’para1=val1&amp;para2=val2&amp;…’或使用一个以字段名为键值，字段数据为值的数组。如果value是一个数组，Content-Type头将会被设置成multipart/form-data。</p>\n</blockquote>\n"},{"layout":"post","title":"ECharts 使用过程中遇到的问题","description":"echarts-problems","date":"2017-02-20T16:00:00.000Z","_content":"\n# 记录ECharts使用过程中遇到的一些问题\n\n1. 页面内容被tooltip的div遮盖\n\n    - 描述：\n\n        在页面中为div元素使用全局的style（主要是宽和高）时，图表后面的内容会被tooltip的div遮盖，导致input等元素无法点击、无法输入内容。\n    - 原因：\n\n        图表初始化时会在TooltipContent方法中创建一个空的div元素作为tooltip，不带样式，而包含该div的父级div的position被设置为relative。当页面中为div元素设置全局的宽和高时，tooltip的div就会遮盖后面的元素。\n\n    - 解决：\n\n        修改源码，在TooltipContent方法中，tooltip的div被创建后，为其添加 `display: none` 样式。即：\n        ```JavaScript\n        var el = document.createElement('div');\n        el.style.display = \"none\";\n        ```\n        由于tooltip所在的div的style（主要是display属性）在显示时会动态改变，所以这样修改不会影响之后tooltip的显示。","source":"_posts/echarts-problems.md","raw":"---\nlayout: post\ntitle: \"ECharts 使用过程中遇到的问题\"\ndescription: \"echarts-problems\"\ncategory: JavaScript\ntags: [echarts]\ndate: 2017-02-21\n---\n\n# 记录ECharts使用过程中遇到的一些问题\n\n1. 页面内容被tooltip的div遮盖\n\n    - 描述：\n\n        在页面中为div元素使用全局的style（主要是宽和高）时，图表后面的内容会被tooltip的div遮盖，导致input等元素无法点击、无法输入内容。\n    - 原因：\n\n        图表初始化时会在TooltipContent方法中创建一个空的div元素作为tooltip，不带样式，而包含该div的父级div的position被设置为relative。当页面中为div元素设置全局的宽和高时，tooltip的div就会遮盖后面的元素。\n\n    - 解决：\n\n        修改源码，在TooltipContent方法中，tooltip的div被创建后，为其添加 `display: none` 样式。即：\n        ```JavaScript\n        var el = document.createElement('div');\n        el.style.display = \"none\";\n        ```\n        由于tooltip所在的div的style（主要是display属性）在显示时会动态改变，所以这样修改不会影响之后tooltip的显示。","slug":"echarts-problems","published":1,"updated":"2017-02-21T06:28:38.000Z","comments":1,"photos":[],"link":"","_id":"cj5qp2xaj0008qo89f95lqabx","content":"<h1 id=\"记录ECharts使用过程中遇到的一些问题\"><a href=\"#记录ECharts使用过程中遇到的一些问题\" class=\"headerlink\" title=\"记录ECharts使用过程中遇到的一些问题\"></a>记录ECharts使用过程中遇到的一些问题</h1><ol>\n<li><p>页面内容被tooltip的div遮盖</p>\n<ul>\n<li><p>描述：</p>\n<p>  在页面中为div元素使用全局的style（主要是宽和高）时，图表后面的内容会被tooltip的div遮盖，导致input等元素无法点击、无法输入内容。</p>\n</li>\n<li><p>原因：</p>\n<p>  图表初始化时会在TooltipContent方法中创建一个空的div元素作为tooltip，不带样式，而包含该div的父级div的position被设置为relative。当页面中为div元素设置全局的宽和高时，tooltip的div就会遮盖后面的元素。</p>\n</li>\n<li><p>解决：</p>\n<p>  修改源码，在TooltipContent方法中，tooltip的div被创建后，为其添加 <code>display: none</code> 样式。即：</p>\n  <figure class=\"highlight javascript\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div></pre></td><td class=\"code\"><pre><div class=\"line\"><span class=\"keyword\">var</span> el = <span class=\"built_in\">document</span>.createElement(<span class=\"string\">'div'</span>);</div><div class=\"line\">el.style.display = <span class=\"string\">\"none\"</span>;</div></pre></td></tr></table></figure>\n<p>  由于tooltip所在的div的style（主要是display属性）在显示时会动态改变，所以这样修改不会影响之后tooltip的显示。</p>\n</li>\n</ul>\n</li>\n</ol>\n","excerpt":"","more":"<h1 id=\"记录ECharts使用过程中遇到的一些问题\"><a href=\"#记录ECharts使用过程中遇到的一些问题\" class=\"headerlink\" title=\"记录ECharts使用过程中遇到的一些问题\"></a>记录ECharts使用过程中遇到的一些问题</h1><ol>\n<li><p>页面内容被tooltip的div遮盖</p>\n<ul>\n<li><p>描述：</p>\n<p>  在页面中为div元素使用全局的style（主要是宽和高）时，图表后面的内容会被tooltip的div遮盖，导致input等元素无法点击、无法输入内容。</p>\n</li>\n<li><p>原因：</p>\n<p>  图表初始化时会在TooltipContent方法中创建一个空的div元素作为tooltip，不带样式，而包含该div的父级div的position被设置为relative。当页面中为div元素设置全局的宽和高时，tooltip的div就会遮盖后面的元素。</p>\n</li>\n<li><p>解决：</p>\n<p>  修改源码，在TooltipContent方法中，tooltip的div被创建后，为其添加 <code>display: none</code> 样式。即：</p>\n  <figure class=\"highlight javascript\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div></pre></td><td class=\"code\"><pre><div class=\"line\"><span class=\"keyword\">var</span> el = <span class=\"built_in\">document</span>.createElement(<span class=\"string\">'div'</span>);</div><div class=\"line\">el.style.display = <span class=\"string\">\"none\"</span>;</div></pre></td></tr></table></figure>\n<p>  由于tooltip所在的div的style（主要是display属性）在显示时会动态改变，所以这样修改不会影响之后tooltip的显示。</p>\n</li>\n</ul>\n</li>\n</ol>\n"},{"layout":"post","title":"JavaScript中的求模和求余","description":"mod and rem in javascript","date":"2016-06-06T16:00:00.000Z","_content":"\n# 求模与求余\n\n求模和求余其实是两种不同的运算。当两个操作数同号时，它们的运算结果相同；而当两个操作数异号时，它们的运算结果就不同了。\n\n求模与求余运算都分两步进行：\n\n1. 求整数商：c = a/b;\n1. 求值: r = a - c*b;\n\n求模和求余的差别在第一步：\n\n- 求模是向负无穷的方向舍弃小数位（(-1)/3 = -1）\n- 求余是向0的方向舍弃小数位（(-1)/3 = 0）\n\n# JavaScript中的求余\n\nJavaScript中的 `%` 运算符其实是求余运算，即：\n\n```javascript\nconsole.log((-13) % 64);\n```\n\n结果是-13。\n\n# JavaScript中的求模\n\nJavaScript中的求模运算可以采用以下方法实现：\n\n```javascript\nNumber.prototype.mod = function (n)\n{\n    return ((this % n) + n) % n;\n}\n```\n\n此时，用：\n\n```javascript\nconsole.log((-13).mod(64));\n```\n\n结果是51。","source":"_posts/mod-and-rem-in-javascript.md","raw":"---\nlayout: post\ntitle: \"JavaScript中的求模和求余\"\ndescription: \"mod and rem in javascript\"\ncategory: JavaScript\ntags: [javascript,math]\ndate: 2016-06-07\n---\n\n# 求模与求余\n\n求模和求余其实是两种不同的运算。当两个操作数同号时，它们的运算结果相同；而当两个操作数异号时，它们的运算结果就不同了。\n\n求模与求余运算都分两步进行：\n\n1. 求整数商：c = a/b;\n1. 求值: r = a - c*b;\n\n求模和求余的差别在第一步：\n\n- 求模是向负无穷的方向舍弃小数位（(-1)/3 = -1）\n- 求余是向0的方向舍弃小数位（(-1)/3 = 0）\n\n# JavaScript中的求余\n\nJavaScript中的 `%` 运算符其实是求余运算，即：\n\n```javascript\nconsole.log((-13) % 64);\n```\n\n结果是-13。\n\n# JavaScript中的求模\n\nJavaScript中的求模运算可以采用以下方法实现：\n\n```javascript\nNumber.prototype.mod = function (n)\n{\n    return ((this % n) + n) % n;\n}\n```\n\n此时，用：\n\n```javascript\nconsole.log((-13).mod(64));\n```\n\n结果是51。","slug":"mod-and-rem-in-javascript","published":1,"updated":"2017-02-08T05:31:30.000Z","comments":1,"photos":[],"link":"","_id":"cj5qp2xap0009qo89rd82ft6v","content":"<h1 id=\"求模与求余\"><a href=\"#求模与求余\" class=\"headerlink\" title=\"求模与求余\"></a>求模与求余</h1><p>求模和求余其实是两种不同的运算。当两个操作数同号时，它们的运算结果相同；而当两个操作数异号时，它们的运算结果就不同了。</p>\n<p>求模与求余运算都分两步进行：</p>\n<ol>\n<li>求整数商：c = a/b;</li>\n<li>求值: r = a - c*b;</li>\n</ol>\n<p>求模和求余的差别在第一步：</p>\n<ul>\n<li>求模是向负无穷的方向舍弃小数位（(-1)/3 = -1）</li>\n<li>求余是向0的方向舍弃小数位（(-1)/3 = 0）</li>\n</ul>\n<h1 id=\"JavaScript中的求余\"><a href=\"#JavaScript中的求余\" class=\"headerlink\" title=\"JavaScript中的求余\"></a>JavaScript中的求余</h1><p>JavaScript中的 <code>%</code> 运算符其实是求余运算，即：</p>\n<figure class=\"highlight javascript\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div></pre></td><td class=\"code\"><pre><div class=\"line\"><span class=\"built_in\">console</span>.log((<span class=\"number\">-13</span>) % <span class=\"number\">64</span>);</div></pre></td></tr></table></figure>\n<p>结果是-13。</p>\n<h1 id=\"JavaScript中的求模\"><a href=\"#JavaScript中的求模\" class=\"headerlink\" title=\"JavaScript中的求模\"></a>JavaScript中的求模</h1><p>JavaScript中的求模运算可以采用以下方法实现：</p>\n<figure class=\"highlight javascript\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div></pre></td><td class=\"code\"><pre><div class=\"line\"><span class=\"built_in\">Number</span>.prototype.mod = <span class=\"function\"><span class=\"keyword\">function</span> (<span class=\"params\">n</span>)</span></div><div class=\"line\">&#123;</div><div class=\"line\">    <span class=\"keyword\">return</span> ((<span class=\"keyword\">this</span> % n) + n) % n;</div><div class=\"line\">&#125;</div></pre></td></tr></table></figure>\n<p>此时，用：</p>\n<figure class=\"highlight javascript\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div></pre></td><td class=\"code\"><pre><div class=\"line\"><span class=\"built_in\">console</span>.log((<span class=\"number\">-13</span>).mod(<span class=\"number\">64</span>));</div></pre></td></tr></table></figure>\n<p>结果是51。</p>\n","excerpt":"","more":"<h1 id=\"求模与求余\"><a href=\"#求模与求余\" class=\"headerlink\" title=\"求模与求余\"></a>求模与求余</h1><p>求模和求余其实是两种不同的运算。当两个操作数同号时，它们的运算结果相同；而当两个操作数异号时，它们的运算结果就不同了。</p>\n<p>求模与求余运算都分两步进行：</p>\n<ol>\n<li>求整数商：c = a/b;</li>\n<li>求值: r = a - c*b;</li>\n</ol>\n<p>求模和求余的差别在第一步：</p>\n<ul>\n<li>求模是向负无穷的方向舍弃小数位（(-1)/3 = -1）</li>\n<li>求余是向0的方向舍弃小数位（(-1)/3 = 0）</li>\n</ul>\n<h1 id=\"JavaScript中的求余\"><a href=\"#JavaScript中的求余\" class=\"headerlink\" title=\"JavaScript中的求余\"></a>JavaScript中的求余</h1><p>JavaScript中的 <code>%</code> 运算符其实是求余运算，即：</p>\n<figure class=\"highlight javascript\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div></pre></td><td class=\"code\"><pre><div class=\"line\"><span class=\"built_in\">console</span>.log((<span class=\"number\">-13</span>) % <span class=\"number\">64</span>);</div></pre></td></tr></table></figure>\n<p>结果是-13。</p>\n<h1 id=\"JavaScript中的求模\"><a href=\"#JavaScript中的求模\" class=\"headerlink\" title=\"JavaScript中的求模\"></a>JavaScript中的求模</h1><p>JavaScript中的求模运算可以采用以下方法实现：</p>\n<figure class=\"highlight javascript\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div></pre></td><td class=\"code\"><pre><div class=\"line\"><span class=\"built_in\">Number</span>.prototype.mod = <span class=\"function\"><span class=\"keyword\">function</span> (<span class=\"params\">n</span>)</div><div class=\"line\"></span>&#123;</div><div class=\"line\">    <span class=\"keyword\">return</span> ((<span class=\"keyword\">this</span> % n) + n) % n;</div><div class=\"line\">&#125;</div></pre></td></tr></table></figure>\n<p>此时，用：</p>\n<figure class=\"highlight javascript\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div></pre></td><td class=\"code\"><pre><div class=\"line\"><span class=\"built_in\">console</span>.log((<span class=\"number\">-13</span>).mod(<span class=\"number\">64</span>));</div></pre></td></tr></table></figure>\n<p>结果是51。</p>\n"},{"layout":"post","title":"JSONP与跨域问题","description":"jsonp and cross domain","date":"2016-03-31T16:00:00.000Z","_content":"\n## 跨域问题\n\n**跨域问题**是由于浏览器的**同源策略**而产生的，同源是指**同协议**、**同域名**、**同端口**，出于安全的考虑，浏览器禁止脚本的跨域（不同源）请求。\n\n虽然浏览器禁止跨域请求，但是却允许引用和执行来自其他域的脚本文件，这也就是下面将要提到的 JSONP 的原理。\n\n\n## JSONP\n\nJSONP（JSON with Padding） 是一种动态加载js的技术，即使用javascript脚本动态加载`<script>`标签，从而使得网页可以跨域获取数据。该方法需要服务器端进行配合，动态生成javascript脚本，javascript脚本中包含网页所需的数据。\n\n假设 `www.bbbbb.com.cn` 域名下有一网页需要请求 `www.aaaaa.com.cn` 域名下的数据，利用JSONP实现跨域请求的步骤如下：\n\n1.  `www.bbbbb.com.cn` 域名下的网页中定义一个加载跨域脚本的javascript函数，即一个能够动态生成 `<script>` 标签的函数，该 `<script>` 标签的 `src` 指向服务器端程序（ `www.aaaaa.com.cn` ）所在的URL，并且URL后应附加一个 `callback` 参数，以便服务器端能够动态生成以 `callback` 为名的javascript函数：\n\n    ```javascript\n    var remoteUrl = \"http://www.aaaaa.com.cn/test/jsonpTest.php?callback=\";\n    function getDataFromRemote(callback) \n    {\n        var remoteDataUrl = remoteUrl + callback;\n        var script = document.createElement(\"script\");\n        script.setAttribute(\"src\", remoteDataUrl);\n        document.getElementsByTagName(\"head\")[0].appendChild(script);\n    } \n    ```\n\n2.  服务器端收到请求后，根据 `callback` 参数动态生成一段javascript脚本，该脚本调用 `callback` 函数并向其传递网页所需的数据：\n\n    ```php\n    <?php\n    if(isset($_GET[\"callback\"]))\n    {\n        $json_data = json_encode([\"data\"=> \"Hello World\"]);\n        echo $_GET[\"callback\"].\"({$json_data});\";\n    }\n    ?>\n    ```\n\n3.  网页端定义名为 `callback` 的函数，用于接收、处理服务器端传来的数据：\n\n    ```javascript\n    function testCallback(jsonData) \n    {\n        alert(jsonData[\"data\"]);\n    }\n    getDataFromRemote('testCallback');\n    ```\n\n## jQuery示例\n\njQuery 中的 `ajax` 方法支持 JSONP 类型的请求，只需将 `dataType` 设置为 `jsonp` 即可，示例如下：\n\n```javascript\n<script type=\"text/javascript\" src=\"//cdn.bootcss.com/jquery/2.2.1/jquery.min.js\"></script>\n<script type=\"text/javascript\">\n    function getDataFromRemoteAjax()\n    {\n        $.ajax({\n            type: \"get\",\n            async: true,\n            url: \"http://www.aaaaa.com.cn/test/jsonpTest.php\",\n            dataType: \"jsonp\",\n            jsonpCallback: \"testCallbackAjax\",\n            success: function (data) {\n                alert(data[\"data\"]);\n            },\n            error: function (err) {\n                alert(\"error\");\n            }\n        });\n    }\n</script>\n```\n\n服务器端的代码与上例的相同。\n","source":"_posts/jsonp-and-cross-domain.md","raw":"---\nlayout: post\ntitle: \"JSONP与跨域问题\"\ndescription: \"jsonp and cross domain\"\ncategory: JavaScript\ntags: [javascript, jsonp, cross-domain]\ndate: 2016-04-01\n---\n\n## 跨域问题\n\n**跨域问题**是由于浏览器的**同源策略**而产生的，同源是指**同协议**、**同域名**、**同端口**，出于安全的考虑，浏览器禁止脚本的跨域（不同源）请求。\n\n虽然浏览器禁止跨域请求，但是却允许引用和执行来自其他域的脚本文件，这也就是下面将要提到的 JSONP 的原理。\n\n\n## JSONP\n\nJSONP（JSON with Padding） 是一种动态加载js的技术，即使用javascript脚本动态加载`<script>`标签，从而使得网页可以跨域获取数据。该方法需要服务器端进行配合，动态生成javascript脚本，javascript脚本中包含网页所需的数据。\n\n假设 `www.bbbbb.com.cn` 域名下有一网页需要请求 `www.aaaaa.com.cn` 域名下的数据，利用JSONP实现跨域请求的步骤如下：\n\n1.  `www.bbbbb.com.cn` 域名下的网页中定义一个加载跨域脚本的javascript函数，即一个能够动态生成 `<script>` 标签的函数，该 `<script>` 标签的 `src` 指向服务器端程序（ `www.aaaaa.com.cn` ）所在的URL，并且URL后应附加一个 `callback` 参数，以便服务器端能够动态生成以 `callback` 为名的javascript函数：\n\n    ```javascript\n    var remoteUrl = \"http://www.aaaaa.com.cn/test/jsonpTest.php?callback=\";\n    function getDataFromRemote(callback) \n    {\n        var remoteDataUrl = remoteUrl + callback;\n        var script = document.createElement(\"script\");\n        script.setAttribute(\"src\", remoteDataUrl);\n        document.getElementsByTagName(\"head\")[0].appendChild(script);\n    } \n    ```\n\n2.  服务器端收到请求后，根据 `callback` 参数动态生成一段javascript脚本，该脚本调用 `callback` 函数并向其传递网页所需的数据：\n\n    ```php\n    <?php\n    if(isset($_GET[\"callback\"]))\n    {\n        $json_data = json_encode([\"data\"=> \"Hello World\"]);\n        echo $_GET[\"callback\"].\"({$json_data});\";\n    }\n    ?>\n    ```\n\n3.  网页端定义名为 `callback` 的函数，用于接收、处理服务器端传来的数据：\n\n    ```javascript\n    function testCallback(jsonData) \n    {\n        alert(jsonData[\"data\"]);\n    }\n    getDataFromRemote('testCallback');\n    ```\n\n## jQuery示例\n\njQuery 中的 `ajax` 方法支持 JSONP 类型的请求，只需将 `dataType` 设置为 `jsonp` 即可，示例如下：\n\n```javascript\n<script type=\"text/javascript\" src=\"//cdn.bootcss.com/jquery/2.2.1/jquery.min.js\"></script>\n<script type=\"text/javascript\">\n    function getDataFromRemoteAjax()\n    {\n        $.ajax({\n            type: \"get\",\n            async: true,\n            url: \"http://www.aaaaa.com.cn/test/jsonpTest.php\",\n            dataType: \"jsonp\",\n            jsonpCallback: \"testCallbackAjax\",\n            success: function (data) {\n                alert(data[\"data\"]);\n            },\n            error: function (err) {\n                alert(\"error\");\n            }\n        });\n    }\n</script>\n```\n\n服务器端的代码与上例的相同。\n","slug":"jsonp-and-cross-domain","published":1,"updated":"2017-02-08T05:31:03.000Z","comments":1,"photos":[],"link":"","_id":"cj5qp2xas000cqo890v6zbc0w","content":"<h2 id=\"跨域问题\"><a href=\"#跨域问题\" class=\"headerlink\" title=\"跨域问题\"></a>跨域问题</h2><p><strong>跨域问题</strong>是由于浏览器的<strong>同源策略</strong>而产生的，同源是指<strong>同协议</strong>、<strong>同域名</strong>、<strong>同端口</strong>，出于安全的考虑，浏览器禁止脚本的跨域（不同源）请求。</p>\n<p>虽然浏览器禁止跨域请求，但是却允许引用和执行来自其他域的脚本文件，这也就是下面将要提到的 JSONP 的原理。</p>\n<h2 id=\"JSONP\"><a href=\"#JSONP\" class=\"headerlink\" title=\"JSONP\"></a>JSONP</h2><p>JSONP（JSON with Padding） 是一种动态加载js的技术，即使用javascript脚本动态加载<code>&lt;script&gt;</code>标签，从而使得网页可以跨域获取数据。该方法需要服务器端进行配合，动态生成javascript脚本，javascript脚本中包含网页所需的数据。</p>\n<p>假设 <code>www.bbbbb.com.cn</code> 域名下有一网页需要请求 <code>www.aaaaa.com.cn</code> 域名下的数据，利用JSONP实现跨域请求的步骤如下：</p>\n<ol>\n<li><p><code>www.bbbbb.com.cn</code> 域名下的网页中定义一个加载跨域脚本的javascript函数，即一个能够动态生成 <code>&lt;script&gt;</code> 标签的函数，该 <code>&lt;script&gt;</code> 标签的 <code>src</code> 指向服务器端程序（ <code>www.aaaaa.com.cn</code> ）所在的URL，并且URL后应附加一个 <code>callback</code> 参数，以便服务器端能够动态生成以 <code>callback</code> 为名的javascript函数：</p>\n<figure class=\"highlight javascript\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div><div class=\"line\">6</div><div class=\"line\">7</div><div class=\"line\">8</div></pre></td><td class=\"code\"><pre><div class=\"line\"><span class=\"keyword\">var</span> remoteUrl = <span class=\"string\">\"http://www.aaaaa.com.cn/test/jsonpTest.php?callback=\"</span>;</div><div class=\"line\"><span class=\"function\"><span class=\"keyword\">function</span> <span class=\"title\">getDataFromRemote</span>(<span class=\"params\">callback</span>) </span></div><div class=\"line\">&#123;</div><div class=\"line\">    <span class=\"keyword\">var</span> remoteDataUrl = remoteUrl + callback;</div><div class=\"line\">    <span class=\"keyword\">var</span> script = <span class=\"built_in\">document</span>.createElement(<span class=\"string\">\"script\"</span>);</div><div class=\"line\">    script.setAttribute(<span class=\"string\">\"src\"</span>, remoteDataUrl);</div><div class=\"line\">    <span class=\"built_in\">document</span>.getElementsByTagName(<span class=\"string\">\"head\"</span>)[<span class=\"number\">0</span>].appendChild(script);</div><div class=\"line\">&#125;</div></pre></td></tr></table></figure>\n</li>\n<li><p>服务器端收到请求后，根据 <code>callback</code> 参数动态生成一段javascript脚本，该脚本调用 <code>callback</code> 函数并向其传递网页所需的数据：</p>\n<figure class=\"highlight php\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div><div class=\"line\">6</div><div class=\"line\">7</div></pre></td><td class=\"code\"><pre><div class=\"line\"><span class=\"meta\">&lt;?php</span></div><div class=\"line\"><span class=\"keyword\">if</span>(<span class=\"keyword\">isset</span>($_GET[<span class=\"string\">\"callback\"</span>]))</div><div class=\"line\">&#123;</div><div class=\"line\">    $json_data = json_encode([<span class=\"string\">\"data\"</span>=&gt; <span class=\"string\">\"Hello World\"</span>]);</div><div class=\"line\">    <span class=\"keyword\">echo</span> $_GET[<span class=\"string\">\"callback\"</span>].<span class=\"string\">\"(&#123;$json_data&#125;);\"</span>;</div><div class=\"line\">&#125;</div><div class=\"line\"><span class=\"meta\">?&gt;</span></div></pre></td></tr></table></figure>\n</li>\n<li><p>网页端定义名为 <code>callback</code> 的函数，用于接收、处理服务器端传来的数据：</p>\n<figure class=\"highlight javascript\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div></pre></td><td class=\"code\"><pre><div class=\"line\"><span class=\"function\"><span class=\"keyword\">function</span> <span class=\"title\">testCallback</span>(<span class=\"params\">jsonData</span>) </span></div><div class=\"line\">&#123;</div><div class=\"line\">    alert(jsonData[<span class=\"string\">\"data\"</span>]);</div><div class=\"line\">&#125;</div><div class=\"line\">getDataFromRemote(<span class=\"string\">'testCallback'</span>);</div></pre></td></tr></table></figure>\n</li>\n</ol>\n<h2 id=\"jQuery示例\"><a href=\"#jQuery示例\" class=\"headerlink\" title=\"jQuery示例\"></a>jQuery示例</h2><p>jQuery 中的 <code>ajax</code> 方法支持 JSONP 类型的请求，只需将 <code>dataType</code> 设置为 <code>jsonp</code> 即可，示例如下：</p>\n<figure class=\"highlight javascript\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div><div class=\"line\">6</div><div class=\"line\">7</div><div class=\"line\">8</div><div class=\"line\">9</div><div class=\"line\">10</div><div class=\"line\">11</div><div class=\"line\">12</div><div class=\"line\">13</div><div class=\"line\">14</div><div class=\"line\">15</div><div class=\"line\">16</div><div class=\"line\">17</div><div class=\"line\">18</div><div class=\"line\">19</div></pre></td><td class=\"code\"><pre><div class=\"line\">&lt;script type=<span class=\"string\">\"text/javascript\"</span> src=<span class=\"string\">\"//cdn.bootcss.com/jquery/2.2.1/jquery.min.js\"</span>&gt;&lt;/script&gt;</div><div class=\"line\">&lt;script type=<span class=\"string\">\"text/javascript\"</span>&gt;</div><div class=\"line\">    <span class=\"function\"><span class=\"keyword\">function</span> <span class=\"title\">getDataFromRemoteAjax</span>(<span class=\"params\"></span>)</span></div><div class=\"line\">    &#123;</div><div class=\"line\">        $.ajax(&#123;</div><div class=\"line\">            <span class=\"attr\">type</span>: <span class=\"string\">\"get\"</span>,</div><div class=\"line\">            <span class=\"attr\">async</span>: <span class=\"literal\">true</span>,</div><div class=\"line\">            <span class=\"attr\">url</span>: <span class=\"string\">\"http://www.aaaaa.com.cn/test/jsonpTest.php\"</span>,</div><div class=\"line\">            <span class=\"attr\">dataType</span>: <span class=\"string\">\"jsonp\"</span>,</div><div class=\"line\">            <span class=\"attr\">jsonpCallback</span>: <span class=\"string\">\"testCallbackAjax\"</span>,</div><div class=\"line\">            <span class=\"attr\">success</span>: <span class=\"function\"><span class=\"keyword\">function</span> (<span class=\"params\">data</span>) </span>&#123;</div><div class=\"line\">                alert(data[<span class=\"string\">\"data\"</span>]);</div><div class=\"line\">            &#125;,</div><div class=\"line\">            <span class=\"attr\">error</span>: <span class=\"function\"><span class=\"keyword\">function</span> (<span class=\"params\">err</span>) </span>&#123;</div><div class=\"line\">                alert(<span class=\"string\">\"error\"</span>);</div><div class=\"line\">            &#125;</div><div class=\"line\">        &#125;);</div><div class=\"line\">    &#125;</div><div class=\"line\">&lt;<span class=\"regexp\">/script&gt;</span></div></pre></td></tr></table></figure>\n<p>服务器端的代码与上例的相同。</p>\n","excerpt":"","more":"<h2 id=\"跨域问题\"><a href=\"#跨域问题\" class=\"headerlink\" title=\"跨域问题\"></a>跨域问题</h2><p><strong>跨域问题</strong>是由于浏览器的<strong>同源策略</strong>而产生的，同源是指<strong>同协议</strong>、<strong>同域名</strong>、<strong>同端口</strong>，出于安全的考虑，浏览器禁止脚本的跨域（不同源）请求。</p>\n<p>虽然浏览器禁止跨域请求，但是却允许引用和执行来自其他域的脚本文件，这也就是下面将要提到的 JSONP 的原理。</p>\n<h2 id=\"JSONP\"><a href=\"#JSONP\" class=\"headerlink\" title=\"JSONP\"></a>JSONP</h2><p>JSONP（JSON with Padding） 是一种动态加载js的技术，即使用javascript脚本动态加载<code>&lt;script&gt;</code>标签，从而使得网页可以跨域获取数据。该方法需要服务器端进行配合，动态生成javascript脚本，javascript脚本中包含网页所需的数据。</p>\n<p>假设 <code>www.bbbbb.com.cn</code> 域名下有一网页需要请求 <code>www.aaaaa.com.cn</code> 域名下的数据，利用JSONP实现跨域请求的步骤如下：</p>\n<ol>\n<li><p><code>www.bbbbb.com.cn</code> 域名下的网页中定义一个加载跨域脚本的javascript函数，即一个能够动态生成 <code>&lt;script&gt;</code> 标签的函数，该 <code>&lt;script&gt;</code> 标签的 <code>src</code> 指向服务器端程序（ <code>www.aaaaa.com.cn</code> ）所在的URL，并且URL后应附加一个 <code>callback</code> 参数，以便服务器端能够动态生成以 <code>callback</code> 为名的javascript函数：</p>\n<figure class=\"highlight javascript\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div><div class=\"line\">6</div><div class=\"line\">7</div><div class=\"line\">8</div></pre></td><td class=\"code\"><pre><div class=\"line\"><span class=\"keyword\">var</span> remoteUrl = <span class=\"string\">\"http://www.aaaaa.com.cn/test/jsonpTest.php?callback=\"</span>;</div><div class=\"line\"><span class=\"function\"><span class=\"keyword\">function</span> <span class=\"title\">getDataFromRemote</span>(<span class=\"params\">callback</span>) </div><div class=\"line\"></span>&#123;</div><div class=\"line\">    <span class=\"keyword\">var</span> remoteDataUrl = remoteUrl + callback;</div><div class=\"line\">    <span class=\"keyword\">var</span> script = <span class=\"built_in\">document</span>.createElement(<span class=\"string\">\"script\"</span>);</div><div class=\"line\">    script.setAttribute(<span class=\"string\">\"src\"</span>, remoteDataUrl);</div><div class=\"line\">    <span class=\"built_in\">document</span>.getElementsByTagName(<span class=\"string\">\"head\"</span>)[<span class=\"number\">0</span>].appendChild(script);</div><div class=\"line\">&#125;</div></pre></td></tr></table></figure>\n</li>\n<li><p>服务器端收到请求后，根据 <code>callback</code> 参数动态生成一段javascript脚本，该脚本调用 <code>callback</code> 函数并向其传递网页所需的数据：</p>\n<figure class=\"highlight php\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div><div class=\"line\">6</div><div class=\"line\">7</div></pre></td><td class=\"code\"><pre><div class=\"line\"><span class=\"meta\">&lt;?php</span></div><div class=\"line\"><span class=\"keyword\">if</span>(<span class=\"keyword\">isset</span>($_GET[<span class=\"string\">\"callback\"</span>]))</div><div class=\"line\">&#123;</div><div class=\"line\">    $json_data = json_encode([<span class=\"string\">\"data\"</span>=&gt; <span class=\"string\">\"Hello World\"</span>]);</div><div class=\"line\">    <span class=\"keyword\">echo</span> $_GET[<span class=\"string\">\"callback\"</span>].<span class=\"string\">\"(&#123;$json_data&#125;);\"</span>;</div><div class=\"line\">&#125;</div><div class=\"line\"><span class=\"meta\">?&gt;</span></div></pre></td></tr></table></figure>\n</li>\n<li><p>网页端定义名为 <code>callback</code> 的函数，用于接收、处理服务器端传来的数据：</p>\n<figure class=\"highlight javascript\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div></pre></td><td class=\"code\"><pre><div class=\"line\"><span class=\"function\"><span class=\"keyword\">function</span> <span class=\"title\">testCallback</span>(<span class=\"params\">jsonData</span>) </div><div class=\"line\"></span>&#123;</div><div class=\"line\">    alert(jsonData[<span class=\"string\">\"data\"</span>]);</div><div class=\"line\">&#125;</div><div class=\"line\">getDataFromRemote(<span class=\"string\">'testCallback'</span>);</div></pre></td></tr></table></figure>\n</li>\n</ol>\n<h2 id=\"jQuery示例\"><a href=\"#jQuery示例\" class=\"headerlink\" title=\"jQuery示例\"></a>jQuery示例</h2><p>jQuery 中的 <code>ajax</code> 方法支持 JSONP 类型的请求，只需将 <code>dataType</code> 设置为 <code>jsonp</code> 即可，示例如下：</p>\n<figure class=\"highlight javascript\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div><div class=\"line\">6</div><div class=\"line\">7</div><div class=\"line\">8</div><div class=\"line\">9</div><div class=\"line\">10</div><div class=\"line\">11</div><div class=\"line\">12</div><div class=\"line\">13</div><div class=\"line\">14</div><div class=\"line\">15</div><div class=\"line\">16</div><div class=\"line\">17</div><div class=\"line\">18</div><div class=\"line\">19</div></pre></td><td class=\"code\"><pre><div class=\"line\">&lt;script type=<span class=\"string\">\"text/javascript\"</span> src=<span class=\"string\">\"//cdn.bootcss.com/jquery/2.2.1/jquery.min.js\"</span>&gt;&lt;/script&gt;</div><div class=\"line\">&lt;script type=<span class=\"string\">\"text/javascript\"</span>&gt;</div><div class=\"line\">    <span class=\"function\"><span class=\"keyword\">function</span> <span class=\"title\">getDataFromRemoteAjax</span>(<span class=\"params\"></span>)</div><div class=\"line\">    </span>&#123;</div><div class=\"line\">        $.ajax(&#123;</div><div class=\"line\">            <span class=\"attr\">type</span>: <span class=\"string\">\"get\"</span>,</div><div class=\"line\">            <span class=\"attr\">async</span>: <span class=\"literal\">true</span>,</div><div class=\"line\">            <span class=\"attr\">url</span>: <span class=\"string\">\"http://www.aaaaa.com.cn/test/jsonpTest.php\"</span>,</div><div class=\"line\">            <span class=\"attr\">dataType</span>: <span class=\"string\">\"jsonp\"</span>,</div><div class=\"line\">            <span class=\"attr\">jsonpCallback</span>: <span class=\"string\">\"testCallbackAjax\"</span>,</div><div class=\"line\">            <span class=\"attr\">success</span>: <span class=\"function\"><span class=\"keyword\">function</span> (<span class=\"params\">data</span>) </span>&#123;</div><div class=\"line\">                alert(data[<span class=\"string\">\"data\"</span>]);</div><div class=\"line\">            &#125;,</div><div class=\"line\">            <span class=\"attr\">error</span>: <span class=\"function\"><span class=\"keyword\">function</span> (<span class=\"params\">err</span>) </span>&#123;</div><div class=\"line\">                alert(<span class=\"string\">\"error\"</span>);</div><div class=\"line\">            &#125;</div><div class=\"line\">        &#125;);</div><div class=\"line\">    &#125;</div><div class=\"line\">&lt;<span class=\"regexp\">/script&gt;</span></div></pre></td></tr></table></figure>\n<p>服务器端的代码与上例的相同。</p>\n"},{"layout":"post","title":"用JavaScript获取URL参数的方法","description":"","date":"2016-03-26T16:00:00.000Z","_content":"\nJavaScript中通过正则表达式获取URL参数的方法：\n\n```javascript\nfunction getQueryString(name) \n{\n    var reg = new RegExp(\"(^|&)\" + name + \"=([^&]*)(&|$)\", \"i\");\n    var r = location.search.substr(1).match(reg);\n    if (r != null) return decodeURI(r[2]);\n    return null;\n}\n```\n\n- r[2]是分组2的内容，即([^&]*)所匹配的内容（r[0]是整个正则表达式所匹配的内容）\n- 正则表达式后边的“i”表示忽略大小写","source":"_posts/javascript-get-url-search-params.md","raw":"---\nlayout: post\ntitle: \"用JavaScript获取URL参数的方法\"\ndescription: \"\"\ncategory: JavaScript\ntags: [javascript, regex]\ndate: 2016-03-27\n---\n\nJavaScript中通过正则表达式获取URL参数的方法：\n\n```javascript\nfunction getQueryString(name) \n{\n    var reg = new RegExp(\"(^|&)\" + name + \"=([^&]*)(&|$)\", \"i\");\n    var r = location.search.substr(1).match(reg);\n    if (r != null) return decodeURI(r[2]);\n    return null;\n}\n```\n\n- r[2]是分组2的内容，即([^&]*)所匹配的内容（r[0]是整个正则表达式所匹配的内容）\n- 正则表达式后边的“i”表示忽略大小写","slug":"javascript-get-url-search-params","published":1,"updated":"2017-02-08T05:30:13.000Z","comments":1,"photos":[],"link":"","_id":"cj5qp2xau000eqo8941w8nli2","content":"<p>JavaScript中通过正则表达式获取URL参数的方法：</p>\n<figure class=\"highlight javascript\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div><div class=\"line\">6</div><div class=\"line\">7</div></pre></td><td class=\"code\"><pre><div class=\"line\"><span class=\"function\"><span class=\"keyword\">function</span> <span class=\"title\">getQueryString</span>(<span class=\"params\">name</span>) </span></div><div class=\"line\">&#123;</div><div class=\"line\">    <span class=\"keyword\">var</span> reg = <span class=\"keyword\">new</span> <span class=\"built_in\">RegExp</span>(<span class=\"string\">\"(^|&amp;)\"</span> + name + <span class=\"string\">\"=([^&amp;]*)(&amp;|$)\"</span>, <span class=\"string\">\"i\"</span>);</div><div class=\"line\">    <span class=\"keyword\">var</span> r = location.search.substr(<span class=\"number\">1</span>).match(reg);</div><div class=\"line\">    <span class=\"keyword\">if</span> (r != <span class=\"literal\">null</span>) <span class=\"keyword\">return</span> <span class=\"built_in\">decodeURI</span>(r[<span class=\"number\">2</span>]);</div><div class=\"line\">    <span class=\"keyword\">return</span> <span class=\"literal\">null</span>;</div><div class=\"line\">&#125;</div></pre></td></tr></table></figure>\n<ul>\n<li>r[2]是分组2的内容，即([^&amp;]*)所匹配的内容（r[0]是整个正则表达式所匹配的内容）</li>\n<li>正则表达式后边的“i”表示忽略大小写</li>\n</ul>\n","excerpt":"","more":"<p>JavaScript中通过正则表达式获取URL参数的方法：</p>\n<figure class=\"highlight javascript\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div><div class=\"line\">6</div><div class=\"line\">7</div></pre></td><td class=\"code\"><pre><div class=\"line\"><span class=\"function\"><span class=\"keyword\">function</span> <span class=\"title\">getQueryString</span>(<span class=\"params\">name</span>) </div><div class=\"line\"></span>&#123;</div><div class=\"line\">    <span class=\"keyword\">var</span> reg = <span class=\"keyword\">new</span> <span class=\"built_in\">RegExp</span>(<span class=\"string\">\"(^|&amp;)\"</span> + name + <span class=\"string\">\"=([^&amp;]*)(&amp;|$)\"</span>, <span class=\"string\">\"i\"</span>);</div><div class=\"line\">    <span class=\"keyword\">var</span> r = location.search.substr(<span class=\"number\">1</span>).match(reg);</div><div class=\"line\">    <span class=\"keyword\">if</span> (r != <span class=\"literal\">null</span>) <span class=\"keyword\">return</span> <span class=\"built_in\">decodeURI</span>(r[<span class=\"number\">2</span>]);</div><div class=\"line\">    <span class=\"keyword\">return</span> <span class=\"literal\">null</span>;</div><div class=\"line\">&#125;</div></pre></td></tr></table></figure>\n<ul>\n<li>r[2]是分组2的内容，即([^&amp;]*)所匹配的内容（r[0]是整个正则表达式所匹配的内容）</li>\n<li>正则表达式后边的“i”表示忽略大小写</li>\n</ul>\n"},{"layout":"post","title":"在windows环境下用GitStack搭建git server的方法","description":"GitStack on windows","date":"2016-03-27T16:00:00.000Z","_content":"\n在Windows环境下用GitStack搭建git server的方法：\n\n- 安装/配置GitStack\n\n    GitStack下载地址：[GitStack](http://gitstack.com/download/)\n\n    在服务器下载安装GitStack，安装完成后，可在 *Admin* 页面的 *Setting* 中配置 *Server Ports* 和 *Repositories Location* ，然后在 *Security* 中选择 *Communication protocols* 为 *Accept http and https* 。\n\n- 添加User\n\n    在 *Admin* 页面的 *Users & Groups* 中添加User。\n\n- 添加Repository\n\n    在 *Admin* 页面的 *Repository* 中新建Repository，并添加刚才创建的User。\n\n- 远程clone\n\n    在自己的机器上clone刚才添加的Repository：\n    \n    `git clone https://name:password@your_server_domain:port/your_repository.git`\n\n- 远程push\n\n    在自己的机器上添加文件，并push到服务器：\n    \n```bash\ngit add --all .\ngit commit -m \"init\"\ngit push origin master\n```\n\n- 服务器本地clone\n\n    服务器上，在你想要部署代码的位置进行clone：\n    \n    `git clone https://name:password@localhost:port/your_repository.git`\n\n- 配置Hook\n\n    服务器上，找到你Repository所在位置，打开hooks文件夹添加名为 *post-receive* 的文件，文件内容例如：\n    \n```bash\n#!/bin/sh\nunset GIT_DIR\nDeployPath=path_to_your_deploy_folder\n\ncd $DeployPath\ngit pull origin master\n```\n\n- **修改GitStack服务的登录方式**\n\n    在服务中找到 *GitStack* ，右键 属性 打开登录选项卡，将登录身份由 *本地系统账户* 改为  *Administrator* ，重启 *GitStack* 服务。\n\n完成以上的步骤，下次从自己的机器push到服务器时，就可以实现自动部署。","source":"_posts/git-stack-on-windows.md","raw":"---\nlayout: post\ntitle: \"在windows环境下用GitStack搭建git server的方法\"\ndescription: \"GitStack on windows\"\ncategory: Git\ntags: [git, server, windows]\ndate: 2016-03-28\n---\n\n在Windows环境下用GitStack搭建git server的方法：\n\n- 安装/配置GitStack\n\n    GitStack下载地址：[GitStack](http://gitstack.com/download/)\n\n    在服务器下载安装GitStack，安装完成后，可在 *Admin* 页面的 *Setting* 中配置 *Server Ports* 和 *Repositories Location* ，然后在 *Security* 中选择 *Communication protocols* 为 *Accept http and https* 。\n\n- 添加User\n\n    在 *Admin* 页面的 *Users & Groups* 中添加User。\n\n- 添加Repository\n\n    在 *Admin* 页面的 *Repository* 中新建Repository，并添加刚才创建的User。\n\n- 远程clone\n\n    在自己的机器上clone刚才添加的Repository：\n    \n    `git clone https://name:password@your_server_domain:port/your_repository.git`\n\n- 远程push\n\n    在自己的机器上添加文件，并push到服务器：\n    \n```bash\ngit add --all .\ngit commit -m \"init\"\ngit push origin master\n```\n\n- 服务器本地clone\n\n    服务器上，在你想要部署代码的位置进行clone：\n    \n    `git clone https://name:password@localhost:port/your_repository.git`\n\n- 配置Hook\n\n    服务器上，找到你Repository所在位置，打开hooks文件夹添加名为 *post-receive* 的文件，文件内容例如：\n    \n```bash\n#!/bin/sh\nunset GIT_DIR\nDeployPath=path_to_your_deploy_folder\n\ncd $DeployPath\ngit pull origin master\n```\n\n- **修改GitStack服务的登录方式**\n\n    在服务中找到 *GitStack* ，右键 属性 打开登录选项卡，将登录身份由 *本地系统账户* 改为  *Administrator* ，重启 *GitStack* 服务。\n\n完成以上的步骤，下次从自己的机器push到服务器时，就可以实现自动部署。","slug":"git-stack-on-windows","published":1,"updated":"2017-07-30T04:41:39.707Z","comments":1,"photos":[],"link":"","_id":"cj5qp2xaw000hqo89k7dnxb0r","content":"<p>在Windows环境下用GitStack搭建git server的方法：</p>\n<ul>\n<li><p>安装/配置GitStack</p>\n<p>  GitStack下载地址：<a href=\"http://gitstack.com/download/\" target=\"_blank\" rel=\"external\">GitStack</a></p>\n<p>  在服务器下载安装GitStack，安装完成后，可在 <em>Admin</em> 页面的 <em>Setting</em> 中配置 <em>Server Ports</em> 和 <em>Repositories Location</em> ，然后在 <em>Security</em> 中选择 <em>Communication protocols</em> 为 <em>Accept http and https</em> 。</p>\n</li>\n<li><p>添加User</p>\n<p>  在 <em>Admin</em> 页面的 <em>Users &amp; Groups</em> 中添加User。</p>\n</li>\n<li><p>添加Repository</p>\n<p>  在 <em>Admin</em> 页面的 <em>Repository</em> 中新建Repository，并添加刚才创建的User。</p>\n</li>\n<li><p>远程clone</p>\n<p>  在自己的机器上clone刚才添加的Repository：</p>\n<p>  <code>git clone https://name:password@your_server_domain:port/your_repository.git</code></p>\n</li>\n<li><p>远程push</p>\n<p>  在自己的机器上添加文件，并push到服务器：</p>\n</li>\n</ul>\n<figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div></pre></td><td class=\"code\"><pre><div class=\"line\">git add --all .</div><div class=\"line\">git commit -m <span class=\"string\">\"init\"</span></div><div class=\"line\">git push origin master</div></pre></td></tr></table></figure>\n<ul>\n<li><p>服务器本地clone</p>\n<p>  服务器上，在你想要部署代码的位置进行clone：</p>\n<p>  <code>git clone https://name:password@localhost:port/your_repository.git</code></p>\n</li>\n<li><p>配置Hook</p>\n<p>  服务器上，找到你Repository所在位置，打开hooks文件夹添加名为 <em>post-receive</em> 的文件，文件内容例如：</p>\n</li>\n</ul>\n<figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div><div class=\"line\">6</div></pre></td><td class=\"code\"><pre><div class=\"line\"><span class=\"meta\">#!/bin/sh</span></div><div class=\"line\"><span class=\"built_in\">unset</span> GIT_DIR</div><div class=\"line\">DeployPath=path_to_your_deploy_folder</div><div class=\"line\"></div><div class=\"line\"><span class=\"built_in\">cd</span> <span class=\"variable\">$DeployPath</span></div><div class=\"line\">git pull origin master</div></pre></td></tr></table></figure>\n<ul>\n<li><p><strong>修改GitStack服务的登录方式</strong></p>\n<p>  在服务中找到 <em>GitStack</em> ，右键 属性 打开登录选项卡，将登录身份由 <em>本地系统账户</em> 改为  <em>Administrator</em> ，重启 <em>GitStack</em> 服务。</p>\n</li>\n</ul>\n<p>完成以上的步骤，下次从自己的机器push到服务器时，就可以实现自动部署。</p>\n","excerpt":"","more":"<p>在Windows环境下用GitStack搭建git server的方法：</p>\n<ul>\n<li><p>安装/配置GitStack</p>\n<p>  GitStack下载地址：<a href=\"http://gitstack.com/download/\">GitStack</a></p>\n<p>  在服务器下载安装GitStack，安装完成后，可在 <em>Admin</em> 页面的 <em>Setting</em> 中配置 <em>Server Ports</em> 和 <em>Repositories Location</em> ，然后在 <em>Security</em> 中选择 <em>Communication protocols</em> 为 <em>Accept http and https</em> 。</p>\n</li>\n<li><p>添加User</p>\n<p>  在 <em>Admin</em> 页面的 <em>Users &amp; Groups</em> 中添加User。</p>\n</li>\n<li><p>添加Repository</p>\n<p>  在 <em>Admin</em> 页面的 <em>Repository</em> 中新建Repository，并添加刚才创建的User。</p>\n</li>\n<li><p>远程clone</p>\n<p>  在自己的机器上clone刚才添加的Repository：</p>\n<p>  <code>git clone https://name:password@your_server_domain:port/your_repository.git</code></p>\n</li>\n<li><p>远程push</p>\n<p>  在自己的机器上添加文件，并push到服务器：</p>\n</li>\n</ul>\n<figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div></pre></td><td class=\"code\"><pre><div class=\"line\">git add --all .</div><div class=\"line\">git commit -m <span class=\"string\">\"init\"</span></div><div class=\"line\">git push origin master</div></pre></td></tr></table></figure>\n<ul>\n<li><p>服务器本地clone</p>\n<p>  服务器上，在你想要部署代码的位置进行clone：</p>\n<p>  <code>git clone https://name:password@localhost:port/your_repository.git</code></p>\n</li>\n<li><p>配置Hook</p>\n<p>  服务器上，找到你Repository所在位置，打开hooks文件夹添加名为 <em>post-receive</em> 的文件，文件内容例如：</p>\n</li>\n</ul>\n<figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div><div class=\"line\">6</div></pre></td><td class=\"code\"><pre><div class=\"line\"><span class=\"meta\">#!/bin/sh</span></div><div class=\"line\"><span class=\"built_in\">unset</span> GIT_DIR</div><div class=\"line\">DeployPath=path_to_your_deploy_folder</div><div class=\"line\"></div><div class=\"line\"><span class=\"built_in\">cd</span> <span class=\"variable\">$DeployPath</span></div><div class=\"line\">git pull origin master</div></pre></td></tr></table></figure>\n<ul>\n<li><p><strong>修改GitStack服务的登录方式</strong></p>\n<p>  在服务中找到 <em>GitStack</em> ，右键 属性 打开登录选项卡，将登录身份由 <em>本地系统账户</em> 改为  <em>Administrator</em> ，重启 <em>GitStack</em> 服务。</p>\n</li>\n</ul>\n<p>完成以上的步骤，下次从自己的机器push到服务器时，就可以实现自动部署。</p>\n"},{"title":"使用TypeScript开发Node.js项目","date":"2017-03-16T05:42:05.000Z","description":"start-a-nodejs-project-with-typescript","_content":"# 使用TypeScript开发Node.js项目的主要步骤\n\n## 安装TypeScript\n\n- 全局安装TypeScript:\n\n    `npm install -g typescript`\n\n## 初始化node项目\n\n`npm init -y`\n\n## 安装 @types/node\n\n`npm install --save-dev @types/node`\n\n\n## 初始化并配置tsconfig文件\n\n- 初始化tsconfig.json:\n\n    `tsc --init`\n\n- 在tsconfig.json的`compilerOptions`中添加`typeRoots`配置：\n\n    ```json\n    {\n        \"compilerOptions\": {\n            ....\n            \"typeRoots\": [\n                \"./node_modules/@types\"\n            ]\n        }\n    }\n    ```\n\n## 安装依赖模块的TypeScript版本\n\n`npm install --save-dev @types/xxx`\n\n\n## 参考\n\n- [NodeJS QuickStart · TypeScript Deep Dive](https://basarat.gitbooks.io/typescript/docs/quick/nodejs.html)","source":"_posts/start-a-nodejs-project-with-typescript.md","raw":"---\ntitle: 使用TypeScript开发Node.js项目\ndate: 2017-03-16 13:42:05\ntags: [node.js, TypeScript]\ncategory: TypeScript\ndescription: start-a-nodejs-project-with-typescript\n---\n# 使用TypeScript开发Node.js项目的主要步骤\n\n## 安装TypeScript\n\n- 全局安装TypeScript:\n\n    `npm install -g typescript`\n\n## 初始化node项目\n\n`npm init -y`\n\n## 安装 @types/node\n\n`npm install --save-dev @types/node`\n\n\n## 初始化并配置tsconfig文件\n\n- 初始化tsconfig.json:\n\n    `tsc --init`\n\n- 在tsconfig.json的`compilerOptions`中添加`typeRoots`配置：\n\n    ```json\n    {\n        \"compilerOptions\": {\n            ....\n            \"typeRoots\": [\n                \"./node_modules/@types\"\n            ]\n        }\n    }\n    ```\n\n## 安装依赖模块的TypeScript版本\n\n`npm install --save-dev @types/xxx`\n\n\n## 参考\n\n- [NodeJS QuickStart · TypeScript Deep Dive](https://basarat.gitbooks.io/typescript/docs/quick/nodejs.html)","slug":"start-a-nodejs-project-with-typescript","published":1,"updated":"2017-03-16T06:23:21.000Z","comments":1,"layout":"post","photos":[],"link":"","_id":"cj5qp2xay000iqo89nt8rh3nz","content":"<h1 id=\"使用TypeScript开发Node-js项目的主要步骤\"><a href=\"#使用TypeScript开发Node-js项目的主要步骤\" class=\"headerlink\" title=\"使用TypeScript开发Node.js项目的主要步骤\"></a>使用TypeScript开发Node.js项目的主要步骤</h1><h2 id=\"安装TypeScript\"><a href=\"#安装TypeScript\" class=\"headerlink\" title=\"安装TypeScript\"></a>安装TypeScript</h2><ul>\n<li><p>全局安装TypeScript:</p>\n<p>  <code>npm install -g typescript</code></p>\n</li>\n</ul>\n<h2 id=\"初始化node项目\"><a href=\"#初始化node项目\" class=\"headerlink\" title=\"初始化node项目\"></a>初始化node项目</h2><p><code>npm init -y</code></p>\n<h2 id=\"安装-types-node\"><a href=\"#安装-types-node\" class=\"headerlink\" title=\"安装 @types/node\"></a>安装 @types/node</h2><p><code>npm install --save-dev @types/node</code></p>\n<h2 id=\"初始化并配置tsconfig文件\"><a href=\"#初始化并配置tsconfig文件\" class=\"headerlink\" title=\"初始化并配置tsconfig文件\"></a>初始化并配置tsconfig文件</h2><ul>\n<li><p>初始化tsconfig.json:</p>\n<p>  <code>tsc --init</code></p>\n</li>\n<li><p>在tsconfig.json的<code>compilerOptions</code>中添加<code>typeRoots</code>配置：</p>\n  <figure class=\"highlight\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div><div class=\"line\">6</div><div class=\"line\">7</div><div class=\"line\">8</div></pre></td><td class=\"code\"><pre><div class=\"line\">&#123;</div><div class=\"line\">    \"compilerOptions\": &#123;</div><div class=\"line\">        ....</div><div class=\"line\">        \"typeRoots\": [</div><div class=\"line\">            \"./node_modules/@types\"</div><div class=\"line\">        ]</div><div class=\"line\">    &#125;</div><div class=\"line\">&#125;</div></pre></td></tr></table></figure>\n</li>\n</ul>\n<h2 id=\"安装依赖模块的TypeScript版本\"><a href=\"#安装依赖模块的TypeScript版本\" class=\"headerlink\" title=\"安装依赖模块的TypeScript版本\"></a>安装依赖模块的TypeScript版本</h2><p><code>npm install --save-dev @types/xxx</code></p>\n<h2 id=\"参考\"><a href=\"#参考\" class=\"headerlink\" title=\"参考\"></a>参考</h2><ul>\n<li><a href=\"https://basarat.gitbooks.io/typescript/docs/quick/nodejs.html\" target=\"_blank\" rel=\"external\">NodeJS QuickStart · TypeScript Deep Dive</a></li>\n</ul>\n","excerpt":"","more":"<h1 id=\"使用TypeScript开发Node-js项目的主要步骤\"><a href=\"#使用TypeScript开发Node-js项目的主要步骤\" class=\"headerlink\" title=\"使用TypeScript开发Node.js项目的主要步骤\"></a>使用TypeScript开发Node.js项目的主要步骤</h1><h2 id=\"安装TypeScript\"><a href=\"#安装TypeScript\" class=\"headerlink\" title=\"安装TypeScript\"></a>安装TypeScript</h2><ul>\n<li><p>全局安装TypeScript:</p>\n<p>  <code>npm install -g typescript</code></p>\n</li>\n</ul>\n<h2 id=\"初始化node项目\"><a href=\"#初始化node项目\" class=\"headerlink\" title=\"初始化node项目\"></a>初始化node项目</h2><p><code>npm init -y</code></p>\n<h2 id=\"安装-types-node\"><a href=\"#安装-types-node\" class=\"headerlink\" title=\"安装 @types/node\"></a>安装 @types/node</h2><p><code>npm install --save-dev @types/node</code></p>\n<h2 id=\"初始化并配置tsconfig文件\"><a href=\"#初始化并配置tsconfig文件\" class=\"headerlink\" title=\"初始化并配置tsconfig文件\"></a>初始化并配置tsconfig文件</h2><ul>\n<li><p>初始化tsconfig.json:</p>\n<p>  <code>tsc --init</code></p>\n</li>\n<li><p>在tsconfig.json的<code>compilerOptions</code>中添加<code>typeRoots</code>配置：</p>\n  <figure class=\"highlight\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div><div class=\"line\">6</div><div class=\"line\">7</div><div class=\"line\">8</div></pre></td><td class=\"code\"><pre><div class=\"line\">&#123;</div><div class=\"line\">    \"compilerOptions\": &#123;</div><div class=\"line\">        ....</div><div class=\"line\">        \"typeRoots\": [</div><div class=\"line\">            \"./node_modules/@types\"</div><div class=\"line\">        ]</div><div class=\"line\">    &#125;</div><div class=\"line\">&#125;</div></pre></td></tr></table></figure>\n</li>\n</ul>\n<h2 id=\"安装依赖模块的TypeScript版本\"><a href=\"#安装依赖模块的TypeScript版本\" class=\"headerlink\" title=\"安装依赖模块的TypeScript版本\"></a>安装依赖模块的TypeScript版本</h2><p><code>npm install --save-dev @types/xxx</code></p>\n<h2 id=\"参考\"><a href=\"#参考\" class=\"headerlink\" title=\"参考\"></a>参考</h2><ul>\n<li><a href=\"https://basarat.gitbooks.io/typescript/docs/quick/nodejs.html\">NodeJS QuickStart · TypeScript Deep Dive</a></li>\n</ul>\n"},{"layout":"post","title":"微信公众平台自定义菜单配置工具的实现","description":"wechat button manage","date":"2015-12-08T16:00:00.000Z","_content":"\n由于JS脚本跨域访问的问题，无法通过jQuery的Ajax方法直接调用微信的API，故采用服务器端转发的方式与微信API交互。\n\n配置自定义菜单须先获取Access Token，前端JS代码如下：\n\n```javascript\nfunction getAccessToken()\n{\n    var appidParam = $(\"#appid\").val();\n    var secretParam = $(\"#secret\").val();\n    var date = new Date();\n    var url = \"get_access_token.php?appid=\"+appidParam+\"&secret=\"+secretParam+\"&time=\"+date.getTime();\n    $.get(url, function (data,status) {\n        var result = eval(\"(\"+data+\")\");\n        $(\"#info\").css(\"display\",\"block\");\n        if(typeof (result[\"errcode\"])!=\"undefined\")\n        {\n            var errorInfo = \"错误代码：\"+result[\"errcode\"]+\";错误信息：\"+result[\"errmsg\"];\n            $(\"#info\").html(errorInfo);\n            $(\"#changeBtn\").attr(\"disabled\",\"disabled\");\n        }\n        else\n        {\n            var successInfo = \"获取Access Token 成功：\" + result[\"access_token\"];\n            $(\"#accessToken\").val(result[\"access_token\"]);\n            $(\"#info\").html(successInfo);\n            $(\"#changeBtn\").removeAttr(\"disabled\");\n        }\n    })\n\n}\n\n```\n\n服务器端使用PHP的curl工具进行转发，代码如下\n\n```php\n$appid = $_GET[\"appid\"];\n$secret = $_GET[\"secret\"];\n$api_url = \"https://api.weixin.qq.com/cgi-bin/token?grant_type=client_credential&appid={$appid}&secret={$secret}\";\n$ch = curl_init();\ncurl_setopt($ch,CURLOPT_URL,$api_url);\ncurl_setopt($ch,CURLOPT_RETURNTRANSFER,1);\ncurl_setopt($ch, CURLOPT_SSL_VERIFYPEER, false);\ncurl_setopt($ch, CURLOPT_SSL_VERIFYHOST, false);\n$json_result = curl_exec($ch);\ncurl_close($ch);\necho $json_result;\n```\n\n利用获取到的 Access Token，下一步可以配置自定义菜单。目前还需要自己编写自定义菜单的JSON，以后有时间会加上可视化界面。通过POST方法向服务器提交JSON的JS代码如下：\n\n```javascript\nfunction changeButton()\n{\n    var url = \"button_manage.php?access_token=\"+$(\"#accessToken\").val();\n    var button_json = $(\"#buttonBody\").val();\n    $.post(url,{\"button_json\":button_json}, function (data,status) {\n        var result = eval(\"(\"+data+\")\");\n        if(result[\"errcode\"] == 0)\n        {\n            alert(\"配置成功\");\n        }\n        else\n        {\n            alert(\"配置失败，错误代码：\"+result[\"errcode\"]+\"错误信息：\"+result[\"errmsg\"]);\n        }\n    })\n}\n```\n\n服务器端的PHP代码如下：\n\n```php\n$access_token = $_GET[\"access_token\"];\n$api_url = \"https://api.weixin.qq.com/cgi-bin/menu/create?access_token={$access_token}\";\n$button_json = $_POST[\"button_json\"];\n$ch = curl_init();\ncurl_setopt($ch,CURLOPT_URL,$api_url);\ncurl_setopt($ch,CURLOPT_RETURNTRANSFER,1);\ncurl_setopt($ch, CURLOPT_SSL_VERIFYPEER, false);\ncurl_setopt($ch, CURLOPT_SSL_VERIFYHOST, false);\ncurl_setopt($ch, CURLOPT_POST, 1);\ncurl_setopt($ch, CURLOPT_POSTFIELDS, $button_json);\n$json_result = curl_exec($ch);\ncurl_close($ch);\necho $json_result;\n```\n\n实现效果可访问：\n\n[http://leo07.sinaapp.com/button_manage.html](http://leo07.sinaapp.com/button_manage.html)\n\n\n\n","source":"_posts/wechat-button-manage.md","raw":"---\nlayout: post\ntitle: \"微信公众平台自定义菜单配置工具的实现\"\ndescription: \"wechat button manage\"\ncategory: WeChat\ntags: [php, wechat, curl, tools]\ndate: 2015-12-09\n---\n\n由于JS脚本跨域访问的问题，无法通过jQuery的Ajax方法直接调用微信的API，故采用服务器端转发的方式与微信API交互。\n\n配置自定义菜单须先获取Access Token，前端JS代码如下：\n\n```javascript\nfunction getAccessToken()\n{\n    var appidParam = $(\"#appid\").val();\n    var secretParam = $(\"#secret\").val();\n    var date = new Date();\n    var url = \"get_access_token.php?appid=\"+appidParam+\"&secret=\"+secretParam+\"&time=\"+date.getTime();\n    $.get(url, function (data,status) {\n        var result = eval(\"(\"+data+\")\");\n        $(\"#info\").css(\"display\",\"block\");\n        if(typeof (result[\"errcode\"])!=\"undefined\")\n        {\n            var errorInfo = \"错误代码：\"+result[\"errcode\"]+\";错误信息：\"+result[\"errmsg\"];\n            $(\"#info\").html(errorInfo);\n            $(\"#changeBtn\").attr(\"disabled\",\"disabled\");\n        }\n        else\n        {\n            var successInfo = \"获取Access Token 成功：\" + result[\"access_token\"];\n            $(\"#accessToken\").val(result[\"access_token\"]);\n            $(\"#info\").html(successInfo);\n            $(\"#changeBtn\").removeAttr(\"disabled\");\n        }\n    })\n\n}\n\n```\n\n服务器端使用PHP的curl工具进行转发，代码如下\n\n```php\n$appid = $_GET[\"appid\"];\n$secret = $_GET[\"secret\"];\n$api_url = \"https://api.weixin.qq.com/cgi-bin/token?grant_type=client_credential&appid={$appid}&secret={$secret}\";\n$ch = curl_init();\ncurl_setopt($ch,CURLOPT_URL,$api_url);\ncurl_setopt($ch,CURLOPT_RETURNTRANSFER,1);\ncurl_setopt($ch, CURLOPT_SSL_VERIFYPEER, false);\ncurl_setopt($ch, CURLOPT_SSL_VERIFYHOST, false);\n$json_result = curl_exec($ch);\ncurl_close($ch);\necho $json_result;\n```\n\n利用获取到的 Access Token，下一步可以配置自定义菜单。目前还需要自己编写自定义菜单的JSON，以后有时间会加上可视化界面。通过POST方法向服务器提交JSON的JS代码如下：\n\n```javascript\nfunction changeButton()\n{\n    var url = \"button_manage.php?access_token=\"+$(\"#accessToken\").val();\n    var button_json = $(\"#buttonBody\").val();\n    $.post(url,{\"button_json\":button_json}, function (data,status) {\n        var result = eval(\"(\"+data+\")\");\n        if(result[\"errcode\"] == 0)\n        {\n            alert(\"配置成功\");\n        }\n        else\n        {\n            alert(\"配置失败，错误代码：\"+result[\"errcode\"]+\"错误信息：\"+result[\"errmsg\"]);\n        }\n    })\n}\n```\n\n服务器端的PHP代码如下：\n\n```php\n$access_token = $_GET[\"access_token\"];\n$api_url = \"https://api.weixin.qq.com/cgi-bin/menu/create?access_token={$access_token}\";\n$button_json = $_POST[\"button_json\"];\n$ch = curl_init();\ncurl_setopt($ch,CURLOPT_URL,$api_url);\ncurl_setopt($ch,CURLOPT_RETURNTRANSFER,1);\ncurl_setopt($ch, CURLOPT_SSL_VERIFYPEER, false);\ncurl_setopt($ch, CURLOPT_SSL_VERIFYHOST, false);\ncurl_setopt($ch, CURLOPT_POST, 1);\ncurl_setopt($ch, CURLOPT_POSTFIELDS, $button_json);\n$json_result = curl_exec($ch);\ncurl_close($ch);\necho $json_result;\n```\n\n实现效果可访问：\n\n[http://leo07.sinaapp.com/button_manage.html](http://leo07.sinaapp.com/button_manage.html)\n\n\n\n","slug":"wechat-button-manage","published":1,"updated":"2017-02-08T05:28:56.000Z","comments":1,"photos":[],"link":"","_id":"cj5qp2xb2000mqo89iovgj9xt","content":"<p>由于JS脚本跨域访问的问题，无法通过jQuery的Ajax方法直接调用微信的API，故采用服务器端转发的方式与微信API交互。</p>\n<p>配置自定义菜单须先获取Access Token，前端JS代码如下：</p>\n<figure class=\"highlight javascript\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div><div class=\"line\">6</div><div class=\"line\">7</div><div class=\"line\">8</div><div class=\"line\">9</div><div class=\"line\">10</div><div class=\"line\">11</div><div class=\"line\">12</div><div class=\"line\">13</div><div class=\"line\">14</div><div class=\"line\">15</div><div class=\"line\">16</div><div class=\"line\">17</div><div class=\"line\">18</div><div class=\"line\">19</div><div class=\"line\">20</div><div class=\"line\">21</div><div class=\"line\">22</div><div class=\"line\">23</div><div class=\"line\">24</div><div class=\"line\">25</div></pre></td><td class=\"code\"><pre><div class=\"line\"><span class=\"function\"><span class=\"keyword\">function</span> <span class=\"title\">getAccessToken</span>(<span class=\"params\"></span>)</span></div><div class=\"line\">&#123;</div><div class=\"line\">    <span class=\"keyword\">var</span> appidParam = $(<span class=\"string\">\"#appid\"</span>).val();</div><div class=\"line\">    <span class=\"keyword\">var</span> secretParam = $(<span class=\"string\">\"#secret\"</span>).val();</div><div class=\"line\">    <span class=\"keyword\">var</span> date = <span class=\"keyword\">new</span> <span class=\"built_in\">Date</span>();</div><div class=\"line\">    <span class=\"keyword\">var</span> url = <span class=\"string\">\"get_access_token.php?appid=\"</span>+appidParam+<span class=\"string\">\"&amp;secret=\"</span>+secretParam+<span class=\"string\">\"&amp;time=\"</span>+date.getTime();</div><div class=\"line\">    $.get(url, <span class=\"function\"><span class=\"keyword\">function</span> (<span class=\"params\">data,status</span>) </span>&#123;</div><div class=\"line\">        <span class=\"keyword\">var</span> result = <span class=\"built_in\">eval</span>(<span class=\"string\">\"(\"</span>+data+<span class=\"string\">\")\"</span>);</div><div class=\"line\">        $(<span class=\"string\">\"#info\"</span>).css(<span class=\"string\">\"display\"</span>,<span class=\"string\">\"block\"</span>);</div><div class=\"line\">        <span class=\"keyword\">if</span>(<span class=\"keyword\">typeof</span> (result[<span class=\"string\">\"errcode\"</span>])!=<span class=\"string\">\"undefined\"</span>)</div><div class=\"line\">        &#123;</div><div class=\"line\">            <span class=\"keyword\">var</span> errorInfo = <span class=\"string\">\"错误代码：\"</span>+result[<span class=\"string\">\"errcode\"</span>]+<span class=\"string\">\";错误信息：\"</span>+result[<span class=\"string\">\"errmsg\"</span>];</div><div class=\"line\">            $(<span class=\"string\">\"#info\"</span>).html(errorInfo);</div><div class=\"line\">            $(<span class=\"string\">\"#changeBtn\"</span>).attr(<span class=\"string\">\"disabled\"</span>,<span class=\"string\">\"disabled\"</span>);</div><div class=\"line\">        &#125;</div><div class=\"line\">        <span class=\"keyword\">else</span></div><div class=\"line\">        &#123;</div><div class=\"line\">            <span class=\"keyword\">var</span> successInfo = <span class=\"string\">\"获取Access Token 成功：\"</span> + result[<span class=\"string\">\"access_token\"</span>];</div><div class=\"line\">            $(<span class=\"string\">\"#accessToken\"</span>).val(result[<span class=\"string\">\"access_token\"</span>]);</div><div class=\"line\">            $(<span class=\"string\">\"#info\"</span>).html(successInfo);</div><div class=\"line\">            $(<span class=\"string\">\"#changeBtn\"</span>).removeAttr(<span class=\"string\">\"disabled\"</span>);</div><div class=\"line\">        &#125;</div><div class=\"line\">    &#125;)</div><div class=\"line\"></div><div class=\"line\">&#125;</div></pre></td></tr></table></figure>\n<p>服务器端使用PHP的curl工具进行转发，代码如下</p>\n<figure class=\"highlight php\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div><div class=\"line\">6</div><div class=\"line\">7</div><div class=\"line\">8</div><div class=\"line\">9</div><div class=\"line\">10</div><div class=\"line\">11</div></pre></td><td class=\"code\"><pre><div class=\"line\">$appid = $_GET[<span class=\"string\">\"appid\"</span>];</div><div class=\"line\">$secret = $_GET[<span class=\"string\">\"secret\"</span>];</div><div class=\"line\">$api_url = <span class=\"string\">\"https://api.weixin.qq.com/cgi-bin/token?grant_type=client_credential&amp;appid=&#123;$appid&#125;&amp;secret=&#123;$secret&#125;\"</span>;</div><div class=\"line\">$ch = curl_init();</div><div class=\"line\">curl_setopt($ch,CURLOPT_URL,$api_url);</div><div class=\"line\">curl_setopt($ch,CURLOPT_RETURNTRANSFER,<span class=\"number\">1</span>);</div><div class=\"line\">curl_setopt($ch, CURLOPT_SSL_VERIFYPEER, <span class=\"keyword\">false</span>);</div><div class=\"line\">curl_setopt($ch, CURLOPT_SSL_VERIFYHOST, <span class=\"keyword\">false</span>);</div><div class=\"line\">$json_result = curl_exec($ch);</div><div class=\"line\">curl_close($ch);</div><div class=\"line\"><span class=\"keyword\">echo</span> $json_result;</div></pre></td></tr></table></figure>\n<p>利用获取到的 Access Token，下一步可以配置自定义菜单。目前还需要自己编写自定义菜单的JSON，以后有时间会加上可视化界面。通过POST方法向服务器提交JSON的JS代码如下：</p>\n<figure class=\"highlight javascript\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div><div class=\"line\">6</div><div class=\"line\">7</div><div class=\"line\">8</div><div class=\"line\">9</div><div class=\"line\">10</div><div class=\"line\">11</div><div class=\"line\">12</div><div class=\"line\">13</div><div class=\"line\">14</div><div class=\"line\">15</div><div class=\"line\">16</div></pre></td><td class=\"code\"><pre><div class=\"line\"><span class=\"function\"><span class=\"keyword\">function</span> <span class=\"title\">changeButton</span>(<span class=\"params\"></span>)</span></div><div class=\"line\">&#123;</div><div class=\"line\">    <span class=\"keyword\">var</span> url = <span class=\"string\">\"button_manage.php?access_token=\"</span>+$(<span class=\"string\">\"#accessToken\"</span>).val();</div><div class=\"line\">    <span class=\"keyword\">var</span> button_json = $(<span class=\"string\">\"#buttonBody\"</span>).val();</div><div class=\"line\">    $.post(url,&#123;<span class=\"string\">\"button_json\"</span>:button_json&#125;, <span class=\"function\"><span class=\"keyword\">function</span> (<span class=\"params\">data,status</span>) </span>&#123;</div><div class=\"line\">        <span class=\"keyword\">var</span> result = <span class=\"built_in\">eval</span>(<span class=\"string\">\"(\"</span>+data+<span class=\"string\">\")\"</span>);</div><div class=\"line\">        <span class=\"keyword\">if</span>(result[<span class=\"string\">\"errcode\"</span>] == <span class=\"number\">0</span>)</div><div class=\"line\">        &#123;</div><div class=\"line\">            alert(<span class=\"string\">\"配置成功\"</span>);</div><div class=\"line\">        &#125;</div><div class=\"line\">        <span class=\"keyword\">else</span></div><div class=\"line\">        &#123;</div><div class=\"line\">            alert(<span class=\"string\">\"配置失败，错误代码：\"</span>+result[<span class=\"string\">\"errcode\"</span>]+<span class=\"string\">\"错误信息：\"</span>+result[<span class=\"string\">\"errmsg\"</span>]);</div><div class=\"line\">        &#125;</div><div class=\"line\">    &#125;)</div><div class=\"line\">&#125;</div></pre></td></tr></table></figure>\n<p>服务器端的PHP代码如下：</p>\n<figure class=\"highlight php\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div><div class=\"line\">6</div><div class=\"line\">7</div><div class=\"line\">8</div><div class=\"line\">9</div><div class=\"line\">10</div><div class=\"line\">11</div><div class=\"line\">12</div><div class=\"line\">13</div></pre></td><td class=\"code\"><pre><div class=\"line\">$access_token = $_GET[<span class=\"string\">\"access_token\"</span>];</div><div class=\"line\">$api_url = <span class=\"string\">\"https://api.weixin.qq.com/cgi-bin/menu/create?access_token=&#123;$access_token&#125;\"</span>;</div><div class=\"line\">$button_json = $_POST[<span class=\"string\">\"button_json\"</span>];</div><div class=\"line\">$ch = curl_init();</div><div class=\"line\">curl_setopt($ch,CURLOPT_URL,$api_url);</div><div class=\"line\">curl_setopt($ch,CURLOPT_RETURNTRANSFER,<span class=\"number\">1</span>);</div><div class=\"line\">curl_setopt($ch, CURLOPT_SSL_VERIFYPEER, <span class=\"keyword\">false</span>);</div><div class=\"line\">curl_setopt($ch, CURLOPT_SSL_VERIFYHOST, <span class=\"keyword\">false</span>);</div><div class=\"line\">curl_setopt($ch, CURLOPT_POST, <span class=\"number\">1</span>);</div><div class=\"line\">curl_setopt($ch, CURLOPT_POSTFIELDS, $button_json);</div><div class=\"line\">$json_result = curl_exec($ch);</div><div class=\"line\">curl_close($ch);</div><div class=\"line\"><span class=\"keyword\">echo</span> $json_result;</div></pre></td></tr></table></figure>\n<p>实现效果可访问：</p>\n<p><a href=\"http://leo07.sinaapp.com/button_manage.html\" target=\"_blank\" rel=\"external\">http://leo07.sinaapp.com/button_manage.html</a></p>\n","excerpt":"","more":"<p>由于JS脚本跨域访问的问题，无法通过jQuery的Ajax方法直接调用微信的API，故采用服务器端转发的方式与微信API交互。</p>\n<p>配置自定义菜单须先获取Access Token，前端JS代码如下：</p>\n<figure class=\"highlight javascript\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div><div class=\"line\">6</div><div class=\"line\">7</div><div class=\"line\">8</div><div class=\"line\">9</div><div class=\"line\">10</div><div class=\"line\">11</div><div class=\"line\">12</div><div class=\"line\">13</div><div class=\"line\">14</div><div class=\"line\">15</div><div class=\"line\">16</div><div class=\"line\">17</div><div class=\"line\">18</div><div class=\"line\">19</div><div class=\"line\">20</div><div class=\"line\">21</div><div class=\"line\">22</div><div class=\"line\">23</div><div class=\"line\">24</div><div class=\"line\">25</div></pre></td><td class=\"code\"><pre><div class=\"line\"><span class=\"function\"><span class=\"keyword\">function</span> <span class=\"title\">getAccessToken</span>(<span class=\"params\"></span>)</div><div class=\"line\"></span>&#123;</div><div class=\"line\">    <span class=\"keyword\">var</span> appidParam = $(<span class=\"string\">\"#appid\"</span>).val();</div><div class=\"line\">    <span class=\"keyword\">var</span> secretParam = $(<span class=\"string\">\"#secret\"</span>).val();</div><div class=\"line\">    <span class=\"keyword\">var</span> date = <span class=\"keyword\">new</span> <span class=\"built_in\">Date</span>();</div><div class=\"line\">    <span class=\"keyword\">var</span> url = <span class=\"string\">\"get_access_token.php?appid=\"</span>+appidParam+<span class=\"string\">\"&amp;secret=\"</span>+secretParam+<span class=\"string\">\"&amp;time=\"</span>+date.getTime();</div><div class=\"line\">    $.get(url, <span class=\"function\"><span class=\"keyword\">function</span> (<span class=\"params\">data,status</span>) </span>&#123;</div><div class=\"line\">        <span class=\"keyword\">var</span> result = <span class=\"built_in\">eval</span>(<span class=\"string\">\"(\"</span>+data+<span class=\"string\">\")\"</span>);</div><div class=\"line\">        $(<span class=\"string\">\"#info\"</span>).css(<span class=\"string\">\"display\"</span>,<span class=\"string\">\"block\"</span>);</div><div class=\"line\">        <span class=\"keyword\">if</span>(<span class=\"keyword\">typeof</span> (result[<span class=\"string\">\"errcode\"</span>])!=<span class=\"string\">\"undefined\"</span>)</div><div class=\"line\">        &#123;</div><div class=\"line\">            <span class=\"keyword\">var</span> errorInfo = <span class=\"string\">\"错误代码：\"</span>+result[<span class=\"string\">\"errcode\"</span>]+<span class=\"string\">\";错误信息：\"</span>+result[<span class=\"string\">\"errmsg\"</span>];</div><div class=\"line\">            $(<span class=\"string\">\"#info\"</span>).html(errorInfo);</div><div class=\"line\">            $(<span class=\"string\">\"#changeBtn\"</span>).attr(<span class=\"string\">\"disabled\"</span>,<span class=\"string\">\"disabled\"</span>);</div><div class=\"line\">        &#125;</div><div class=\"line\">        <span class=\"keyword\">else</span></div><div class=\"line\">        &#123;</div><div class=\"line\">            <span class=\"keyword\">var</span> successInfo = <span class=\"string\">\"获取Access Token 成功：\"</span> + result[<span class=\"string\">\"access_token\"</span>];</div><div class=\"line\">            $(<span class=\"string\">\"#accessToken\"</span>).val(result[<span class=\"string\">\"access_token\"</span>]);</div><div class=\"line\">            $(<span class=\"string\">\"#info\"</span>).html(successInfo);</div><div class=\"line\">            $(<span class=\"string\">\"#changeBtn\"</span>).removeAttr(<span class=\"string\">\"disabled\"</span>);</div><div class=\"line\">        &#125;</div><div class=\"line\">    &#125;)</div><div class=\"line\"></div><div class=\"line\">&#125;</div></pre></td></tr></table></figure>\n<p>服务器端使用PHP的curl工具进行转发，代码如下</p>\n<figure class=\"highlight php\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div><div class=\"line\">6</div><div class=\"line\">7</div><div class=\"line\">8</div><div class=\"line\">9</div><div class=\"line\">10</div><div class=\"line\">11</div></pre></td><td class=\"code\"><pre><div class=\"line\">$appid = $_GET[<span class=\"string\">\"appid\"</span>];</div><div class=\"line\">$secret = $_GET[<span class=\"string\">\"secret\"</span>];</div><div class=\"line\">$api_url = <span class=\"string\">\"https://api.weixin.qq.com/cgi-bin/token?grant_type=client_credential&amp;appid=&#123;$appid&#125;&amp;secret=&#123;$secret&#125;\"</span>;</div><div class=\"line\">$ch = curl_init();</div><div class=\"line\">curl_setopt($ch,CURLOPT_URL,$api_url);</div><div class=\"line\">curl_setopt($ch,CURLOPT_RETURNTRANSFER,<span class=\"number\">1</span>);</div><div class=\"line\">curl_setopt($ch, CURLOPT_SSL_VERIFYPEER, <span class=\"keyword\">false</span>);</div><div class=\"line\">curl_setopt($ch, CURLOPT_SSL_VERIFYHOST, <span class=\"keyword\">false</span>);</div><div class=\"line\">$json_result = curl_exec($ch);</div><div class=\"line\">curl_close($ch);</div><div class=\"line\"><span class=\"keyword\">echo</span> $json_result;</div></pre></td></tr></table></figure>\n<p>利用获取到的 Access Token，下一步可以配置自定义菜单。目前还需要自己编写自定义菜单的JSON，以后有时间会加上可视化界面。通过POST方法向服务器提交JSON的JS代码如下：</p>\n<figure class=\"highlight javascript\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div><div class=\"line\">6</div><div class=\"line\">7</div><div class=\"line\">8</div><div class=\"line\">9</div><div class=\"line\">10</div><div class=\"line\">11</div><div class=\"line\">12</div><div class=\"line\">13</div><div class=\"line\">14</div><div class=\"line\">15</div><div class=\"line\">16</div></pre></td><td class=\"code\"><pre><div class=\"line\"><span class=\"function\"><span class=\"keyword\">function</span> <span class=\"title\">changeButton</span>(<span class=\"params\"></span>)</div><div class=\"line\"></span>&#123;</div><div class=\"line\">    <span class=\"keyword\">var</span> url = <span class=\"string\">\"button_manage.php?access_token=\"</span>+$(<span class=\"string\">\"#accessToken\"</span>).val();</div><div class=\"line\">    <span class=\"keyword\">var</span> button_json = $(<span class=\"string\">\"#buttonBody\"</span>).val();</div><div class=\"line\">    $.post(url,&#123;<span class=\"string\">\"button_json\"</span>:button_json&#125;, <span class=\"function\"><span class=\"keyword\">function</span> (<span class=\"params\">data,status</span>) </span>&#123;</div><div class=\"line\">        <span class=\"keyword\">var</span> result = <span class=\"built_in\">eval</span>(<span class=\"string\">\"(\"</span>+data+<span class=\"string\">\")\"</span>);</div><div class=\"line\">        <span class=\"keyword\">if</span>(result[<span class=\"string\">\"errcode\"</span>] == <span class=\"number\">0</span>)</div><div class=\"line\">        &#123;</div><div class=\"line\">            alert(<span class=\"string\">\"配置成功\"</span>);</div><div class=\"line\">        &#125;</div><div class=\"line\">        <span class=\"keyword\">else</span></div><div class=\"line\">        &#123;</div><div class=\"line\">            alert(<span class=\"string\">\"配置失败，错误代码：\"</span>+result[<span class=\"string\">\"errcode\"</span>]+<span class=\"string\">\"错误信息：\"</span>+result[<span class=\"string\">\"errmsg\"</span>]);</div><div class=\"line\">        &#125;</div><div class=\"line\">    &#125;)</div><div class=\"line\">&#125;</div></pre></td></tr></table></figure>\n<p>服务器端的PHP代码如下：</p>\n<figure class=\"highlight php\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div><div class=\"line\">6</div><div class=\"line\">7</div><div class=\"line\">8</div><div class=\"line\">9</div><div class=\"line\">10</div><div class=\"line\">11</div><div class=\"line\">12</div><div class=\"line\">13</div></pre></td><td class=\"code\"><pre><div class=\"line\">$access_token = $_GET[<span class=\"string\">\"access_token\"</span>];</div><div class=\"line\">$api_url = <span class=\"string\">\"https://api.weixin.qq.com/cgi-bin/menu/create?access_token=&#123;$access_token&#125;\"</span>;</div><div class=\"line\">$button_json = $_POST[<span class=\"string\">\"button_json\"</span>];</div><div class=\"line\">$ch = curl_init();</div><div class=\"line\">curl_setopt($ch,CURLOPT_URL,$api_url);</div><div class=\"line\">curl_setopt($ch,CURLOPT_RETURNTRANSFER,<span class=\"number\">1</span>);</div><div class=\"line\">curl_setopt($ch, CURLOPT_SSL_VERIFYPEER, <span class=\"keyword\">false</span>);</div><div class=\"line\">curl_setopt($ch, CURLOPT_SSL_VERIFYHOST, <span class=\"keyword\">false</span>);</div><div class=\"line\">curl_setopt($ch, CURLOPT_POST, <span class=\"number\">1</span>);</div><div class=\"line\">curl_setopt($ch, CURLOPT_POSTFIELDS, $button_json);</div><div class=\"line\">$json_result = curl_exec($ch);</div><div class=\"line\">curl_close($ch);</div><div class=\"line\"><span class=\"keyword\">echo</span> $json_result;</div></pre></td></tr></table></figure>\n<p>实现效果可访问：</p>\n<p><a href=\"http://leo07.sinaapp.com/button_manage.html\">http://leo07.sinaapp.com/button_manage.html</a></p>\n"},{"layout":"post","title":"将数字转换为EXCEL列名的方法","description":"number to excel letter","date":"2015-12-25T16:00:00.000Z","_content":"\n用递归函数将数字转换为EXCEL中的列名，直接上代码（PHP）：\n\n```php\n//递归求解\nfunction R_NumToLetter($num)\n{\n    if($num == 0)\n    {\n        return '';\n    }\n    $base = 26;\n    $mod = (int)($num % $base);\n    $num = (int)($num / $base);\n    if($mod == 0)\n        return R_NumToLetter($num - 1).NumToLetter($base);\n    if($num == 0)\n        return NumToLetter($mod);\n    return R_NumToLetter($num).NumToLetter($mod);\n}\nfunction NumToLetter($num)\n{\n    if($num == 0)\n        return '';\n    $num = (int)$num - 1;\n    $ord_A = ord('A');\n    $chr = chr($ord_A + $num);\n    return $chr;\n}\n\n```","source":"_posts/number-to-excel-letter.md","raw":"---\nlayout: post\ntitle: \"将数字转换为EXCEL列名的方法\"\ndescription: \"number to excel letter\"\ncategory: PHP\ntags: [php, convert]\ndate: 2015-12-26\n---\n\n用递归函数将数字转换为EXCEL中的列名，直接上代码（PHP）：\n\n```php\n//递归求解\nfunction R_NumToLetter($num)\n{\n    if($num == 0)\n    {\n        return '';\n    }\n    $base = 26;\n    $mod = (int)($num % $base);\n    $num = (int)($num / $base);\n    if($mod == 0)\n        return R_NumToLetter($num - 1).NumToLetter($base);\n    if($num == 0)\n        return NumToLetter($mod);\n    return R_NumToLetter($num).NumToLetter($mod);\n}\nfunction NumToLetter($num)\n{\n    if($num == 0)\n        return '';\n    $num = (int)$num - 1;\n    $ord_A = ord('A');\n    $chr = chr($ord_A + $num);\n    return $chr;\n}\n\n```","slug":"number-to-excel-letter","published":1,"updated":"2017-02-08T05:39:50.000Z","comments":1,"photos":[],"link":"","_id":"cj5qp2xb4000nqo89cxwlnnpc","content":"<p>用递归函数将数字转换为EXCEL中的列名，直接上代码（PHP）：</p>\n<figure class=\"highlight php\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div><div class=\"line\">6</div><div class=\"line\">7</div><div class=\"line\">8</div><div class=\"line\">9</div><div class=\"line\">10</div><div class=\"line\">11</div><div class=\"line\">12</div><div class=\"line\">13</div><div class=\"line\">14</div><div class=\"line\">15</div><div class=\"line\">16</div><div class=\"line\">17</div><div class=\"line\">18</div><div class=\"line\">19</div><div class=\"line\">20</div><div class=\"line\">21</div><div class=\"line\">22</div><div class=\"line\">23</div><div class=\"line\">24</div><div class=\"line\">25</div></pre></td><td class=\"code\"><pre><div class=\"line\"><span class=\"comment\">//递归求解</span></div><div class=\"line\"><span class=\"function\"><span class=\"keyword\">function</span> <span class=\"title\">R_NumToLetter</span><span class=\"params\">($num)</span></span></div><div class=\"line\">&#123;</div><div class=\"line\">    <span class=\"keyword\">if</span>($num == <span class=\"number\">0</span>)</div><div class=\"line\">    &#123;</div><div class=\"line\">        <span class=\"keyword\">return</span> <span class=\"string\">''</span>;</div><div class=\"line\">    &#125;</div><div class=\"line\">    $base = <span class=\"number\">26</span>;</div><div class=\"line\">    $mod = (int)($num % $base);</div><div class=\"line\">    $num = (int)($num / $base);</div><div class=\"line\">    <span class=\"keyword\">if</span>($mod == <span class=\"number\">0</span>)</div><div class=\"line\">        <span class=\"keyword\">return</span> R_NumToLetter($num - <span class=\"number\">1</span>).NumToLetter($base);</div><div class=\"line\">    <span class=\"keyword\">if</span>($num == <span class=\"number\">0</span>)</div><div class=\"line\">        <span class=\"keyword\">return</span> NumToLetter($mod);</div><div class=\"line\">    <span class=\"keyword\">return</span> R_NumToLetter($num).NumToLetter($mod);</div><div class=\"line\">&#125;</div><div class=\"line\"><span class=\"function\"><span class=\"keyword\">function</span> <span class=\"title\">NumToLetter</span><span class=\"params\">($num)</span></span></div><div class=\"line\">&#123;</div><div class=\"line\">    <span class=\"keyword\">if</span>($num == <span class=\"number\">0</span>)</div><div class=\"line\">        <span class=\"keyword\">return</span> <span class=\"string\">''</span>;</div><div class=\"line\">    $num = (int)$num - <span class=\"number\">1</span>;</div><div class=\"line\">    $ord_A = ord(<span class=\"string\">'A'</span>);</div><div class=\"line\">    $chr = chr($ord_A + $num);</div><div class=\"line\">    <span class=\"keyword\">return</span> $chr;</div><div class=\"line\">&#125;</div></pre></td></tr></table></figure>","excerpt":"","more":"<p>用递归函数将数字转换为EXCEL中的列名，直接上代码（PHP）：</p>\n<figure class=\"highlight php\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div><div class=\"line\">6</div><div class=\"line\">7</div><div class=\"line\">8</div><div class=\"line\">9</div><div class=\"line\">10</div><div class=\"line\">11</div><div class=\"line\">12</div><div class=\"line\">13</div><div class=\"line\">14</div><div class=\"line\">15</div><div class=\"line\">16</div><div class=\"line\">17</div><div class=\"line\">18</div><div class=\"line\">19</div><div class=\"line\">20</div><div class=\"line\">21</div><div class=\"line\">22</div><div class=\"line\">23</div><div class=\"line\">24</div><div class=\"line\">25</div></pre></td><td class=\"code\"><pre><div class=\"line\"><span class=\"comment\">//递归求解</span></div><div class=\"line\"><span class=\"function\"><span class=\"keyword\">function</span> <span class=\"title\">R_NumToLetter</span><span class=\"params\">($num)</span></div><div class=\"line\"></span>&#123;</div><div class=\"line\">    <span class=\"keyword\">if</span>($num == <span class=\"number\">0</span>)</div><div class=\"line\">    &#123;</div><div class=\"line\">        <span class=\"keyword\">return</span> <span class=\"string\">''</span>;</div><div class=\"line\">    &#125;</div><div class=\"line\">    $base = <span class=\"number\">26</span>;</div><div class=\"line\">    $mod = (int)($num % $base);</div><div class=\"line\">    $num = (int)($num / $base);</div><div class=\"line\">    <span class=\"keyword\">if</span>($mod == <span class=\"number\">0</span>)</div><div class=\"line\">        <span class=\"keyword\">return</span> R_NumToLetter($num - <span class=\"number\">1</span>).NumToLetter($base);</div><div class=\"line\">    <span class=\"keyword\">if</span>($num == <span class=\"number\">0</span>)</div><div class=\"line\">        <span class=\"keyword\">return</span> NumToLetter($mod);</div><div class=\"line\">    <span class=\"keyword\">return</span> R_NumToLetter($num).NumToLetter($mod);</div><div class=\"line\">&#125;</div><div class=\"line\"><span class=\"function\"><span class=\"keyword\">function</span> <span class=\"title\">NumToLetter</span><span class=\"params\">($num)</span></div><div class=\"line\"></span>&#123;</div><div class=\"line\">    <span class=\"keyword\">if</span>($num == <span class=\"number\">0</span>)</div><div class=\"line\">        <span class=\"keyword\">return</span> <span class=\"string\">''</span>;</div><div class=\"line\">    $num = (int)$num - <span class=\"number\">1</span>;</div><div class=\"line\">    $ord_A = ord(<span class=\"string\">'A'</span>);</div><div class=\"line\">    $chr = chr($ord_A + $num);</div><div class=\"line\">    <span class=\"keyword\">return</span> $chr;</div><div class=\"line\">&#125;</div></pre></td></tr></table></figure>"},{"title":"关于TCP的那些琐事","date":"2017-07-30T04:57:29.000Z","description":"tcp-notes","_content":"\n## 一、关于连接状态与心跳包\n\n### 主动断开连接\n\n如果一方主动断开连接，另一方尝试接收数据时会抛出异常，例如C#下会抛出`SocketException`:\n\n```text\nErrorCode: 10054\nMessage: \"远程主机强迫关闭了一个现有的连接。\"\nSocketErrorCode: ConnectionReset\n```\n\n捕获该异常，可以判断对方是否主动断开连接。\n\n### 网络异常断开连接\n\n如果是网络异常导致连接断开，接收数据的一方无法得知网络连接状态，这时就需要用心跳机制来解决这个问题。TCP 本身有 Keepalive 选项，但默认关闭，而且检测周期过长（2个小时），因此一般都在应用层自己实现心跳包。心跳包即像心跳一样每隔一段时间向对方发送一个数据包，告诉对方自己连接正常。根据业务场景需要，心跳包可以两边都发送或者由一边主动发送，发送周期可设置在30s左右。如果由客户端主动发心跳包，服务端被动检测连接的周期可\n设置为客户端发送周期的两到三倍。\n\n## 二、关于消息格式\n\n### TLV格式\n\n消息格式可基于TLV（Type Length Value）进行设计：\n\n> [int32_t]Type(4bytes) | [int32_t]Length(4bytes) | [bytes array]Value |\n\n这种格式较为常见，接收方获得 Type 和 Length 后即可动态创建buffer接收、处理数据。\n\n### 文本格式\n\n消息格式也可以使用类似http协议的文本格式进行设计：\n\n> Header \\r\\n\\r\\n Body\n\n文本格式便于扩展和阅读，更加灵活。这也是 *UNIX编程艺术* 一书中推荐的协议格式。\n\n## 三、关于字节序\n\n### 大端序与小端序\n\n不同计算机对多字节整型的存储方式不同：\n\n> Some computers put the most significant byte first (known as big-endian order) and others put the least-significant byte first (known as little-endian order).\n\n定义：\n> 如果最低有效位在最高有效位的前面，则称小端序；反之则称大端序\n\n不同计算机可能采用不一样的字节序（主机字节序），而网络传输一般采用大端序（网络字节序）。\n\n### 主机字节序与网络字节序的转换\n\nC#中的`IPAddress`类提供了两个方法对主机字节序与网络字节序进行转换：\n\n```C#\npublic static int NetworkToHostOrder(int network)\npublic static int HostToNetworkOrder(int host)\n```\n\n## 参考\n\n- [TCP keepalive overview](http://tldp.org/HOWTO/TCP-Keepalive-HOWTO/overview.html)\n\n- [服务端主动发送心跳包，还是客户端发送比较好？](https://www.zhihu.com/question/35896874)\n\n- [闲说HeartBeat心跳包和TCP协议的KeepAlive机制](https://www.felix021.com/blog/read.php?2076)\n\n- [大多tcp应用采用长度+数据的格式传输数据，如何防止恶意虚报长度？](https://www.zhihu.com/question/58628159/answer/157900365)\n\n- [IPAddress.NetworkToHostOrder Method](https://msdn.microsoft.com/en-us/library/653kcke1.aspx)\n\n- [字节顺序-维基百科](https://zh.wikipedia.org/wiki/%E5%AD%97%E8%8A%82%E5%BA%8F)\n\n- [Big and Little Endian](https://www.cs.umd.edu/class/sum2003/cmsc311/Notes/Data/endian.html)","source":"_posts/tcp-notes.md","raw":"---\ntitle: 关于TCP的那些琐事\ndate: 2017-07-30 12:57:29\ndescription: \"tcp-notes\"\ncategory: TCP\ntags: [tcp]\n---\n\n## 一、关于连接状态与心跳包\n\n### 主动断开连接\n\n如果一方主动断开连接，另一方尝试接收数据时会抛出异常，例如C#下会抛出`SocketException`:\n\n```text\nErrorCode: 10054\nMessage: \"远程主机强迫关闭了一个现有的连接。\"\nSocketErrorCode: ConnectionReset\n```\n\n捕获该异常，可以判断对方是否主动断开连接。\n\n### 网络异常断开连接\n\n如果是网络异常导致连接断开，接收数据的一方无法得知网络连接状态，这时就需要用心跳机制来解决这个问题。TCP 本身有 Keepalive 选项，但默认关闭，而且检测周期过长（2个小时），因此一般都在应用层自己实现心跳包。心跳包即像心跳一样每隔一段时间向对方发送一个数据包，告诉对方自己连接正常。根据业务场景需要，心跳包可以两边都发送或者由一边主动发送，发送周期可设置在30s左右。如果由客户端主动发心跳包，服务端被动检测连接的周期可\n设置为客户端发送周期的两到三倍。\n\n## 二、关于消息格式\n\n### TLV格式\n\n消息格式可基于TLV（Type Length Value）进行设计：\n\n> [int32_t]Type(4bytes) | [int32_t]Length(4bytes) | [bytes array]Value |\n\n这种格式较为常见，接收方获得 Type 和 Length 后即可动态创建buffer接收、处理数据。\n\n### 文本格式\n\n消息格式也可以使用类似http协议的文本格式进行设计：\n\n> Header \\r\\n\\r\\n Body\n\n文本格式便于扩展和阅读，更加灵活。这也是 *UNIX编程艺术* 一书中推荐的协议格式。\n\n## 三、关于字节序\n\n### 大端序与小端序\n\n不同计算机对多字节整型的存储方式不同：\n\n> Some computers put the most significant byte first (known as big-endian order) and others put the least-significant byte first (known as little-endian order).\n\n定义：\n> 如果最低有效位在最高有效位的前面，则称小端序；反之则称大端序\n\n不同计算机可能采用不一样的字节序（主机字节序），而网络传输一般采用大端序（网络字节序）。\n\n### 主机字节序与网络字节序的转换\n\nC#中的`IPAddress`类提供了两个方法对主机字节序与网络字节序进行转换：\n\n```C#\npublic static int NetworkToHostOrder(int network)\npublic static int HostToNetworkOrder(int host)\n```\n\n## 参考\n\n- [TCP keepalive overview](http://tldp.org/HOWTO/TCP-Keepalive-HOWTO/overview.html)\n\n- [服务端主动发送心跳包，还是客户端发送比较好？](https://www.zhihu.com/question/35896874)\n\n- [闲说HeartBeat心跳包和TCP协议的KeepAlive机制](https://www.felix021.com/blog/read.php?2076)\n\n- [大多tcp应用采用长度+数据的格式传输数据，如何防止恶意虚报长度？](https://www.zhihu.com/question/58628159/answer/157900365)\n\n- [IPAddress.NetworkToHostOrder Method](https://msdn.microsoft.com/en-us/library/653kcke1.aspx)\n\n- [字节顺序-维基百科](https://zh.wikipedia.org/wiki/%E5%AD%97%E8%8A%82%E5%BA%8F)\n\n- [Big and Little Endian](https://www.cs.umd.edu/class/sum2003/cmsc311/Notes/Data/endian.html)","slug":"tcp-notes","published":1,"updated":"2017-07-30T11:08:22.625Z","comments":1,"layout":"post","photos":[],"link":"","_id":"cj5qp2xb8000rqo89w7kayqmw","content":"<h2 id=\"一、关于连接状态与心跳包\"><a href=\"#一、关于连接状态与心跳包\" class=\"headerlink\" title=\"一、关于连接状态与心跳包\"></a>一、关于连接状态与心跳包</h2><h3 id=\"主动断开连接\"><a href=\"#主动断开连接\" class=\"headerlink\" title=\"主动断开连接\"></a>主动断开连接</h3><p>如果一方主动断开连接，另一方尝试接收数据时会抛出异常，例如C#下会抛出<code>SocketException</code>:</p>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div></pre></td><td class=\"code\"><pre><div class=\"line\">ErrorCode: 10054</div><div class=\"line\">Message: &quot;远程主机强迫关闭了一个现有的连接。&quot;</div><div class=\"line\">SocketErrorCode: ConnectionReset</div></pre></td></tr></table></figure>\n<p>捕获该异常，可以判断对方是否主动断开连接。</p>\n<h3 id=\"网络异常断开连接\"><a href=\"#网络异常断开连接\" class=\"headerlink\" title=\"网络异常断开连接\"></a>网络异常断开连接</h3><p>如果是网络异常导致连接断开，接收数据的一方无法得知网络连接状态，这时就需要用心跳机制来解决这个问题。TCP 本身有 Keepalive 选项，但默认关闭，而且检测周期过长（2个小时），因此一般都在应用层自己实现心跳包。心跳包即像心跳一样每隔一段时间向对方发送一个数据包，告诉对方自己连接正常。根据业务场景需要，心跳包可以两边都发送或者由一边主动发送，发送周期可设置在30s左右。如果由客户端主动发心跳包，服务端被动检测连接的周期可<br>设置为客户端发送周期的两到三倍。</p>\n<h2 id=\"二、关于消息格式\"><a href=\"#二、关于消息格式\" class=\"headerlink\" title=\"二、关于消息格式\"></a>二、关于消息格式</h2><h3 id=\"TLV格式\"><a href=\"#TLV格式\" class=\"headerlink\" title=\"TLV格式\"></a>TLV格式</h3><p>消息格式可基于TLV（Type Length Value）进行设计：</p>\n<blockquote>\n<p>[int32_t]Type(4bytes) | [int32_t]Length(4bytes) | [bytes array]Value |</p>\n</blockquote>\n<p>这种格式较为常见，接收方获得 Type 和 Length 后即可动态创建buffer接收、处理数据。</p>\n<h3 id=\"文本格式\"><a href=\"#文本格式\" class=\"headerlink\" title=\"文本格式\"></a>文本格式</h3><p>消息格式也可以使用类似http协议的文本格式进行设计：</p>\n<blockquote>\n<p>Header \\r\\n\\r\\n Body</p>\n</blockquote>\n<p>文本格式便于扩展和阅读，更加灵活。这也是 <em>UNIX编程艺术</em> 一书中推荐的协议格式。</p>\n<h2 id=\"三、关于字节序\"><a href=\"#三、关于字节序\" class=\"headerlink\" title=\"三、关于字节序\"></a>三、关于字节序</h2><h3 id=\"大端序与小端序\"><a href=\"#大端序与小端序\" class=\"headerlink\" title=\"大端序与小端序\"></a>大端序与小端序</h3><p>不同计算机对多字节整型的存储方式不同：</p>\n<blockquote>\n<p>Some computers put the most significant byte first (known as big-endian order) and others put the least-significant byte first (known as little-endian order).</p>\n</blockquote>\n<p>定义：</p>\n<blockquote>\n<p>如果最低有效位在最高有效位的前面，则称小端序；反之则称大端序</p>\n</blockquote>\n<p>不同计算机可能采用不一样的字节序（主机字节序），而网络传输一般采用大端序（网络字节序）。</p>\n<h3 id=\"主机字节序与网络字节序的转换\"><a href=\"#主机字节序与网络字节序的转换\" class=\"headerlink\" title=\"主机字节序与网络字节序的转换\"></a>主机字节序与网络字节序的转换</h3><p>C#中的<code>IPAddress</code>类提供了两个方法对主机字节序与网络字节序进行转换：</p>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div></pre></td><td class=\"code\"><pre><div class=\"line\">public static int NetworkToHostOrder(int network)</div><div class=\"line\">public static int HostToNetworkOrder(int host)</div></pre></td></tr></table></figure>\n<h2 id=\"参考\"><a href=\"#参考\" class=\"headerlink\" title=\"参考\"></a>参考</h2><ul>\n<li><p><a href=\"http://tldp.org/HOWTO/TCP-Keepalive-HOWTO/overview.html\" target=\"_blank\" rel=\"external\">TCP keepalive overview</a></p>\n</li>\n<li><p><a href=\"https://www.zhihu.com/question/35896874\" target=\"_blank\" rel=\"external\">服务端主动发送心跳包，还是客户端发送比较好？</a></p>\n</li>\n<li><p><a href=\"https://www.felix021.com/blog/read.php?2076\" target=\"_blank\" rel=\"external\">闲说HeartBeat心跳包和TCP协议的KeepAlive机制</a></p>\n</li>\n<li><p><a href=\"https://www.zhihu.com/question/58628159/answer/157900365\" target=\"_blank\" rel=\"external\">大多tcp应用采用长度+数据的格式传输数据，如何防止恶意虚报长度？</a></p>\n</li>\n<li><p><a href=\"https://msdn.microsoft.com/en-us/library/653kcke1.aspx\" target=\"_blank\" rel=\"external\">IPAddress.NetworkToHostOrder Method</a></p>\n</li>\n<li><p><a href=\"https://zh.wikipedia.org/wiki/%E5%AD%97%E8%8A%82%E5%BA%8F\" target=\"_blank\" rel=\"external\">字节顺序-维基百科</a></p>\n</li>\n<li><p><a href=\"https://www.cs.umd.edu/class/sum2003/cmsc311/Notes/Data/endian.html\" target=\"_blank\" rel=\"external\">Big and Little Endian</a></p>\n</li>\n</ul>\n","excerpt":"","more":"<h2 id=\"一、关于连接状态与心跳包\"><a href=\"#一、关于连接状态与心跳包\" class=\"headerlink\" title=\"一、关于连接状态与心跳包\"></a>一、关于连接状态与心跳包</h2><h3 id=\"主动断开连接\"><a href=\"#主动断开连接\" class=\"headerlink\" title=\"主动断开连接\"></a>主动断开连接</h3><p>如果一方主动断开连接，另一方尝试接收数据时会抛出异常，例如C#下会抛出<code>SocketException</code>:</p>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div></pre></td><td class=\"code\"><pre><div class=\"line\">ErrorCode: 10054</div><div class=\"line\">Message: &quot;远程主机强迫关闭了一个现有的连接。&quot;</div><div class=\"line\">SocketErrorCode: ConnectionReset</div></pre></td></tr></table></figure>\n<p>捕获该异常，可以判断对方是否主动断开连接。</p>\n<h3 id=\"网络异常断开连接\"><a href=\"#网络异常断开连接\" class=\"headerlink\" title=\"网络异常断开连接\"></a>网络异常断开连接</h3><p>如果是网络异常导致连接断开，接收数据的一方无法得知网络连接状态，这时就需要用心跳机制来解决这个问题。TCP 本身有 Keepalive 选项，但默认关闭，而且检测周期过长（2个小时），因此一般都在应用层自己实现心跳包。心跳包即像心跳一样每隔一段时间向对方发送一个数据包，告诉对方自己连接正常。根据业务场景需要，心跳包可以两边都发送或者由一边主动发送，发送周期可设置在30s左右。如果由客户端主动发心跳包，服务端被动检测连接的周期可<br>设置为客户端发送周期的两到三倍。</p>\n<h2 id=\"二、关于消息格式\"><a href=\"#二、关于消息格式\" class=\"headerlink\" title=\"二、关于消息格式\"></a>二、关于消息格式</h2><h3 id=\"TLV格式\"><a href=\"#TLV格式\" class=\"headerlink\" title=\"TLV格式\"></a>TLV格式</h3><p>消息格式可基于TLV（Type Length Value）进行设计：</p>\n<blockquote>\n<p>[int32_t]Type(4bytes) | [int32_t]Length(4bytes) | [bytes array]Value |</p>\n</blockquote>\n<p>这种格式较为常见，接收方获得 Type 和 Length 后即可动态创建buffer接收、处理数据。</p>\n<h3 id=\"文本格式\"><a href=\"#文本格式\" class=\"headerlink\" title=\"文本格式\"></a>文本格式</h3><p>消息格式也可以使用类似http协议的文本格式进行设计：</p>\n<blockquote>\n<p>Header \\r\\n\\r\\n Body</p>\n</blockquote>\n<p>文本格式便于扩展和阅读，更加灵活。这也是 <em>UNIX编程艺术</em> 一书中推荐的协议格式。</p>\n<h2 id=\"三、关于字节序\"><a href=\"#三、关于字节序\" class=\"headerlink\" title=\"三、关于字节序\"></a>三、关于字节序</h2><h3 id=\"大端序与小端序\"><a href=\"#大端序与小端序\" class=\"headerlink\" title=\"大端序与小端序\"></a>大端序与小端序</h3><p>不同计算机对多字节整型的存储方式不同：</p>\n<blockquote>\n<p>Some computers put the most significant byte first (known as big-endian order) and others put the least-significant byte first (known as little-endian order).</p>\n</blockquote>\n<p>定义：</p>\n<blockquote>\n<p>如果最低有效位在最高有效位的前面，则称小端序；反之则称大端序</p>\n</blockquote>\n<p>不同计算机可能采用不一样的字节序（主机字节序），而网络传输一般采用大端序（网络字节序）。</p>\n<h3 id=\"主机字节序与网络字节序的转换\"><a href=\"#主机字节序与网络字节序的转换\" class=\"headerlink\" title=\"主机字节序与网络字节序的转换\"></a>主机字节序与网络字节序的转换</h3><p>C#中的<code>IPAddress</code>类提供了两个方法对主机字节序与网络字节序进行转换：</p>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div></pre></td><td class=\"code\"><pre><div class=\"line\">public static int NetworkToHostOrder(int network)</div><div class=\"line\">public static int HostToNetworkOrder(int host)</div></pre></td></tr></table></figure>\n<h2 id=\"参考\"><a href=\"#参考\" class=\"headerlink\" title=\"参考\"></a>参考</h2><ul>\n<li><p><a href=\"http://tldp.org/HOWTO/TCP-Keepalive-HOWTO/overview.html\">TCP keepalive overview</a></p>\n</li>\n<li><p><a href=\"https://www.zhihu.com/question/35896874\">服务端主动发送心跳包，还是客户端发送比较好？</a></p>\n</li>\n<li><p><a href=\"https://www.felix021.com/blog/read.php?2076\">闲说HeartBeat心跳包和TCP协议的KeepAlive机制</a></p>\n</li>\n<li><p><a href=\"https://www.zhihu.com/question/58628159/answer/157900365\">大多tcp应用采用长度+数据的格式传输数据，如何防止恶意虚报长度？</a></p>\n</li>\n<li><p><a href=\"https://msdn.microsoft.com/en-us/library/653kcke1.aspx\">IPAddress.NetworkToHostOrder Method</a></p>\n</li>\n<li><p><a href=\"https://zh.wikipedia.org/wiki/%E5%AD%97%E8%8A%82%E5%BA%8F\">字节顺序-维基百科</a></p>\n</li>\n<li><p><a href=\"https://www.cs.umd.edu/class/sum2003/cmsc311/Notes/Data/endian.html\">Big and Little Endian</a></p>\n</li>\n</ul>\n"},{"layout":"post","title":"微信公众平台下通过网页授权获取用户信息的方法","description":"","date":"2016-03-21T16:00:00.000Z","_content":"\n-\t###\t授权方式\n\n    微信网页的授权方式分为两种：\n\n    - 以 snsapi_base 为 scope 发起的网页授权：用于获取用户的 openid ，为静默授权\n    - 以 snsapi_userinfo 为 scope 发起的网页授权：用于获取用户的基本信息，需要用户手动同意授权\n\n    下面以 snsapi_userinfo 的类型为例，说明网页授权的步骤：\n\n1.  ### 获取code\n\n    引导关注者打开以下页面：\n\n    [https://open.weixin.qq.com/connect/oauth2/authorize?appid=APPID&redirect_uri=REDIRECT_URI&response_type=code&\n    scope=snsapi_userinfo&state=STATE#wechat_redirect]()\n\n    其中 redirect_uri 为需要获取用户信息的页面，redirect_uri 需要进行 urlencode 处理。用户同意授权之后，redirect_uri 的页面就可以通过 GET 的方式从 url 中拿到 code，即：\n\n    `$code = $_GET[\"code\"];`\n\n2.  ### 用code换取网页授权的access_token\n\n    利用上一步获取的code即可换取网页授权access_token，方法如下：\n\n    ```php\n    $api_url = \"https://api.weixin.qq.com/sns/oauth2/access_token?appid={$appid}&secret={$secret}&code={$code}&grant_type=authorization_code\";\n    $response_info = self::get_info_from_api($api_url);\n    if(isset($response_info[\"errcode\"]))\n    {\n        exit(\"get access token failed: \".$response_info[\"errcode\"].\", \".$response_info[\"errmsg\"]);\n    }\n\n    $access_token = $response_info[\"access_token\"];\n    ```\n\n    其中，get_info_from_api 的定义如下：\n\n    ```php\n    public static function get_info_from_api($api_url)\n    {\n        $ch = curl_init();\n        curl_setopt($ch, CURLOPT_URL, $api_url);\n        curl_setopt($ch, CURLOPT_RETURNTRANSFER, 1);\n        curl_setopt($ch, CURLOPT_SSL_VERIFYPEER, false);\n        curl_setopt($ch, CURLOPT_SSL_VERIFYHOST, false);\n        $result = curl_exec($ch);\n        curl_close($ch);\n        $response_info = json_decode($result, true);\n        return $response_info;\n    }\n    ```\n    get_info_from_api 是利用PHP中的curl函数以 GET 方法从微信提供的 api 获取数据，返回的结果为关联数组的形式。\n\n3.  ### 获取用户信息\n\n    接下来，即可用 access_token 获取用户信息：\n\n    ```php\n    $open_id = $response_info[\"openid\"];\n    $api_url = \"https://api.weixin.qq.com/sns/userinfo?access_token={$access_token}&openid={$open_id}&lang=zh_CN\";\n    $user_info = self::get_info_from_api($api_url);\n    if(isset($user_info[\"errcode\"]))\n    {\n        exit(\"get user info failed: \".$user_info[\"errcode\"].\", \".$user_info[\"errmsg\"]);\n    }\n    ```\n\n","source":"_posts/wechat-auth-get-user-info.md","raw":"---\nlayout: post\ntitle: \"微信公众平台下通过网页授权获取用户信息的方法\"\ndescription: \"\"\ncategory: WeChat\ntags: [php, wechat]\ndate: 2016-03-22\n---\n\n-\t###\t授权方式\n\n    微信网页的授权方式分为两种：\n\n    - 以 snsapi_base 为 scope 发起的网页授权：用于获取用户的 openid ，为静默授权\n    - 以 snsapi_userinfo 为 scope 发起的网页授权：用于获取用户的基本信息，需要用户手动同意授权\n\n    下面以 snsapi_userinfo 的类型为例，说明网页授权的步骤：\n\n1.  ### 获取code\n\n    引导关注者打开以下页面：\n\n    [https://open.weixin.qq.com/connect/oauth2/authorize?appid=APPID&redirect_uri=REDIRECT_URI&response_type=code&\n    scope=snsapi_userinfo&state=STATE#wechat_redirect]()\n\n    其中 redirect_uri 为需要获取用户信息的页面，redirect_uri 需要进行 urlencode 处理。用户同意授权之后，redirect_uri 的页面就可以通过 GET 的方式从 url 中拿到 code，即：\n\n    `$code = $_GET[\"code\"];`\n\n2.  ### 用code换取网页授权的access_token\n\n    利用上一步获取的code即可换取网页授权access_token，方法如下：\n\n    ```php\n    $api_url = \"https://api.weixin.qq.com/sns/oauth2/access_token?appid={$appid}&secret={$secret}&code={$code}&grant_type=authorization_code\";\n    $response_info = self::get_info_from_api($api_url);\n    if(isset($response_info[\"errcode\"]))\n    {\n        exit(\"get access token failed: \".$response_info[\"errcode\"].\", \".$response_info[\"errmsg\"]);\n    }\n\n    $access_token = $response_info[\"access_token\"];\n    ```\n\n    其中，get_info_from_api 的定义如下：\n\n    ```php\n    public static function get_info_from_api($api_url)\n    {\n        $ch = curl_init();\n        curl_setopt($ch, CURLOPT_URL, $api_url);\n        curl_setopt($ch, CURLOPT_RETURNTRANSFER, 1);\n        curl_setopt($ch, CURLOPT_SSL_VERIFYPEER, false);\n        curl_setopt($ch, CURLOPT_SSL_VERIFYHOST, false);\n        $result = curl_exec($ch);\n        curl_close($ch);\n        $response_info = json_decode($result, true);\n        return $response_info;\n    }\n    ```\n    get_info_from_api 是利用PHP中的curl函数以 GET 方法从微信提供的 api 获取数据，返回的结果为关联数组的形式。\n\n3.  ### 获取用户信息\n\n    接下来，即可用 access_token 获取用户信息：\n\n    ```php\n    $open_id = $response_info[\"openid\"];\n    $api_url = \"https://api.weixin.qq.com/sns/userinfo?access_token={$access_token}&openid={$open_id}&lang=zh_CN\";\n    $user_info = self::get_info_from_api($api_url);\n    if(isset($user_info[\"errcode\"]))\n    {\n        exit(\"get user info failed: \".$user_info[\"errcode\"].\", \".$user_info[\"errmsg\"]);\n    }\n    ```\n\n","slug":"wechat-auth-get-user-info","published":1,"updated":"2017-02-08T05:29:46.000Z","comments":1,"photos":[],"link":"","_id":"cj5qp2xbb000tqo89ajqilaw9","content":"<ul>\n<li><h3 id=\"授权方式\"><a href=\"#授权方式\" class=\"headerlink\" title=\"授权方式\"></a>授权方式</h3><p>微信网页的授权方式分为两种：</p>\n<ul>\n<li>以 snsapi_base 为 scope 发起的网页授权：用于获取用户的 openid ，为静默授权</li>\n<li>以 snsapi_userinfo 为 scope 发起的网页授权：用于获取用户的基本信息，需要用户手动同意授权</li>\n</ul>\n<p>下面以 snsapi_userinfo 的类型为例，说明网页授权的步骤：</p>\n</li>\n</ul>\n<ol>\n<li><h3 id=\"获取code\"><a href=\"#获取code\" class=\"headerlink\" title=\"获取code\"></a>获取code</h3><p>引导关注者打开以下页面：</p>\n<p><a href=\"\">https://open.weixin.qq.com/connect/oauth2/authorize?appid=APPID&amp;redirect_uri=REDIRECT_URI&amp;response_type=code&amp;<br>scope=snsapi_userinfo&amp;state=STATE#wechat_redirect</a></p>\n<p>其中 redirect_uri 为需要获取用户信息的页面，redirect_uri 需要进行 urlencode 处理。用户同意授权之后，redirect_uri 的页面就可以通过 GET 的方式从 url 中拿到 code，即：</p>\n<p><code>$code = $_GET[&quot;code&quot;];</code></p>\n</li>\n<li><h3 id=\"用code换取网页授权的access-token\"><a href=\"#用code换取网页授权的access-token\" class=\"headerlink\" title=\"用code换取网页授权的access_token\"></a>用code换取网页授权的access_token</h3><p>利用上一步获取的code即可换取网页授权access_token，方法如下：</p>\n<figure class=\"highlight php\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div><div class=\"line\">6</div><div class=\"line\">7</div><div class=\"line\">8</div></pre></td><td class=\"code\"><pre><div class=\"line\">$api_url = <span class=\"string\">\"https://api.weixin.qq.com/sns/oauth2/access_token?appid=&#123;$appid&#125;&amp;secret=&#123;$secret&#125;&amp;code=&#123;$code&#125;&amp;grant_type=authorization_code\"</span>;</div><div class=\"line\">$response_info = <span class=\"keyword\">self</span>::get_info_from_api($api_url);</div><div class=\"line\"><span class=\"keyword\">if</span>(<span class=\"keyword\">isset</span>($response_info[<span class=\"string\">\"errcode\"</span>]))</div><div class=\"line\">&#123;</div><div class=\"line\">    <span class=\"keyword\">exit</span>(<span class=\"string\">\"get access token failed: \"</span>.$response_info[<span class=\"string\">\"errcode\"</span>].<span class=\"string\">\", \"</span>.$response_info[<span class=\"string\">\"errmsg\"</span>]);</div><div class=\"line\">&#125;</div><div class=\"line\"></div><div class=\"line\">$access_token = $response_info[<span class=\"string\">\"access_token\"</span>];</div></pre></td></tr></table></figure>\n<p>其中，get_info_from_api 的定义如下：</p>\n<figure class=\"highlight php\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div><div class=\"line\">6</div><div class=\"line\">7</div><div class=\"line\">8</div><div class=\"line\">9</div><div class=\"line\">10</div><div class=\"line\">11</div><div class=\"line\">12</div></pre></td><td class=\"code\"><pre><div class=\"line\"><span class=\"keyword\">public</span> <span class=\"keyword\">static</span> <span class=\"function\"><span class=\"keyword\">function</span> <span class=\"title\">get_info_from_api</span><span class=\"params\">($api_url)</span></span></div><div class=\"line\">&#123;</div><div class=\"line\">    $ch = curl_init();</div><div class=\"line\">    curl_setopt($ch, CURLOPT_URL, $api_url);</div><div class=\"line\">    curl_setopt($ch, CURLOPT_RETURNTRANSFER, <span class=\"number\">1</span>);</div><div class=\"line\">    curl_setopt($ch, CURLOPT_SSL_VERIFYPEER, <span class=\"keyword\">false</span>);</div><div class=\"line\">    curl_setopt($ch, CURLOPT_SSL_VERIFYHOST, <span class=\"keyword\">false</span>);</div><div class=\"line\">    $result = curl_exec($ch);</div><div class=\"line\">    curl_close($ch);</div><div class=\"line\">    $response_info = json_decode($result, <span class=\"keyword\">true</span>);</div><div class=\"line\">    <span class=\"keyword\">return</span> $response_info;</div><div class=\"line\">&#125;</div></pre></td></tr></table></figure>\n<p>get_info_from_api 是利用PHP中的curl函数以 GET 方法从微信提供的 api 获取数据，返回的结果为关联数组的形式。</p>\n</li>\n<li><h3 id=\"获取用户信息\"><a href=\"#获取用户信息\" class=\"headerlink\" title=\"获取用户信息\"></a>获取用户信息</h3><p>接下来，即可用 access_token 获取用户信息：</p>\n<figure class=\"highlight php\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div><div class=\"line\">6</div><div class=\"line\">7</div></pre></td><td class=\"code\"><pre><div class=\"line\">$open_id = $response_info[<span class=\"string\">\"openid\"</span>];</div><div class=\"line\">$api_url = <span class=\"string\">\"https://api.weixin.qq.com/sns/userinfo?access_token=&#123;$access_token&#125;&amp;openid=&#123;$open_id&#125;&amp;lang=zh_CN\"</span>;</div><div class=\"line\">$user_info = <span class=\"keyword\">self</span>::get_info_from_api($api_url);</div><div class=\"line\"><span class=\"keyword\">if</span>(<span class=\"keyword\">isset</span>($user_info[<span class=\"string\">\"errcode\"</span>]))</div><div class=\"line\">&#123;</div><div class=\"line\">    <span class=\"keyword\">exit</span>(<span class=\"string\">\"get user info failed: \"</span>.$user_info[<span class=\"string\">\"errcode\"</span>].<span class=\"string\">\", \"</span>.$user_info[<span class=\"string\">\"errmsg\"</span>]);</div><div class=\"line\">&#125;</div></pre></td></tr></table></figure>\n</li>\n</ol>\n","excerpt":"","more":"<ul>\n<li><h3 id=\"授权方式\"><a href=\"#授权方式\" class=\"headerlink\" title=\"授权方式\"></a>授权方式</h3><p>微信网页的授权方式分为两种：</p>\n<ul>\n<li>以 snsapi_base 为 scope 发起的网页授权：用于获取用户的 openid ，为静默授权</li>\n<li>以 snsapi_userinfo 为 scope 发起的网页授权：用于获取用户的基本信息，需要用户手动同意授权</li>\n</ul>\n<p>下面以 snsapi_userinfo 的类型为例，说明网页授权的步骤：</p>\n</li>\n</ul>\n<ol>\n<li><h3 id=\"获取code\"><a href=\"#获取code\" class=\"headerlink\" title=\"获取code\"></a>获取code</h3><p>引导关注者打开以下页面：</p>\n<p><a href=\"\">https://open.weixin.qq.com/connect/oauth2/authorize?appid=APPID&amp;redirect_uri=REDIRECT_URI&amp;response_type=code&amp;<br>scope=snsapi_userinfo&amp;state=STATE#wechat_redirect</a></p>\n<p>其中 redirect_uri 为需要获取用户信息的页面，redirect_uri 需要进行 urlencode 处理。用户同意授权之后，redirect_uri 的页面就可以通过 GET 的方式从 url 中拿到 code，即：</p>\n<p><code>$code = $_GET[&quot;code&quot;];</code></p>\n</li>\n<li><h3 id=\"用code换取网页授权的access-token\"><a href=\"#用code换取网页授权的access-token\" class=\"headerlink\" title=\"用code换取网页授权的access_token\"></a>用code换取网页授权的access_token</h3><p>利用上一步获取的code即可换取网页授权access_token，方法如下：</p>\n<figure class=\"highlight php\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div><div class=\"line\">6</div><div class=\"line\">7</div><div class=\"line\">8</div></pre></td><td class=\"code\"><pre><div class=\"line\">$api_url = <span class=\"string\">\"https://api.weixin.qq.com/sns/oauth2/access_token?appid=&#123;$appid&#125;&amp;secret=&#123;$secret&#125;&amp;code=&#123;$code&#125;&amp;grant_type=authorization_code\"</span>;</div><div class=\"line\">$response_info = <span class=\"keyword\">self</span>::get_info_from_api($api_url);</div><div class=\"line\"><span class=\"keyword\">if</span>(<span class=\"keyword\">isset</span>($response_info[<span class=\"string\">\"errcode\"</span>]))</div><div class=\"line\">&#123;</div><div class=\"line\">    <span class=\"keyword\">exit</span>(<span class=\"string\">\"get access token failed: \"</span>.$response_info[<span class=\"string\">\"errcode\"</span>].<span class=\"string\">\", \"</span>.$response_info[<span class=\"string\">\"errmsg\"</span>]);</div><div class=\"line\">&#125;</div><div class=\"line\"></div><div class=\"line\">$access_token = $response_info[<span class=\"string\">\"access_token\"</span>];</div></pre></td></tr></table></figure>\n<p>其中，get_info_from_api 的定义如下：</p>\n<figure class=\"highlight php\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div><div class=\"line\">6</div><div class=\"line\">7</div><div class=\"line\">8</div><div class=\"line\">9</div><div class=\"line\">10</div><div class=\"line\">11</div><div class=\"line\">12</div></pre></td><td class=\"code\"><pre><div class=\"line\"><span class=\"keyword\">public</span> <span class=\"keyword\">static</span> <span class=\"function\"><span class=\"keyword\">function</span> <span class=\"title\">get_info_from_api</span><span class=\"params\">($api_url)</span></div><div class=\"line\"></span>&#123;</div><div class=\"line\">    $ch = curl_init();</div><div class=\"line\">    curl_setopt($ch, CURLOPT_URL, $api_url);</div><div class=\"line\">    curl_setopt($ch, CURLOPT_RETURNTRANSFER, <span class=\"number\">1</span>);</div><div class=\"line\">    curl_setopt($ch, CURLOPT_SSL_VERIFYPEER, <span class=\"keyword\">false</span>);</div><div class=\"line\">    curl_setopt($ch, CURLOPT_SSL_VERIFYHOST, <span class=\"keyword\">false</span>);</div><div class=\"line\">    $result = curl_exec($ch);</div><div class=\"line\">    curl_close($ch);</div><div class=\"line\">    $response_info = json_decode($result, <span class=\"keyword\">true</span>);</div><div class=\"line\">    <span class=\"keyword\">return</span> $response_info;</div><div class=\"line\">&#125;</div></pre></td></tr></table></figure>\n<p>get_info_from_api 是利用PHP中的curl函数以 GET 方法从微信提供的 api 获取数据，返回的结果为关联数组的形式。</p>\n</li>\n<li><h3 id=\"获取用户信息\"><a href=\"#获取用户信息\" class=\"headerlink\" title=\"获取用户信息\"></a>获取用户信息</h3><p>接下来，即可用 access_token 获取用户信息：</p>\n<figure class=\"highlight php\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div><div class=\"line\">6</div><div class=\"line\">7</div></pre></td><td class=\"code\"><pre><div class=\"line\">$open_id = $response_info[<span class=\"string\">\"openid\"</span>];</div><div class=\"line\">$api_url = <span class=\"string\">\"https://api.weixin.qq.com/sns/userinfo?access_token=&#123;$access_token&#125;&amp;openid=&#123;$open_id&#125;&amp;lang=zh_CN\"</span>;</div><div class=\"line\">$user_info = <span class=\"keyword\">self</span>::get_info_from_api($api_url);</div><div class=\"line\"><span class=\"keyword\">if</span>(<span class=\"keyword\">isset</span>($user_info[<span class=\"string\">\"errcode\"</span>]))</div><div class=\"line\">&#123;</div><div class=\"line\">    <span class=\"keyword\">exit</span>(<span class=\"string\">\"get user info failed: \"</span>.$user_info[<span class=\"string\">\"errcode\"</span>].<span class=\"string\">\", \"</span>.$user_info[<span class=\"string\">\"errmsg\"</span>]);</div><div class=\"line\">&#125;</div></pre></td></tr></table></figure>\n</li>\n</ol>\n"},{"layout":"post","title":"微信公众平台带参数二维码配置工具的实现","description":"wechat qr code manage","date":"2015-12-08T16:00:00.000Z","_content":"\n配置带参数的二维码同样需要先获取Access Token，获取方法在 *微信公众平台自定义菜单配置工具的实现* 一文中有描述。\n\n利用获取到的Access Token，可以创建二维码的Ticket。通过POST方法向服务器提交相关信息，JS代码如下：\n\n```javascript\nfunction getTicket()\n{\n    var url = \"qrcode_manage.php?access_token=\"+$(\"#accessToken\").val();\n    var qrcode_type = $(\"#qrType\").val();\n    var qrcode_scene_id = $(\"#qrSceneId\").val();\n    $.post(url,\n        {\n            \"qrcode_type\":qrcode_type,\n            \"qrcode_scene_id\":qrcode_scene_id\n        },\n        function (data,status) {\n            var result = eval(\"(\"+data+\")\");\n            $(\"#ticketInfo\").css(\"display\",\"block\");\n            if(typeof (result[\"errcode\"])!=\"undefined\")\n            {\n                var errorInfo = \"错误代码：\"+result[\"errcode\"]+\";错误信息：\"+result[\"errmsg\"];\n                $(\"#ticketInfo\").html(errorInfo);\n                $(\"#getQrcodeBtn\").attr(\"disabled\",\"disabled\");\n            }\n            else\n            {\n                var successInfo = \"获取Ticket 成功，Ticket：\" + result[\"ticket\"];\n                successInfo += \"<br>url:\" + result[\"url\"];\n                $(\"#ticket\").val(result[\"ticket\"]);\n                $(\"#ticketInfo\").html(successInfo);\n                $(\"#getQrcodeBtn\").removeAttr(\"disabled\");\n            }\n        }\n    );\n}\n\n```\n\n服务器端进行转发的PHP代码如下：\n\n```php\n$access_token = $_GET[\"access_token\"];\n$api_url = \"https://api.weixin.qq.com/cgi-bin/qrcode/create?access_token={$access_token}\";\n$qrcode_type = $_POST[\"qrcode_type\"];\n$qrcode_scene_id = (int)$_POST[\"qrcode_scene_id\"];\n$qrcode_array = array();\nif($qrcode_type == \"QR_SCENE\")\n{\n    $qrcode_array[\"expire_seconds\"] = 604800; //七天\n    $qrcode_array[\"action_name\"] = \"QR_SCENE\";\n}\nelse\n{\n    $qrcode_array[\"action_name\"] = \"QR_LIMIT_SCENE\";\n}\n\n$qrcode_array[\"action_info\"][\"scene\"][\"scene_id\"] = $qrcode_scene_id;\n$qrcode_json = json_encode($qrcode_array);\n$ch = curl_init();\ncurl_setopt($ch,CURLOPT_URL,$api_url);\ncurl_setopt($ch,CURLOPT_RETURNTRANSFER,1);\ncurl_setopt($ch, CURLOPT_SSL_VERIFYPEER, false);\ncurl_setopt($ch, CURLOPT_SSL_VERIFYHOST, false);\ncurl_setopt($ch, CURLOPT_POST, 1);\ncurl_setopt($ch, CURLOPT_POSTFIELDS, $qrcode_json);\n$json_result = curl_exec($ch);\ncurl_close($ch);\necho $json_result;\n\n```\n\n之后，可以通过Ticket换取二维码，JS代码如下：\n\n```javascript\nfunction getQrcode()\n{\n    var ticket = $(\"#ticket\").val();\n    var date = new Date();\n    var url = \"qrcode_manage.php?ticket=\"+ticket+\"&time=\"+date.getTime();\n    $(\"#qrcode\").attr(\"src\",\"qrcode_manage.php?ticket=\"+ticket+\"&time=\"+date.getTime());\n}\n\n```\n\n服务器端进行转发的PHP代码如下：\n\n```php\n$ticket = $_GET[\"ticket\"];\n$api_url = \"https://mp.weixin.qq.com/cgi-bin/showqrcode?ticket={$ticket}\";\n$ch = curl_init();\ncurl_setopt($ch,CURLOPT_URL,$api_url);\ncurl_setopt($ch,CURLOPT_RETURNTRANSFER,1);\ncurl_setopt($ch, CURLOPT_SSL_VERIFYPEER, false);\ncurl_setopt($ch, CURLOPT_SSL_VERIFYHOST, false);\n$qrcode_result = curl_exec($ch);\ncurl_close($ch);\necho $qrcode_result;\n```\n\n实现效果可访问：\n\n[http://leo07.sinaapp.com/qrcode_manage.html](http://leo07.sinaapp.com/qrcode_manage.html)\n\n","source":"_posts/wechat-qr-code-manage.md","raw":"---\nlayout: post\ntitle: \"微信公众平台带参数二维码配置工具的实现\"\ndescription: \"wechat qr code manage\"\ncategory: WeChat\ntags: [php, wechat, curl, tools]\ndate: 2015-12-09\n---\n\n配置带参数的二维码同样需要先获取Access Token，获取方法在 *微信公众平台自定义菜单配置工具的实现* 一文中有描述。\n\n利用获取到的Access Token，可以创建二维码的Ticket。通过POST方法向服务器提交相关信息，JS代码如下：\n\n```javascript\nfunction getTicket()\n{\n    var url = \"qrcode_manage.php?access_token=\"+$(\"#accessToken\").val();\n    var qrcode_type = $(\"#qrType\").val();\n    var qrcode_scene_id = $(\"#qrSceneId\").val();\n    $.post(url,\n        {\n            \"qrcode_type\":qrcode_type,\n            \"qrcode_scene_id\":qrcode_scene_id\n        },\n        function (data,status) {\n            var result = eval(\"(\"+data+\")\");\n            $(\"#ticketInfo\").css(\"display\",\"block\");\n            if(typeof (result[\"errcode\"])!=\"undefined\")\n            {\n                var errorInfo = \"错误代码：\"+result[\"errcode\"]+\";错误信息：\"+result[\"errmsg\"];\n                $(\"#ticketInfo\").html(errorInfo);\n                $(\"#getQrcodeBtn\").attr(\"disabled\",\"disabled\");\n            }\n            else\n            {\n                var successInfo = \"获取Ticket 成功，Ticket：\" + result[\"ticket\"];\n                successInfo += \"<br>url:\" + result[\"url\"];\n                $(\"#ticket\").val(result[\"ticket\"]);\n                $(\"#ticketInfo\").html(successInfo);\n                $(\"#getQrcodeBtn\").removeAttr(\"disabled\");\n            }\n        }\n    );\n}\n\n```\n\n服务器端进行转发的PHP代码如下：\n\n```php\n$access_token = $_GET[\"access_token\"];\n$api_url = \"https://api.weixin.qq.com/cgi-bin/qrcode/create?access_token={$access_token}\";\n$qrcode_type = $_POST[\"qrcode_type\"];\n$qrcode_scene_id = (int)$_POST[\"qrcode_scene_id\"];\n$qrcode_array = array();\nif($qrcode_type == \"QR_SCENE\")\n{\n    $qrcode_array[\"expire_seconds\"] = 604800; //七天\n    $qrcode_array[\"action_name\"] = \"QR_SCENE\";\n}\nelse\n{\n    $qrcode_array[\"action_name\"] = \"QR_LIMIT_SCENE\";\n}\n\n$qrcode_array[\"action_info\"][\"scene\"][\"scene_id\"] = $qrcode_scene_id;\n$qrcode_json = json_encode($qrcode_array);\n$ch = curl_init();\ncurl_setopt($ch,CURLOPT_URL,$api_url);\ncurl_setopt($ch,CURLOPT_RETURNTRANSFER,1);\ncurl_setopt($ch, CURLOPT_SSL_VERIFYPEER, false);\ncurl_setopt($ch, CURLOPT_SSL_VERIFYHOST, false);\ncurl_setopt($ch, CURLOPT_POST, 1);\ncurl_setopt($ch, CURLOPT_POSTFIELDS, $qrcode_json);\n$json_result = curl_exec($ch);\ncurl_close($ch);\necho $json_result;\n\n```\n\n之后，可以通过Ticket换取二维码，JS代码如下：\n\n```javascript\nfunction getQrcode()\n{\n    var ticket = $(\"#ticket\").val();\n    var date = new Date();\n    var url = \"qrcode_manage.php?ticket=\"+ticket+\"&time=\"+date.getTime();\n    $(\"#qrcode\").attr(\"src\",\"qrcode_manage.php?ticket=\"+ticket+\"&time=\"+date.getTime());\n}\n\n```\n\n服务器端进行转发的PHP代码如下：\n\n```php\n$ticket = $_GET[\"ticket\"];\n$api_url = \"https://mp.weixin.qq.com/cgi-bin/showqrcode?ticket={$ticket}\";\n$ch = curl_init();\ncurl_setopt($ch,CURLOPT_URL,$api_url);\ncurl_setopt($ch,CURLOPT_RETURNTRANSFER,1);\ncurl_setopt($ch, CURLOPT_SSL_VERIFYPEER, false);\ncurl_setopt($ch, CURLOPT_SSL_VERIFYHOST, false);\n$qrcode_result = curl_exec($ch);\ncurl_close($ch);\necho $qrcode_result;\n```\n\n实现效果可访问：\n\n[http://leo07.sinaapp.com/qrcode_manage.html](http://leo07.sinaapp.com/qrcode_manage.html)\n\n","slug":"wechat-qr-code-manage","published":1,"updated":"2017-02-08T05:29:20.000Z","comments":1,"photos":[],"link":"","_id":"cj5qp2xbe000xqo89n4fo61g6","content":"<p>配置带参数的二维码同样需要先获取Access Token，获取方法在 <em>微信公众平台自定义菜单配置工具的实现</em> 一文中有描述。</p>\n<p>利用获取到的Access Token，可以创建二维码的Ticket。通过POST方法向服务器提交相关信息，JS代码如下：</p>\n<figure class=\"highlight javascript\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div><div class=\"line\">6</div><div class=\"line\">7</div><div class=\"line\">8</div><div class=\"line\">9</div><div class=\"line\">10</div><div class=\"line\">11</div><div class=\"line\">12</div><div class=\"line\">13</div><div class=\"line\">14</div><div class=\"line\">15</div><div class=\"line\">16</div><div class=\"line\">17</div><div class=\"line\">18</div><div class=\"line\">19</div><div class=\"line\">20</div><div class=\"line\">21</div><div class=\"line\">22</div><div class=\"line\">23</div><div class=\"line\">24</div><div class=\"line\">25</div><div class=\"line\">26</div><div class=\"line\">27</div><div class=\"line\">28</div><div class=\"line\">29</div><div class=\"line\">30</div></pre></td><td class=\"code\"><pre><div class=\"line\"><span class=\"function\"><span class=\"keyword\">function</span> <span class=\"title\">getTicket</span>(<span class=\"params\"></span>)</span></div><div class=\"line\">&#123;</div><div class=\"line\">    <span class=\"keyword\">var</span> url = <span class=\"string\">\"qrcode_manage.php?access_token=\"</span>+$(<span class=\"string\">\"#accessToken\"</span>).val();</div><div class=\"line\">    <span class=\"keyword\">var</span> qrcode_type = $(<span class=\"string\">\"#qrType\"</span>).val();</div><div class=\"line\">    <span class=\"keyword\">var</span> qrcode_scene_id = $(<span class=\"string\">\"#qrSceneId\"</span>).val();</div><div class=\"line\">    $.post(url,</div><div class=\"line\">        &#123;</div><div class=\"line\">            <span class=\"string\">\"qrcode_type\"</span>:qrcode_type,</div><div class=\"line\">            <span class=\"string\">\"qrcode_scene_id\"</span>:qrcode_scene_id</div><div class=\"line\">        &#125;,</div><div class=\"line\">        <span class=\"function\"><span class=\"keyword\">function</span> (<span class=\"params\">data,status</span>) </span>&#123;</div><div class=\"line\">            <span class=\"keyword\">var</span> result = <span class=\"built_in\">eval</span>(<span class=\"string\">\"(\"</span>+data+<span class=\"string\">\")\"</span>);</div><div class=\"line\">            $(<span class=\"string\">\"#ticketInfo\"</span>).css(<span class=\"string\">\"display\"</span>,<span class=\"string\">\"block\"</span>);</div><div class=\"line\">            <span class=\"keyword\">if</span>(<span class=\"keyword\">typeof</span> (result[<span class=\"string\">\"errcode\"</span>])!=<span class=\"string\">\"undefined\"</span>)</div><div class=\"line\">            &#123;</div><div class=\"line\">                <span class=\"keyword\">var</span> errorInfo = <span class=\"string\">\"错误代码：\"</span>+result[<span class=\"string\">\"errcode\"</span>]+<span class=\"string\">\";错误信息：\"</span>+result[<span class=\"string\">\"errmsg\"</span>];</div><div class=\"line\">                $(<span class=\"string\">\"#ticketInfo\"</span>).html(errorInfo);</div><div class=\"line\">                $(<span class=\"string\">\"#getQrcodeBtn\"</span>).attr(<span class=\"string\">\"disabled\"</span>,<span class=\"string\">\"disabled\"</span>);</div><div class=\"line\">            &#125;</div><div class=\"line\">            <span class=\"keyword\">else</span></div><div class=\"line\">            &#123;</div><div class=\"line\">                <span class=\"keyword\">var</span> successInfo = <span class=\"string\">\"获取Ticket 成功，Ticket：\"</span> + result[<span class=\"string\">\"ticket\"</span>];</div><div class=\"line\">                successInfo += <span class=\"string\">\"&lt;br&gt;url:\"</span> + result[<span class=\"string\">\"url\"</span>];</div><div class=\"line\">                $(<span class=\"string\">\"#ticket\"</span>).val(result[<span class=\"string\">\"ticket\"</span>]);</div><div class=\"line\">                $(<span class=\"string\">\"#ticketInfo\"</span>).html(successInfo);</div><div class=\"line\">                $(<span class=\"string\">\"#getQrcodeBtn\"</span>).removeAttr(<span class=\"string\">\"disabled\"</span>);</div><div class=\"line\">            &#125;</div><div class=\"line\">        &#125;</div><div class=\"line\">    );</div><div class=\"line\">&#125;</div></pre></td></tr></table></figure>\n<p>服务器端进行转发的PHP代码如下：</p>\n<figure class=\"highlight php\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div><div class=\"line\">6</div><div class=\"line\">7</div><div class=\"line\">8</div><div class=\"line\">9</div><div class=\"line\">10</div><div class=\"line\">11</div><div class=\"line\">12</div><div class=\"line\">13</div><div class=\"line\">14</div><div class=\"line\">15</div><div class=\"line\">16</div><div class=\"line\">17</div><div class=\"line\">18</div><div class=\"line\">19</div><div class=\"line\">20</div><div class=\"line\">21</div><div class=\"line\">22</div><div class=\"line\">23</div><div class=\"line\">24</div><div class=\"line\">25</div><div class=\"line\">26</div><div class=\"line\">27</div></pre></td><td class=\"code\"><pre><div class=\"line\">$access_token = $_GET[<span class=\"string\">\"access_token\"</span>];</div><div class=\"line\">$api_url = <span class=\"string\">\"https://api.weixin.qq.com/cgi-bin/qrcode/create?access_token=&#123;$access_token&#125;\"</span>;</div><div class=\"line\">$qrcode_type = $_POST[<span class=\"string\">\"qrcode_type\"</span>];</div><div class=\"line\">$qrcode_scene_id = (int)$_POST[<span class=\"string\">\"qrcode_scene_id\"</span>];</div><div class=\"line\">$qrcode_array = <span class=\"keyword\">array</span>();</div><div class=\"line\"><span class=\"keyword\">if</span>($qrcode_type == <span class=\"string\">\"QR_SCENE\"</span>)</div><div class=\"line\">&#123;</div><div class=\"line\">    $qrcode_array[<span class=\"string\">\"expire_seconds\"</span>] = <span class=\"number\">604800</span>; <span class=\"comment\">//七天</span></div><div class=\"line\">    $qrcode_array[<span class=\"string\">\"action_name\"</span>] = <span class=\"string\">\"QR_SCENE\"</span>;</div><div class=\"line\">&#125;</div><div class=\"line\"><span class=\"keyword\">else</span></div><div class=\"line\">&#123;</div><div class=\"line\">    $qrcode_array[<span class=\"string\">\"action_name\"</span>] = <span class=\"string\">\"QR_LIMIT_SCENE\"</span>;</div><div class=\"line\">&#125;</div><div class=\"line\"></div><div class=\"line\">$qrcode_array[<span class=\"string\">\"action_info\"</span>][<span class=\"string\">\"scene\"</span>][<span class=\"string\">\"scene_id\"</span>] = $qrcode_scene_id;</div><div class=\"line\">$qrcode_json = json_encode($qrcode_array);</div><div class=\"line\">$ch = curl_init();</div><div class=\"line\">curl_setopt($ch,CURLOPT_URL,$api_url);</div><div class=\"line\">curl_setopt($ch,CURLOPT_RETURNTRANSFER,<span class=\"number\">1</span>);</div><div class=\"line\">curl_setopt($ch, CURLOPT_SSL_VERIFYPEER, <span class=\"keyword\">false</span>);</div><div class=\"line\">curl_setopt($ch, CURLOPT_SSL_VERIFYHOST, <span class=\"keyword\">false</span>);</div><div class=\"line\">curl_setopt($ch, CURLOPT_POST, <span class=\"number\">1</span>);</div><div class=\"line\">curl_setopt($ch, CURLOPT_POSTFIELDS, $qrcode_json);</div><div class=\"line\">$json_result = curl_exec($ch);</div><div class=\"line\">curl_close($ch);</div><div class=\"line\"><span class=\"keyword\">echo</span> $json_result;</div></pre></td></tr></table></figure>\n<p>之后，可以通过Ticket换取二维码，JS代码如下：</p>\n<figure class=\"highlight javascript\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div><div class=\"line\">6</div><div class=\"line\">7</div></pre></td><td class=\"code\"><pre><div class=\"line\"><span class=\"function\"><span class=\"keyword\">function</span> <span class=\"title\">getQrcode</span>(<span class=\"params\"></span>)</span></div><div class=\"line\">&#123;</div><div class=\"line\">    <span class=\"keyword\">var</span> ticket = $(<span class=\"string\">\"#ticket\"</span>).val();</div><div class=\"line\">    <span class=\"keyword\">var</span> date = <span class=\"keyword\">new</span> <span class=\"built_in\">Date</span>();</div><div class=\"line\">    <span class=\"keyword\">var</span> url = <span class=\"string\">\"qrcode_manage.php?ticket=\"</span>+ticket+<span class=\"string\">\"&amp;time=\"</span>+date.getTime();</div><div class=\"line\">    $(<span class=\"string\">\"#qrcode\"</span>).attr(<span class=\"string\">\"src\"</span>,<span class=\"string\">\"qrcode_manage.php?ticket=\"</span>+ticket+<span class=\"string\">\"&amp;time=\"</span>+date.getTime());</div><div class=\"line\">&#125;</div></pre></td></tr></table></figure>\n<p>服务器端进行转发的PHP代码如下：</p>\n<figure class=\"highlight php\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div><div class=\"line\">6</div><div class=\"line\">7</div><div class=\"line\">8</div><div class=\"line\">9</div><div class=\"line\">10</div></pre></td><td class=\"code\"><pre><div class=\"line\">$ticket = $_GET[<span class=\"string\">\"ticket\"</span>];</div><div class=\"line\">$api_url = <span class=\"string\">\"https://mp.weixin.qq.com/cgi-bin/showqrcode?ticket=&#123;$ticket&#125;\"</span>;</div><div class=\"line\">$ch = curl_init();</div><div class=\"line\">curl_setopt($ch,CURLOPT_URL,$api_url);</div><div class=\"line\">curl_setopt($ch,CURLOPT_RETURNTRANSFER,<span class=\"number\">1</span>);</div><div class=\"line\">curl_setopt($ch, CURLOPT_SSL_VERIFYPEER, <span class=\"keyword\">false</span>);</div><div class=\"line\">curl_setopt($ch, CURLOPT_SSL_VERIFYHOST, <span class=\"keyword\">false</span>);</div><div class=\"line\">$qrcode_result = curl_exec($ch);</div><div class=\"line\">curl_close($ch);</div><div class=\"line\"><span class=\"keyword\">echo</span> $qrcode_result;</div></pre></td></tr></table></figure>\n<p>实现效果可访问：</p>\n<p><a href=\"http://leo07.sinaapp.com/qrcode_manage.html\" target=\"_blank\" rel=\"external\">http://leo07.sinaapp.com/qrcode_manage.html</a></p>\n","excerpt":"","more":"<p>配置带参数的二维码同样需要先获取Access Token，获取方法在 <em>微信公众平台自定义菜单配置工具的实现</em> 一文中有描述。</p>\n<p>利用获取到的Access Token，可以创建二维码的Ticket。通过POST方法向服务器提交相关信息，JS代码如下：</p>\n<figure class=\"highlight javascript\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div><div class=\"line\">6</div><div class=\"line\">7</div><div class=\"line\">8</div><div class=\"line\">9</div><div class=\"line\">10</div><div class=\"line\">11</div><div class=\"line\">12</div><div class=\"line\">13</div><div class=\"line\">14</div><div class=\"line\">15</div><div class=\"line\">16</div><div class=\"line\">17</div><div class=\"line\">18</div><div class=\"line\">19</div><div class=\"line\">20</div><div class=\"line\">21</div><div class=\"line\">22</div><div class=\"line\">23</div><div class=\"line\">24</div><div class=\"line\">25</div><div class=\"line\">26</div><div class=\"line\">27</div><div class=\"line\">28</div><div class=\"line\">29</div><div class=\"line\">30</div></pre></td><td class=\"code\"><pre><div class=\"line\"><span class=\"function\"><span class=\"keyword\">function</span> <span class=\"title\">getTicket</span>(<span class=\"params\"></span>)</div><div class=\"line\"></span>&#123;</div><div class=\"line\">    <span class=\"keyword\">var</span> url = <span class=\"string\">\"qrcode_manage.php?access_token=\"</span>+$(<span class=\"string\">\"#accessToken\"</span>).val();</div><div class=\"line\">    <span class=\"keyword\">var</span> qrcode_type = $(<span class=\"string\">\"#qrType\"</span>).val();</div><div class=\"line\">    <span class=\"keyword\">var</span> qrcode_scene_id = $(<span class=\"string\">\"#qrSceneId\"</span>).val();</div><div class=\"line\">    $.post(url,</div><div class=\"line\">        &#123;</div><div class=\"line\">            <span class=\"string\">\"qrcode_type\"</span>:qrcode_type,</div><div class=\"line\">            <span class=\"string\">\"qrcode_scene_id\"</span>:qrcode_scene_id</div><div class=\"line\">        &#125;,</div><div class=\"line\">        <span class=\"function\"><span class=\"keyword\">function</span> (<span class=\"params\">data,status</span>) </span>&#123;</div><div class=\"line\">            <span class=\"keyword\">var</span> result = <span class=\"built_in\">eval</span>(<span class=\"string\">\"(\"</span>+data+<span class=\"string\">\")\"</span>);</div><div class=\"line\">            $(<span class=\"string\">\"#ticketInfo\"</span>).css(<span class=\"string\">\"display\"</span>,<span class=\"string\">\"block\"</span>);</div><div class=\"line\">            <span class=\"keyword\">if</span>(<span class=\"keyword\">typeof</span> (result[<span class=\"string\">\"errcode\"</span>])!=<span class=\"string\">\"undefined\"</span>)</div><div class=\"line\">            &#123;</div><div class=\"line\">                <span class=\"keyword\">var</span> errorInfo = <span class=\"string\">\"错误代码：\"</span>+result[<span class=\"string\">\"errcode\"</span>]+<span class=\"string\">\";错误信息：\"</span>+result[<span class=\"string\">\"errmsg\"</span>];</div><div class=\"line\">                $(<span class=\"string\">\"#ticketInfo\"</span>).html(errorInfo);</div><div class=\"line\">                $(<span class=\"string\">\"#getQrcodeBtn\"</span>).attr(<span class=\"string\">\"disabled\"</span>,<span class=\"string\">\"disabled\"</span>);</div><div class=\"line\">            &#125;</div><div class=\"line\">            <span class=\"keyword\">else</span></div><div class=\"line\">            &#123;</div><div class=\"line\">                <span class=\"keyword\">var</span> successInfo = <span class=\"string\">\"获取Ticket 成功，Ticket：\"</span> + result[<span class=\"string\">\"ticket\"</span>];</div><div class=\"line\">                successInfo += <span class=\"string\">\"&lt;br&gt;url:\"</span> + result[<span class=\"string\">\"url\"</span>];</div><div class=\"line\">                $(<span class=\"string\">\"#ticket\"</span>).val(result[<span class=\"string\">\"ticket\"</span>]);</div><div class=\"line\">                $(<span class=\"string\">\"#ticketInfo\"</span>).html(successInfo);</div><div class=\"line\">                $(<span class=\"string\">\"#getQrcodeBtn\"</span>).removeAttr(<span class=\"string\">\"disabled\"</span>);</div><div class=\"line\">            &#125;</div><div class=\"line\">        &#125;</div><div class=\"line\">    );</div><div class=\"line\">&#125;</div></pre></td></tr></table></figure>\n<p>服务器端进行转发的PHP代码如下：</p>\n<figure class=\"highlight php\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div><div class=\"line\">6</div><div class=\"line\">7</div><div class=\"line\">8</div><div class=\"line\">9</div><div class=\"line\">10</div><div class=\"line\">11</div><div class=\"line\">12</div><div class=\"line\">13</div><div class=\"line\">14</div><div class=\"line\">15</div><div class=\"line\">16</div><div class=\"line\">17</div><div class=\"line\">18</div><div class=\"line\">19</div><div class=\"line\">20</div><div class=\"line\">21</div><div class=\"line\">22</div><div class=\"line\">23</div><div class=\"line\">24</div><div class=\"line\">25</div><div class=\"line\">26</div><div class=\"line\">27</div></pre></td><td class=\"code\"><pre><div class=\"line\">$access_token = $_GET[<span class=\"string\">\"access_token\"</span>];</div><div class=\"line\">$api_url = <span class=\"string\">\"https://api.weixin.qq.com/cgi-bin/qrcode/create?access_token=&#123;$access_token&#125;\"</span>;</div><div class=\"line\">$qrcode_type = $_POST[<span class=\"string\">\"qrcode_type\"</span>];</div><div class=\"line\">$qrcode_scene_id = (int)$_POST[<span class=\"string\">\"qrcode_scene_id\"</span>];</div><div class=\"line\">$qrcode_array = <span class=\"keyword\">array</span>();</div><div class=\"line\"><span class=\"keyword\">if</span>($qrcode_type == <span class=\"string\">\"QR_SCENE\"</span>)</div><div class=\"line\">&#123;</div><div class=\"line\">    $qrcode_array[<span class=\"string\">\"expire_seconds\"</span>] = <span class=\"number\">604800</span>; <span class=\"comment\">//七天</span></div><div class=\"line\">    $qrcode_array[<span class=\"string\">\"action_name\"</span>] = <span class=\"string\">\"QR_SCENE\"</span>;</div><div class=\"line\">&#125;</div><div class=\"line\"><span class=\"keyword\">else</span></div><div class=\"line\">&#123;</div><div class=\"line\">    $qrcode_array[<span class=\"string\">\"action_name\"</span>] = <span class=\"string\">\"QR_LIMIT_SCENE\"</span>;</div><div class=\"line\">&#125;</div><div class=\"line\"></div><div class=\"line\">$qrcode_array[<span class=\"string\">\"action_info\"</span>][<span class=\"string\">\"scene\"</span>][<span class=\"string\">\"scene_id\"</span>] = $qrcode_scene_id;</div><div class=\"line\">$qrcode_json = json_encode($qrcode_array);</div><div class=\"line\">$ch = curl_init();</div><div class=\"line\">curl_setopt($ch,CURLOPT_URL,$api_url);</div><div class=\"line\">curl_setopt($ch,CURLOPT_RETURNTRANSFER,<span class=\"number\">1</span>);</div><div class=\"line\">curl_setopt($ch, CURLOPT_SSL_VERIFYPEER, <span class=\"keyword\">false</span>);</div><div class=\"line\">curl_setopt($ch, CURLOPT_SSL_VERIFYHOST, <span class=\"keyword\">false</span>);</div><div class=\"line\">curl_setopt($ch, CURLOPT_POST, <span class=\"number\">1</span>);</div><div class=\"line\">curl_setopt($ch, CURLOPT_POSTFIELDS, $qrcode_json);</div><div class=\"line\">$json_result = curl_exec($ch);</div><div class=\"line\">curl_close($ch);</div><div class=\"line\"><span class=\"keyword\">echo</span> $json_result;</div></pre></td></tr></table></figure>\n<p>之后，可以通过Ticket换取二维码，JS代码如下：</p>\n<figure class=\"highlight javascript\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div><div class=\"line\">6</div><div class=\"line\">7</div></pre></td><td class=\"code\"><pre><div class=\"line\"><span class=\"function\"><span class=\"keyword\">function</span> <span class=\"title\">getQrcode</span>(<span class=\"params\"></span>)</div><div class=\"line\"></span>&#123;</div><div class=\"line\">    <span class=\"keyword\">var</span> ticket = $(<span class=\"string\">\"#ticket\"</span>).val();</div><div class=\"line\">    <span class=\"keyword\">var</span> date = <span class=\"keyword\">new</span> <span class=\"built_in\">Date</span>();</div><div class=\"line\">    <span class=\"keyword\">var</span> url = <span class=\"string\">\"qrcode_manage.php?ticket=\"</span>+ticket+<span class=\"string\">\"&amp;time=\"</span>+date.getTime();</div><div class=\"line\">    $(<span class=\"string\">\"#qrcode\"</span>).attr(<span class=\"string\">\"src\"</span>,<span class=\"string\">\"qrcode_manage.php?ticket=\"</span>+ticket+<span class=\"string\">\"&amp;time=\"</span>+date.getTime());</div><div class=\"line\">&#125;</div></pre></td></tr></table></figure>\n<p>服务器端进行转发的PHP代码如下：</p>\n<figure class=\"highlight php\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div><div class=\"line\">6</div><div class=\"line\">7</div><div class=\"line\">8</div><div class=\"line\">9</div><div class=\"line\">10</div></pre></td><td class=\"code\"><pre><div class=\"line\">$ticket = $_GET[<span class=\"string\">\"ticket\"</span>];</div><div class=\"line\">$api_url = <span class=\"string\">\"https://mp.weixin.qq.com/cgi-bin/showqrcode?ticket=&#123;$ticket&#125;\"</span>;</div><div class=\"line\">$ch = curl_init();</div><div class=\"line\">curl_setopt($ch,CURLOPT_URL,$api_url);</div><div class=\"line\">curl_setopt($ch,CURLOPT_RETURNTRANSFER,<span class=\"number\">1</span>);</div><div class=\"line\">curl_setopt($ch, CURLOPT_SSL_VERIFYPEER, <span class=\"keyword\">false</span>);</div><div class=\"line\">curl_setopt($ch, CURLOPT_SSL_VERIFYHOST, <span class=\"keyword\">false</span>);</div><div class=\"line\">$qrcode_result = curl_exec($ch);</div><div class=\"line\">curl_close($ch);</div><div class=\"line\"><span class=\"keyword\">echo</span> $qrcode_result;</div></pre></td></tr></table></figure>\n<p>实现效果可访问：</p>\n<p><a href=\"http://leo07.sinaapp.com/qrcode_manage.html\">http://leo07.sinaapp.com/qrcode_manage.html</a></p>\n"}],"PostAsset":[],"PostCategory":[{"post_id":"cj5qp2x9z0000qo89kyqnvykv","category_id":"cj5qp2xa90004qo89ds4s0jmf","_id":"cj5qp2xat000dqo89mlrcyzw1"},{"post_id":"cj5qp2xae0006qo89eb67eqeu","category_id":"cj5qp2xaq000aqo89wcm67ddq","_id":"cj5qp2xaz000jqo896m75mq3x"},{"post_id":"cj5qp2xaj0008qo89f95lqabx","category_id":"cj5qp2xav000fqo89c8ufpqb3","_id":"cj5qp2xb5000oqo89j3xe5b55"},{"post_id":"cj5qp2xap0009qo89rd82ft6v","category_id":"cj5qp2xav000fqo89c8ufpqb3","_id":"cj5qp2xbc000uqo893vumn43k"},{"post_id":"cj5qp2xb4000nqo89cxwlnnpc","category_id":"cj5qp2xaq000aqo89wcm67ddq","_id":"cj5qp2xbg000zqo895o1mpw0i"},{"post_id":"cj5qp2xas000cqo890v6zbc0w","category_id":"cj5qp2xav000fqo89c8ufpqb3","_id":"cj5qp2xbi0011qo89bbgvvdpr"},{"post_id":"cj5qp2xau000eqo8941w8nli2","category_id":"cj5qp2xav000fqo89c8ufpqb3","_id":"cj5qp2xbk0016qo89w37jw5mb"},{"post_id":"cj5qp2xaw000hqo89k7dnxb0r","category_id":"cj5qp2xbj0012qo89qc6ys3nz","_id":"cj5qp2xbo0019qo89uf6p0x8a"},{"post_id":"cj5qp2xay000iqo89nt8rh3nz","category_id":"cj5qp2xbl0017qo89frv8sl21","_id":"cj5qp2xbq001dqo89mfxl5u6u"},{"post_id":"cj5qp2xb2000mqo89iovgj9xt","category_id":"cj5qp2xbo001aqo89so29sgws","_id":"cj5qp2xbt001iqo89vdahle04"},{"post_id":"cj5qp2xb8000rqo89w7kayqmw","category_id":"cj5qp2xbq001eqo895slxnc74","_id":"cj5qp2xbv001mqo8949aycvr0"},{"post_id":"cj5qp2xbb000tqo89ajqilaw9","category_id":"cj5qp2xbo001aqo89so29sgws","_id":"cj5qp2xbz001pqo89ksgufl9h"},{"post_id":"cj5qp2xbe000xqo89n4fo61g6","category_id":"cj5qp2xbo001aqo89so29sgws","_id":"cj5qp2xc1001tqo894m36j5st"},{"post_id":"cj5qp2xa60002qo89bx7l5rno","category_id":"cj5qrukr20000ek89rvgat2pi","_id":"cj5qrukr70001ek89vbt42rj6"}],"PostTag":[{"post_id":"cj5qp2x9z0000qo89kyqnvykv","tag_id":"cj5qp2xad0005qo894k9siyj7","_id":"cj5qp2xba000sqo89um5eyqg7"},{"post_id":"cj5qp2x9z0000qo89kyqnvykv","tag_id":"cj5qp2xaq000bqo897sl9g6tr","_id":"cj5qp2xbd000wqo893vwso5r7"},{"post_id":"cj5qp2x9z0000qo89kyqnvykv","tag_id":"cj5qp2xaw000gqo893moho8pl","_id":"cj5qp2xbh0010qo89uxv88s8l"},{"post_id":"cj5qp2x9z0000qo89kyqnvykv","tag_id":"cj5qp2xb1000lqo89lr0wr4s2","_id":"cj5qp2xbj0013qo89v4a3rvtc"},{"post_id":"cj5qp2xa60002qo89bx7l5rno","tag_id":"cj5qp2xb7000qqo89a4e9zr40","_id":"cj5qp2xbk0015qo89x1d3qnb4"},{"post_id":"cj5qp2xae0006qo89eb67eqeu","tag_id":"cj5qp2xbf000yqo89lm5t83aw","_id":"cj5qp2xbq001cqo89k4isxfa5"},{"post_id":"cj5qp2xae0006qo89eb67eqeu","tag_id":"cj5qp2xbj0014qo89vc1tiedk","_id":"cj5qp2xbr001fqo894j90614k"},{"post_id":"cj5qp2xae0006qo89eb67eqeu","tag_id":"cj5qp2xbm0018qo89k6l5o4n4","_id":"cj5qp2xbr001hqo891m54py1j"},{"post_id":"cj5qp2xaj0008qo89f95lqabx","tag_id":"cj5qp2xbo001bqo8939b7a6w9","_id":"cj5qp2xbt001kqo89mkwyauao"},{"post_id":"cj5qp2xap0009qo89rd82ft6v","tag_id":"cj5qp2xbr001gqo8951bnxwvl","_id":"cj5qp2xbz001qqo89j4p03p0r"},{"post_id":"cj5qp2xap0009qo89rd82ft6v","tag_id":"cj5qp2xbv001lqo89mttac4jx","_id":"cj5qp2xc0001rqo89jqg9ocvu"},{"post_id":"cj5qp2xas000cqo890v6zbc0w","tag_id":"cj5qp2xbr001gqo8951bnxwvl","_id":"cj5qp2xc3001wqo89veiwa3xi"},{"post_id":"cj5qp2xas000cqo890v6zbc0w","tag_id":"cj5qp2xc0001sqo896h9etbks","_id":"cj5qp2xc3001xqo89lhjdl5pl"},{"post_id":"cj5qp2xas000cqo890v6zbc0w","tag_id":"cj5qp2xc1001uqo893sdexc2w","_id":"cj5qp2xc4001zqo89vnww16bz"},{"post_id":"cj5qp2xau000eqo8941w8nli2","tag_id":"cj5qp2xbr001gqo8951bnxwvl","_id":"cj5qp2xc50021qo897lnnp1p8"},{"post_id":"cj5qp2xau000eqo8941w8nli2","tag_id":"cj5qp2xc3001yqo897nv5tb3h","_id":"cj5qp2xc50022qo890e4dpl1u"},{"post_id":"cj5qp2xaw000hqo89k7dnxb0r","tag_id":"cj5qp2xc40020qo89oiyek22u","_id":"cj5qp2xc90026qo89g6y6kzln"},{"post_id":"cj5qp2xaw000hqo89k7dnxb0r","tag_id":"cj5qp2xc50023qo89psmq4fph","_id":"cj5qp2xc90027qo89fj2cc2gk"},{"post_id":"cj5qp2xaw000hqo89k7dnxb0r","tag_id":"cj5qp2xb1000lqo89lr0wr4s2","_id":"cj5qp2xc90029qo89lz92gioi"},{"post_id":"cj5qp2xay000iqo89nt8rh3nz","tag_id":"cj5qp2xc80025qo89tln0wki3","_id":"cj5qp2xca002bqo89x6b00ki7"},{"post_id":"cj5qp2xay000iqo89nt8rh3nz","tag_id":"cj5qp2xc90028qo89ne6i7cu1","_id":"cj5qp2xca002cqo89ebpxfvpi"},{"post_id":"cj5qp2xb2000mqo89iovgj9xt","tag_id":"cj5qp2xbf000yqo89lm5t83aw","_id":"cj5qp2xcc002hqo89elcsz1gc"},{"post_id":"cj5qp2xb2000mqo89iovgj9xt","tag_id":"cj5qp2xcb002dqo89clghbuzk","_id":"cj5qp2xcc002iqo89ygu10z3k"},{"post_id":"cj5qp2xb2000mqo89iovgj9xt","tag_id":"cj5qp2xbj0014qo89vc1tiedk","_id":"cj5qp2xcd002kqo89hezsgxrt"},{"post_id":"cj5qp2xb2000mqo89iovgj9xt","tag_id":"cj5qp2xb7000qqo89a4e9zr40","_id":"cj5qp2xcd002lqo892fcrba0i"},{"post_id":"cj5qp2xb4000nqo89cxwlnnpc","tag_id":"cj5qp2xbf000yqo89lm5t83aw","_id":"cj5qp2xce002nqo89o89rh80u"},{"post_id":"cj5qp2xb4000nqo89cxwlnnpc","tag_id":"cj5qp2xcc002jqo89hqu5x6rp","_id":"cj5qp2xce002oqo89nfov9f3g"},{"post_id":"cj5qp2xb8000rqo89w7kayqmw","tag_id":"cj5qp2xcd002mqo8931xvfhni","_id":"cj5qp2xcf002qqo89bzk71rar"},{"post_id":"cj5qp2xbb000tqo89ajqilaw9","tag_id":"cj5qp2xbf000yqo89lm5t83aw","_id":"cj5qp2xch002tqo89ym43c2ck"},{"post_id":"cj5qp2xbb000tqo89ajqilaw9","tag_id":"cj5qp2xcb002dqo89clghbuzk","_id":"cj5qp2xch002uqo897wb7569e"},{"post_id":"cj5qp2xbe000xqo89n4fo61g6","tag_id":"cj5qp2xbf000yqo89lm5t83aw","_id":"cj5qp2xcj002xqo89lddam36m"},{"post_id":"cj5qp2xbe000xqo89n4fo61g6","tag_id":"cj5qp2xcb002dqo89clghbuzk","_id":"cj5qp2xcj002yqo89en0frko7"},{"post_id":"cj5qp2xbe000xqo89n4fo61g6","tag_id":"cj5qp2xbj0014qo89vc1tiedk","_id":"cj5qp2xcj002zqo89gry8ykp6"},{"post_id":"cj5qp2xbe000xqo89n4fo61g6","tag_id":"cj5qp2xb7000qqo89a4e9zr40","_id":"cj5qp2xcj0030qo89v2j4678i"}],"Tag":[{"name":"c","_id":"cj5qp2xad0005qo894k9siyj7"},{"name":"buffer","_id":"cj5qp2xaq000bqo897sl9g6tr"},{"name":"LF","_id":"cj5qp2xaw000gqo893moho8pl"},{"name":"windows","_id":"cj5qp2xb1000lqo89lr0wr4s2"},{"name":"tools","_id":"cj5qp2xb7000qqo89a4e9zr40"},{"name":"php","_id":"cj5qp2xbf000yqo89lm5t83aw"},{"name":"curl","_id":"cj5qp2xbj0014qo89vc1tiedk"},{"name":"post","_id":"cj5qp2xbm0018qo89k6l5o4n4"},{"name":"echarts","_id":"cj5qp2xbo001bqo8939b7a6w9"},{"name":"javascript","_id":"cj5qp2xbr001gqo8951bnxwvl"},{"name":"math","_id":"cj5qp2xbv001lqo89mttac4jx"},{"name":"jsonp","_id":"cj5qp2xc0001sqo896h9etbks"},{"name":"cross-domain","_id":"cj5qp2xc1001uqo893sdexc2w"},{"name":"regex","_id":"cj5qp2xc3001yqo897nv5tb3h"},{"name":"git","_id":"cj5qp2xc40020qo89oiyek22u"},{"name":"server","_id":"cj5qp2xc50023qo89psmq4fph"},{"name":"node.js","_id":"cj5qp2xc80025qo89tln0wki3"},{"name":"TypeScript","_id":"cj5qp2xc90028qo89ne6i7cu1"},{"name":"wechat","_id":"cj5qp2xcb002dqo89clghbuzk"},{"name":"convert","_id":"cj5qp2xcc002jqo89hqu5x6rp"},{"name":"tcp","_id":"cj5qp2xcd002mqo8931xvfhni"}]}}