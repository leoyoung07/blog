{"meta":{"version":1,"warehouse":"2.2.0"},"models":{"Asset":[{"_id":"source/img/2016-03-30-differences-between-post-array-and-query-string-with-php-curl/1.png","path":"img/2016-03-30-differences-between-post-array-and-query-string-with-php-curl/1.png","modified":1,"renderable":0},{"_id":"source/img/2016-03-30-differences-between-post-array-and-query-string-with-php-curl/2.png","path":"img/2016-03-30-differences-between-post-array-and-query-string-with-php-curl/2.png","modified":1,"renderable":0},{"_id":"source/img/2016-03-30-differences-between-post-array-and-query-string-with-php-curl/4.png","path":"img/2016-03-30-differences-between-post-array-and-query-string-with-php-curl/4.png","modified":1,"renderable":0},{"_id":"source/img/2016-03-30-differences-between-post-array-and-query-string-with-php-curl/3.png","path":"img/2016-03-30-differences-between-post-array-and-query-string-with-php-curl/3.png","modified":1,"renderable":0},{"_id":"themes/indigo/source/icon/favicon.ico","path":"icon/favicon.ico","modified":1,"renderable":1},{"_id":"themes/indigo/source/css/style.less","path":"css/style.less","modified":1,"renderable":1},{"_id":"themes/indigo/source/img/brand_old.jpg","path":"img/brand_old.jpg","modified":1,"renderable":1},{"_id":"themes/indigo/source/img/cc.png","path":"img/cc.png","modified":1,"renderable":1},{"_id":"themes/indigo/source/img/img-err.png","path":"img/img-err.png","modified":1,"renderable":1},{"_id":"themes/indigo/source/img/brand.jpg","path":"img/brand.jpg","modified":1,"renderable":1},{"_id":"themes/indigo/source/img/avatar.jpg","path":"img/avatar.jpg","modified":1,"renderable":1},{"_id":"themes/indigo/source/js/main.min.js","path":"js/main.min.js","modified":1,"renderable":1},{"_id":"themes/indigo/source/img/img-loading.png","path":"img/img-loading.png","modified":1,"renderable":1},{"_id":"themes/indigo/source/js/main.js","path":"js/main.js","modified":1,"renderable":1},{"_id":"themes/indigo/source/img/alipay.jpg","path":"img/alipay.jpg","modified":1,"renderable":1},{"_id":"themes/indigo/source/img/wechat.jpg","path":"img/wechat.jpg","modified":1,"renderable":1},{"_id":"themes/indigo/source/js/embed.min.js","path":"js/embed.min.js","modified":1,"renderable":1},{"_id":"themes/indigo/source/js/search.js","path":"js/search.js","modified":1,"renderable":1},{"_id":"themes/indigo/source/js/search.min.js","path":"js/search.min.js","modified":1,"renderable":1},{"_id":"themes/indigo/source/js/embed.js","path":"js/embed.js","modified":1,"renderable":1},{"_id":"themes/indigo/source/css/fonts/roboto/Roboto-Bold.woff","path":"css/fonts/roboto/Roboto-Bold.woff","modified":1,"renderable":1},{"_id":"themes/indigo/source/css/fonts/roboto/Roboto-Bold.eot","path":"css/fonts/roboto/Roboto-Bold.eot","modified":1,"renderable":1},{"_id":"themes/indigo/source/css/fonts/roboto/Roboto-Bold.woff2","path":"css/fonts/roboto/Roboto-Bold.woff2","modified":1,"renderable":1},{"_id":"themes/indigo/source/css/fonts/roboto/Roboto-Light.woff","path":"css/fonts/roboto/Roboto-Light.woff","modified":1,"renderable":1},{"_id":"themes/indigo/source/css/fonts/roboto/Roboto-Light.eot","path":"css/fonts/roboto/Roboto-Light.eot","modified":1,"renderable":1},{"_id":"themes/indigo/source/css/fonts/roboto/Roboto-Light.woff2","path":"css/fonts/roboto/Roboto-Light.woff2","modified":1,"renderable":1},{"_id":"themes/indigo/source/css/fonts/roboto/Roboto-Medium.woff","path":"css/fonts/roboto/Roboto-Medium.woff","modified":1,"renderable":1},{"_id":"themes/indigo/source/css/fonts/roboto/Roboto-Medium.woff2","path":"css/fonts/roboto/Roboto-Medium.woff2","modified":1,"renderable":1},{"_id":"themes/indigo/source/css/fonts/roboto/Roboto-Medium.eot","path":"css/fonts/roboto/Roboto-Medium.eot","modified":1,"renderable":1},{"_id":"themes/indigo/source/css/fonts/roboto/Roboto-Regular.woff2","path":"css/fonts/roboto/Roboto-Regular.woff2","modified":1,"renderable":1},{"_id":"themes/indigo/source/css/fonts/roboto/Roboto-Thin.eot","path":"css/fonts/roboto/Roboto-Thin.eot","modified":1,"renderable":1},{"_id":"themes/indigo/source/css/fonts/roboto/Roboto-Thin.woff","path":"css/fonts/roboto/Roboto-Thin.woff","modified":1,"renderable":1},{"_id":"themes/indigo/source/css/fonts/roboto/Roboto-Regular.eot","path":"css/fonts/roboto/Roboto-Regular.eot","modified":1,"renderable":1},{"_id":"themes/indigo/source/css/fonts/roboto/Roboto-Thin.woff2","path":"css/fonts/roboto/Roboto-Thin.woff2","modified":1,"renderable":1},{"_id":"themes/indigo/source/css/fonts/roboto/Roboto-Regular.woff","path":"css/fonts/roboto/Roboto-Regular.woff","modified":1,"renderable":1},{"_id":"themes/indigo/source/css/fonts/fontawesome/fontawesome-webfont.woff","path":"css/fonts/fontawesome/fontawesome-webfont.woff","modified":1,"renderable":1},{"_id":"themes/indigo/source/css/fonts/roboto/Roboto-Bold.ttf","path":"css/fonts/roboto/Roboto-Bold.ttf","modified":1,"renderable":1},{"_id":"themes/indigo/source/css/fonts/roboto/Roboto-Light.ttf","path":"css/fonts/roboto/Roboto-Light.ttf","modified":1,"renderable":1},{"_id":"themes/indigo/source/css/fonts/roboto/Roboto-Medium.ttf","path":"css/fonts/roboto/Roboto-Medium.ttf","modified":1,"renderable":1},{"_id":"themes/indigo/source/css/fonts/roboto/Roboto-Regular.ttf","path":"css/fonts/roboto/Roboto-Regular.ttf","modified":1,"renderable":1},{"_id":"themes/indigo/source/css/fonts/fontawesome/fontawesome-webfont.woff2","path":"css/fonts/fontawesome/fontawesome-webfont.woff2","modified":1,"renderable":1},{"_id":"themes/indigo/source/css/fonts/roboto/Roboto-Thin.ttf","path":"css/fonts/roboto/Roboto-Thin.ttf","modified":1,"renderable":1},{"_id":"themes/indigo/source/css/fonts/fontawesome/fontawesome-webfont.ttf","path":"css/fonts/fontawesome/fontawesome-webfont.ttf","modified":1,"renderable":1},{"_id":"themes/indigo/source/css/fonts/fontawesome/FontAwesome.otf","path":"css/fonts/fontawesome/FontAwesome.otf","modified":1,"renderable":1},{"_id":"themes/indigo/source/css/fonts/fontawesome/fontawesome-webfont.eot","path":"css/fonts/fontawesome/fontawesome-webfont.eot","modified":1,"renderable":1},{"_id":"themes/indigo/source/css/fonts/fontawesome/fontawesome-webfont.svg","path":"css/fonts/fontawesome/fontawesome-webfont.svg","modified":1,"renderable":1}],"Cache":[{"_id":"themes/indigo/package.json","hash":"5b007304520293ca544f482bf49007e013b8f3d3","modified":1486533360687},{"_id":"themes/indigo/README.md","hash":"1ee068cd61a6ce20d7b723070ae318119881201e","modified":1486533360044},{"_id":"themes/indigo/_config.yml","hash":"4bdd12236888f5247b9cdb14bc6f6f5c8ba5b11b","modified":1486626185000},{"_id":"themes/indigo/.editorconfig","hash":"67a03b88eadd7810f2e01866e73814074ecd3b87","modified":1486533360033},{"_id":"source/_posts/dev-php-extension-in-c-2.md","hash":"daab001f9dd12df4e930b4d1f1a0dec9929891b0","modified":1486531918771},{"_id":"source/_posts/c-getch-getchar.md","hash":"3c47399e22c78a3a57105b8d3b7d04137590a607","modified":1486531876424},{"_id":"source/_posts/cloud-clipboard-based-on-lan.md","hash":"b636d9b0311b68fb662ce05e803b903b3ccbf7bb","modified":1486531962297},{"_id":"source/_posts/dev-php-extension-in-c-1.md","hash":"c2b6795719ee76638759f175223233437b043261","modified":1486531903968},{"_id":"source/_posts/git-server-on-windows.md","hash":"387f6b2c0c983397dbee117948e3428d73b7a6c6","modified":1486531832071},{"_id":"source/_posts/differences-between-post-array-and-query-string-with-php-curl.md","hash":"3a565a648f0c6dfb68ec39a8d409678a4385c87a","modified":1486549339767},{"_id":"source/_posts/javascript-get-url-search-params.md","hash":"689141a03ef3cc6fed24eea4e3186b88b7da0b7b","modified":1486531813482},{"_id":"source/_posts/mod-and-rem-in-javascript.md","hash":"b6228e1cf222be59430dd69409f31916bbb7f1c7","modified":1486531890083},{"_id":"source/_posts/nginx-multi-site.md","hash":"8d14a55fe9895b590f9871de3f7da1084d2b944b","modified":1486531950081},{"_id":"source/_posts/mvvm-light-dev-1.md","hash":"46396ced360cd0a8cb0879e310d6c5d6c5df2444","modified":1486531936323},{"_id":"source/_posts/wechat-auth-get-user-info.md","hash":"a26282de5dfaa0557efcbb843dbb7b0a48bda0bf","modified":1486531786773},{"_id":"source/_posts/number-to-excel-letter.md","hash":"afac95e784d48530654769a24ee6a2a606eee956","modified":1486532390350},{"_id":"source/_posts/wechat-qr-code-manage.md","hash":"c5a6c7d28fbc09604b77465edd3283befabcdeab","modified":1486531760565},{"_id":"source/categories/index.md","hash":"cf66d0080df11b8d38f4506e3f50b57c735a8624","modified":1486530660000},{"_id":"source/_posts/jsonp-and-cross-domain.md","hash":"81f729ddf2177da5899b2e09433356a6dea20106","modified":1486531863393},{"_id":"source/_posts/wechat-button-manage.md","hash":"4c4c74d8f11db0b5ff0dc4f06bd6645643f20289","modified":1486531736199},{"_id":"source/tags/index.md","hash":"5742bfda2f05ed6a6fca513ec4d6ba134476bfc5","modified":1486530594304},{"_id":"themes/indigo/layout/category.ejs","hash":"e5ba5cc2e092c199285b8097ef12ffe70bf84c91","modified":1486533360588},{"_id":"themes/indigo/layout/archive.ejs","hash":"6897178ba358379d6a4b7c0ba1bc2ab97ad5303a","modified":1486533360559},{"_id":"themes/indigo/layout/categories.ejs","hash":"62845655a74a428c975c2781666741ad38e96425","modified":1486533360578},{"_id":"themes/indigo/layout/index.ejs","hash":"772c1985c7743e101598b4eddc253f9174c5605b","modified":1486533360601},{"_id":"themes/indigo/layout/tag.ejs","hash":"90a231dea3a364b329a740e5d6c49c8cf5664fe9","modified":1486533360661},{"_id":"themes/indigo/layout/tags.ejs","hash":"c67269471388d755559a0855afbf7d0a2f8d2459","modified":1486533360679},{"_id":"themes/indigo/scripts/plugins.js","hash":"93dc7299cc41f52d64b94122fafa2a6a87f80f08","modified":1486533360708},{"_id":"themes/indigo/layout/layout.ejs","hash":"770af84fff104c398ce8b6c995130cddd3e9a1e9","modified":1486533360610},{"_id":"source/img/2016-03-30-differences-between-post-array-and-query-string-with-php-curl/1.png","hash":"439df20f130d5e6560b1ba8d9fb7039a93fc8293","modified":1461813117000},{"_id":"source/img/2016-03-30-differences-between-post-array-and-query-string-with-php-curl/2.png","hash":"685fe404c06f4e82f67ff77a7442a739f1de9723","modified":1461813117000},{"_id":"themes/indigo/layout/post.ejs","hash":"efc3352828351f8574c51e8a93dc56c66660c3b1","modified":1486533360652},{"_id":"themes/indigo/layout/_partial/after-footer.ejs","hash":"1351dbfca311f0d50a939f9e1a91c4f65bbcdf5f","modified":1486533360061},{"_id":"source/img/2016-03-30-differences-between-post-array-and-query-string-with-php-curl/4.png","hash":"07635e22149b6a752b1547ffff92cc61d03171e8","modified":1461813117000},{"_id":"source/img/2016-03-30-differences-between-post-array-and-query-string-with-php-curl/3.png","hash":"f1e5c1798851628855149268df72f6810c084626","modified":1461813117000},{"_id":"themes/indigo/layout/_partial/footer.ejs","hash":"227c3e3c26fe36fa0cfdae79c65930473e90f150","modified":1486533360098},{"_id":"themes/indigo/layout/_partial/archive.ejs","hash":"c294c98617ce14082f9b3d5eec83328f480f5597","modified":1486533360085},{"_id":"themes/indigo/layout/_partial/header.ejs","hash":"b741f288646b26325be55a79a30b61399a72328e","modified":1486533360169},{"_id":"themes/indigo/layout/page.ejs","hash":"567c42b978da4c39b8b4982df19b940c26bc32a4","modified":1486533360636},{"_id":"themes/indigo/layout/_partial/loading.ejs","hash":"8b3e037dd5f3d4564012689c5cd6f63caf73df0f","modified":1486444638140},{"_id":"themes/indigo/layout/_partial/index-item.ejs","hash":"302f72be03dceff935ba818870b9fedcdf855c94","modified":1486533360201},{"_id":"themes/indigo/layout/_partial/head.ejs","hash":"eb25d46668f84ed4209596be674b3146c86f8c95","modified":1486533360152},{"_id":"themes/indigo/layout/_partial/menu.ejs","hash":"95fd5c5f838a05a7533b0a7947e434a4bafefdb9","modified":1486533360229},{"_id":"themes/indigo/layout/_partial/paginator.ejs","hash":"13952250463f70d1c1bbbfdd7f4ee8160dd6d99b","modified":1486533360240},{"_id":"themes/indigo/layout/_partial/search.ejs","hash":"752109904304fdb8e988ee1254df2af9c0701466","modified":1486533360519},{"_id":"themes/indigo/layout/_partial/post.ejs","hash":"ee9eec3c29e8d089deb00579d82b07a4d26b2a8f","modified":1486533360380},{"_id":"themes/indigo/source/icon/favicon.ico","hash":"ba13e10002c3454a01e8fe16c1223c313d1483a2","modified":1486473766000},{"_id":"themes/indigo/source/css/style.less","hash":"2235bfc5fcde90ca8dfa7e299b984b2bb98cf5e7","modified":1486533361138},{"_id":"themes/indigo/layout/_partial/script.ejs","hash":"102db1c3f463d8e075ef40e3003247f2bd24da9c","modified":1486533360511},{"_id":"themes/indigo/source/img/brand_old.jpg","hash":"0e237f1b433851c156e1f1cdaeb044054b3b9879","modified":1486444639104},{"_id":"themes/indigo/source/img/cc.png","hash":"ebce75a62b40976a72d43f0bd937d859ac24d87c","modified":1486444639105},{"_id":"themes/indigo/source/img/img-err.png","hash":"23a63ea26eb3c1d5e677d9883cf36cc1a1a1228b","modified":1486444639106},{"_id":"themes/indigo/source/img/brand.jpg","hash":"f4605bacbcbe6a4d3cdb5dabb9cf9b2bf95f79d7","modified":1422889977000},{"_id":"themes/indigo/source/img/avatar.jpg","hash":"2c45df448b6eabb279c8d9a82522d9dc90c8e831","modified":1486533403513},{"_id":"themes/indigo/layout/_partial/tags-bar.ejs","hash":"d7d49a92e28d97b1b5f2ab7c0d1a457c5b2c8f4c","modified":1486533360539},{"_id":"themes/indigo/source/js/main.min.js","hash":"10fc64abfd344b9bd8dc56888961a20e0edc81ae","modified":1486533361444},{"_id":"themes/indigo/source/img/img-loading.png","hash":"a9cd5cd11866824f31e3d1c5e23badfeb3f73031","modified":1486444639108},{"_id":"themes/indigo/source/js/main.js","hash":"1dc11773fd777271bb9a49cd632670b193681f31","modified":1486533361379},{"_id":"themes/indigo/source/img/alipay.jpg","hash":"695ed9d84ec5fbf72dd36131a7fd7302fefef6d3","modified":1486565853167},{"_id":"themes/indigo/source/img/wechat.jpg","hash":"e8c70682e933ad951afa813f3b2378f0a9902431","modified":1486565604693},{"_id":"themes/indigo/source/js/embed.min.js","hash":"035953ada7f0223a2692b650a8a8c1f97a1b46c8","modified":1486533361322},{"_id":"themes/indigo/source/js/search.js","hash":"e9075b0dd68bce7750fb32a1e3c46f81fdcca6f6","modified":1486533361475},{"_id":"themes/indigo/layout/_partial/plugins/duoshuo-count.ejs","hash":"56e0a83ee77c7022aad528703e848a71a185ca12","modified":1486533360287},{"_id":"themes/indigo/layout/_partial/plugins/baidu.ejs","hash":"da1355eea131952031e54c45560555e6d3aa5a33","modified":1486533360263},{"_id":"themes/indigo/source/js/search.min.js","hash":"c0c3d048af0d6b840f6f1dfda08911c7bfdb5dc1","modified":1486533361510},{"_id":"themes/indigo/layout/_partial/plugins/duoshuo-js.ejs","hash":"fedcbd48f60d516e0caab24b3fea9dfc3914ea31","modified":1486533360296},{"_id":"themes/indigo/layout/_partial/plugins/disqus.ejs","hash":"86fe837ab16cb60754b0a73bb9efa38b04f3023f","modified":1486533360276},{"_id":"themes/indigo/layout/_partial/plugins/google-analytics.ejs","hash":"b5b87761751a897949e085a8f1ace78b0b8babd5","modified":1486533360333},{"_id":"themes/indigo/layout/_partial/plugins/page-visit.ejs","hash":"bb9deb32c54ea6820f622b923e62592915e9f21f","modified":1486533360352},{"_id":"themes/indigo/layout/_partial/plugins/duoshuo.ejs","hash":"25d3e25875e5f6b5a0597896dbe800c2187d58ac","modified":1486533360317},{"_id":"themes/indigo/layout/_partial/plugins/site-visit.ejs","hash":"a2c247c2e32016563dd6a22c21474072d93f4dbd","modified":1486533360359},{"_id":"themes/indigo/layout/_partial/plugins/mathjax.ejs","hash":"dce9c8edc74342fc420ec25c94be2068d5d1c225","modified":1486533360346},{"_id":"themes/indigo/layout/_partial/plugins/tajs.ejs","hash":"ef9c77d8c6e004b014c83c5f9333e7174f8bafa3","modified":1486533360365},{"_id":"themes/indigo/layout/_partial/post/date.ejs","hash":"0ef6e022cf124b7e0cea62c922e6f0453b25041e","modified":1486533360413},{"_id":"themes/indigo/layout/_partial/post/comment.ejs","hash":"89bb301ba4c3d539eb61df33ea9e8354a9d003ce","modified":1486533360392},{"_id":"themes/indigo/layout/_partial/post/category.ejs","hash":"c08e44cbd7315dec7afb6054b04d3c7b82c3bde8","modified":1486444638304},{"_id":"themes/indigo/layout/_partial/post/copyright.ejs","hash":"ff4338860073302a2d19b2887c21a39856394ef7","modified":1486533360403},{"_id":"themes/indigo/layout/_partial/post/reward-btn.ejs","hash":"b46160005224821a439dec9f1ff183e2f66d9f4b","modified":1486533360431},{"_id":"themes/indigo/layout/_partial/post/reward.ejs","hash":"e48e275869c9b3dd9dd5313aef19e18bc6e4868c","modified":1486533360438},{"_id":"themes/indigo/layout/_partial/post/head-meta.ejs","hash":"f137c126672769e9571be2bb0a70ea8dda644b0e","modified":1486444638343},{"_id":"themes/indigo/layout/_partial/post/share-fab.ejs","hash":"2ec7de870988cfbc8ea9872cddf7e4076ac64a57","modified":1486533360448},{"_id":"themes/indigo/layout/_partial/post/nav.ejs","hash":"03719097851575a2c1bb95774058b224f6402a1f","modified":1486533360425},{"_id":"themes/indigo/layout/_partial/post/title.ejs","hash":"eaad7af7888bddd7095243a43ff38f55ad8c494a","modified":1486444638420},{"_id":"themes/indigo/layout/_partial/post/tag.ejs","hash":"412894001b1ac6e63012b26b1109a0856651c076","modified":1486533360478},{"_id":"themes/indigo/layout/_partial/post/share.ejs","hash":"7d79a67b3e5e6989f22fb0e0904fa540bfca5fcc","modified":1486533360465},{"_id":"themes/indigo/layout/_partial/post/toc.ejs","hash":"0d8f0a4ab14c227cd52802095fc4974b6a7aae67","modified":1486533360491},{"_id":"themes/indigo/source/css/_duoshuo/custom.less","hash":"4829a9e46e4287c81806a4b675446baf61469128","modified":1486533360729},{"_id":"themes/indigo/layout/_partial/post/updated.ejs","hash":"43fa8ad1f3601ae6c9440e10c2b271eb18b0929f","modified":1486533360500},{"_id":"themes/indigo/source/css/_duoshuo/embed.less","hash":"81d1eb62500b12ef975e7ea6743d738ce9100a98","modified":1486533360743},{"_id":"themes/indigo/source/css/_duoshuo/login.less","hash":"3540d01cea125952b3d191e28a754778491a2319","modified":1486533360765},{"_id":"themes/indigo/source/css/_duoshuo/dialog.less","hash":"b8ff5b1ad549031399ea1482c4ac0724d1119e97","modified":1486533360736},{"_id":"themes/indigo/source/css/_duoshuo/notify.less","hash":"b4443555ff98d14fb70d793037a28077e7e2fee9","modified":1486533360778},{"_id":"themes/indigo/source/css/_duoshuo/mixins.less","hash":"43ae6371cbd7c89575d10cce8fc25c184dedefc0","modified":1486533360772},{"_id":"themes/indigo/source/css/_duoshuo/recent-comments.less","hash":"2bc2cb483a04a0ad44dc7f3f3fe0e281c664e760","modified":1486533360785},{"_id":"themes/indigo/source/css/_duoshuo/recent-visitors.less","hash":"5307b1449d06639c8d897184599a73c737ffeed7","modified":1486533360790},{"_id":"themes/indigo/source/css/_duoshuo/global.less","hash":"78d7335c6f654d66417aa553914d25fc21368016","modified":1486533360759},{"_id":"themes/indigo/source/css/_duoshuo/thread.less","hash":"b82efa0e5a5fc8320ee847f194048c3ad00eb023","modified":1486533360805},{"_id":"themes/indigo/source/css/_partial/archives.less","hash":"382fc22cd5cc073e881768a65600d97eba9f1d21","modified":1486533360819},{"_id":"themes/indigo/source/css/_duoshuo/share.less","hash":"45816bd1b01f2fed2f180fd14620ada0b09f2598","modified":1486533360798},{"_id":"themes/indigo/source/css/_duoshuo/variables.less","hash":"e4df4f20f5117f84ae67f5cdd8182b4c033c6654","modified":1486533360811},{"_id":"themes/indigo/source/css/_partial/header.less","hash":"880b4a28e97d556ed15b07642d25115f9b6ba4f6","modified":1486533360862},{"_id":"themes/indigo/source/css/_partial/article.less","hash":"abbd2469128ccc5261ed31e9cb39026c9829b548","modified":1486533360827},{"_id":"themes/indigo/source/css/_partial/gotop.less","hash":"bad63006b3bd4849bf53ad38482af0d9971061d3","modified":1486444638739},{"_id":"themes/indigo/source/css/_partial/lightbox.less","hash":"38419aaf3c1832e84ade331f051f110fdc8b960f","modified":1486533360900},{"_id":"themes/indigo/source/css/_partial/highlight.less","hash":"99e48793dc0b4ffb66ecaf2d1315145872f9bb98","modified":1486533360875},{"_id":"themes/indigo/source/css/_partial/layout.less","hash":"f1b8784a5774e542e958704e5595006dd67878d2","modified":1486533360888},{"_id":"themes/indigo/source/css/_partial/page.less","hash":"33b0a5edcedc26a4c592c812c5785bb20d3c93db","modified":1486533360925},{"_id":"themes/indigo/source/css/_partial/loading.less","hash":"85157ddf3877b5c58e8f1d737dda3dfb1bfd540b","modified":1486533360912},{"_id":"themes/indigo/source/css/_partial/postlist.less","hash":"c954f2b3eae77ab86afc742afbfa8e0253c96a7e","modified":1486533360940},{"_id":"themes/indigo/source/css/_partial/reward.less","hash":"0ee290661ff436b6a3bc8fff99ee2ca18ab7d757","modified":1486533360956},{"_id":"themes/indigo/source/css/_partial/share.less","hash":"a683c96a59470efd35722b763c55149a46e35156","modified":1486533360986},{"_id":"themes/indigo/source/css/_partial/roboto.less","hash":"3e457942995da8840e7662fa6cb551a7e12ea294","modified":1486444638792},{"_id":"themes/indigo/source/css/_partial/search.less","hash":"dbc23e77e586ee682a21475f5eb568628ea6720f","modified":1486533360975},{"_id":"themes/indigo/source/css/_partial/tags.less","hash":"01eb7f84193180928a6ed4796ee8802f6c1628e7","modified":1486533360997},{"_id":"themes/indigo/source/js/embed.js","hash":"74d6ddb4cf412d4537f9e537cdb9d41d5fb99935","modified":1486533361193},{"_id":"themes/indigo/source/css/_partial/waves.less","hash":"a02eaa601887f947257f6016679b62dc96a61c0c","modified":1486533361021},{"_id":"themes/indigo/source/css/_partial/variable.less","hash":"f4d6f261bc20191201f494da0a4aad078064f025","modified":1486626839778},{"_id":"themes/indigo/source/css/_partial/fontawesome.less","hash":"907c10fa4388b7ae7e141b026fb98cc9f758d785","modified":1486533360850},{"_id":"themes/indigo/source/css/_duoshuo/common.less","hash":"3831573b116be85a8b61b4040073d615092a4e26","modified":1486533360721},{"_id":"themes/indigo/source/css/fonts/roboto/Roboto-Bold.woff","hash":"ee99cd87a59a9a5d4092c83232bb3eec67547425","modified":1486444638929},{"_id":"themes/indigo/source/css/fonts/roboto/Roboto-Bold.eot","hash":"a76cd602f5188b9fbd4ba7443dcb9c064e3dbf10","modified":1486444638911},{"_id":"themes/indigo/source/css/fonts/roboto/Roboto-Bold.woff2","hash":"933b866d09c2b087707a98dab64b3888865eeb96","modified":1486444638934},{"_id":"themes/indigo/source/css/fonts/roboto/Roboto-Light.woff","hash":"6300f659be9e834ab263efe2fb3c581d48b1e7b2","modified":1486444638966},{"_id":"themes/indigo/source/css/fonts/roboto/Roboto-Light.eot","hash":"42fe156996197e5eb0c0264c5d1bb3b4681f4595","modified":1486444638950},{"_id":"themes/indigo/source/css/fonts/roboto/Roboto-Light.woff2","hash":"bbdc28b887400fcb340b504ec2904993af42a5d7","modified":1486444638973},{"_id":"themes/indigo/source/css/fonts/roboto/Roboto-Medium.woff","hash":"d45f84922131364989ad6578c7a06b6b4fc22c34","modified":1486444639006},{"_id":"themes/indigo/source/css/fonts/roboto/Roboto-Medium.woff2","hash":"6cc1b73571af9e827c4e7e91418f476703cd4c4b","modified":1486444639013},{"_id":"themes/indigo/source/css/fonts/roboto/Roboto-Medium.eot","hash":"1517f4b6e1c5d0e5198f937557253aac8fab0416","modified":1486444638989},{"_id":"themes/indigo/source/css/fonts/roboto/Roboto-Regular.woff2","hash":"ed1558b0541f5e01ce48c7db1588371b990eec19","modified":1486444639052},{"_id":"themes/indigo/source/css/fonts/roboto/Roboto-Thin.eot","hash":"0790a51a848dbe7292c98f9d0459218bf1a8ffdd","modified":1486444639057},{"_id":"themes/indigo/source/css/fonts/roboto/Roboto-Thin.woff","hash":"fbc3e71d456c96667d8082ab910e3946ef89240b","modified":1486444639073},{"_id":"themes/indigo/source/css/fonts/roboto/Roboto-Regular.eot","hash":"77ae3e980ec03863ebe2587a8ef9ddfd06941db0","modified":1486444639029},{"_id":"themes/indigo/source/css/fonts/roboto/Roboto-Thin.woff2","hash":"2449e3dac5ddb7c3da8bb07450493b62d052758c","modified":1486444639080},{"_id":"themes/indigo/source/css/fonts/roboto/Roboto-Regular.woff","hash":"74734dde8d94e7268170f9b994dedfbdcb5b3a15","modified":1486444639045},{"_id":"themes/indigo/source/css/fonts/fontawesome/fontawesome-webfont.woff","hash":"28b782240b3e76db824e12c02754a9731a167527","modified":1486533361122},{"_id":"themes/indigo/source/css/fonts/roboto/Roboto-Bold.ttf","hash":"47327df0f35e7cd7c8645874897a7449697544ae","modified":1486444638923},{"_id":"themes/indigo/source/css/fonts/roboto/Roboto-Light.ttf","hash":"e321c183e2b75ee19813892b7bac8d7c411cb88a","modified":1486444638959},{"_id":"themes/indigo/source/css/fonts/roboto/Roboto-Medium.ttf","hash":"6060ca726b9760b76f7c347dce9d2fa1fe42ec92","modified":1486444639001},{"_id":"themes/indigo/source/css/fonts/roboto/Roboto-Regular.ttf","hash":"824b5480c977a8166e177e5357d13164ccc45f47","modified":1486444639038},{"_id":"themes/indigo/source/css/fonts/fontawesome/fontawesome-webfont.woff2","hash":"d6f48cba7d076fb6f2fd6ba993a75b9dc1ecbf0c","modified":1486533361131},{"_id":"themes/indigo/source/css/fonts/roboto/Roboto-Thin.ttf","hash":"173ed64528b4d010a76d8d38deb1d7e7eed58eda","modified":1486444639067},{"_id":"themes/indigo/source/css/fonts/fontawesome/fontawesome-webfont.ttf","hash":"13b1eab65a983c7a73bc7997c479d66943f7c6cb","modified":1486533361105},{"_id":"themes/indigo/source/css/fonts/fontawesome/FontAwesome.otf","hash":"048707bc52ac4b6563aaa383bfe8660a0ddc908c","modified":1486533361038},{"_id":"themes/indigo/source/css/fonts/fontawesome/fontawesome-webfont.eot","hash":"d980c2ce873dc43af460d4d572d441304499f400","modified":1486533361053},{"_id":"themes/indigo/source/css/fonts/fontawesome/fontawesome-webfont.svg","hash":"b5483b11f8ba213e733b5b8af9927a04fec996f6","modified":1486533361086},{"_id":"public/atom.xml","hash":"74550ce5d94acd39d0277210a8462f36eb3fe2c4","modified":1486635292676},{"_id":"public/content.json","hash":"787e6004cb1acaf0cfbe5227cadef298ec6d4c42","modified":1486635293647},{"_id":"public/categories/PHP-Extension-Dev/index.html","hash":"0a73654dc6585f3b58973ec9c94c4e479f62d31e","modified":1486635293728},{"_id":"public/categories/C/index.html","hash":"a5033e5a37f4c0567f9e35f62138d153f9d2c979","modified":1486635293815},{"_id":"public/categories/L-Clipboard/index.html","hash":"dd0550e50bc074f6fc78c6dd9ca82566211c7ad4","modified":1486635293817},{"_id":"public/categories/Git/index.html","hash":"6640589c3f727365fb0153f04e48940d76477574","modified":1486635293817},{"_id":"public/categories/PHP/index.html","hash":"3eacf0c731a75a43c0112ff4afd9c33afa8f8883","modified":1486635293817},{"_id":"public/categories/JavaScript/index.html","hash":"30a0e5d50f189730fface827b21d80aa48c35d40","modified":1486635293817},{"_id":"public/categories/Nginx/index.html","hash":"fbb906455cd8e7375a135db907c16cf0928009a7","modified":1486635293817},{"_id":"public/categories/MVVM-Light-Dev/index.html","hash":"de3578430be838b36bff7adb702d17e66177768e","modified":1486635293818},{"_id":"public/categories/WeChat/index.html","hash":"93bb5419a6bed832770dc44537e8cfbc825324ea","modified":1486635293818},{"_id":"public/archives/page/2/index.html","hash":"9f8e70b280a5fa5f0eeb9f952c9a5a64cf9f726e","modified":1486635293818},{"_id":"public/archives/2015/index.html","hash":"a6304a45b54497750bd5e3823dcbeb507a11c43c","modified":1486635293818},{"_id":"public/archives/2015/12/index.html","hash":"51eba35a9a089b10104b05be056213273b8dabc5","modified":1486635293818},{"_id":"public/archives/2016/page/2/index.html","hash":"f0541f375d98e458af990ddc3d3173ac5a73ea61","modified":1486635293819},{"_id":"public/archives/2016/03/index.html","hash":"f876ab7904b7aa402f4a97790225b98f49683e3b","modified":1486635293819},{"_id":"public/archives/2016/04/index.html","hash":"6769c6da5ed2352e4680a1fac1693ed6e6c293df","modified":1486635293819},{"_id":"public/archives/2016/06/index.html","hash":"1d9c2a28f23ea41314705678adc74dd563a21712","modified":1486635293819},{"_id":"public/archives/2016/08/index.html","hash":"ec489061c5f88ccdc05984e31c9530aeebe52c79","modified":1486635293819},{"_id":"public/archives/2016/09/index.html","hash":"43cf3743c58d57a1e0e8928cf6435fd524a5eb3f","modified":1486635293819},{"_id":"public/archives/2016/12/index.html","hash":"567eecd553dfa146db9d900fcaeb3716fa188910","modified":1486635293819},{"_id":"public/archives/2016/11/index.html","hash":"fc76a2130cb5f03d352c79be88eca19d21f520c0","modified":1486635293819},{"_id":"public/tags/c/index.html","hash":"5b3261983bea691df571efa0e4a66c5365961839","modified":1486635293819},{"_id":"public/tags/buffer/index.html","hash":"34c14ccb09088e341d9f49226e8b09952169672a","modified":1486635293819},{"_id":"public/tags/LF/index.html","hash":"d3e6372698352501b8470b5849d01e0e75d41c5f","modified":1486635293819},{"_id":"public/tags/windows/index.html","hash":"ff6a0d25e2e00a2e19a70018542031d3c1977dca","modified":1486635293820},{"_id":"public/tags/tcp/index.html","hash":"58be51356b5fe89ce22573113f1c7fc438311ca4","modified":1486635293820},{"_id":"public/tags/udp/index.html","hash":"25edaf224bea41b72ba67bad444f50ebb7cd2ad6","modified":1486635293820},{"_id":"public/tags/git/index.html","hash":"0a5766f2adaadb607f89d93496cfdda48e17b6b6","modified":1486635293820},{"_id":"public/tags/server/index.html","hash":"18034d1d11d2d001bf2f237d95c1859cb75772b0","modified":1486635293820},{"_id":"public/tags/post/index.html","hash":"1c394894bbd984458744c0e2ac2750c1ad31be9e","modified":1486635293820},{"_id":"public/tags/regex/index.html","hash":"86eee5317bd1adf5b3def32dcaebb0a7bc27d679","modified":1486635293820},{"_id":"public/tags/math/index.html","hash":"354704264873bef23f3621141e986278e83ee0a3","modified":1486635293820},{"_id":"public/tags/mvvm/index.html","hash":"a0b2a411c14a0397c8e6837bf72f2e4b4b3a275a","modified":1486635293820},{"_id":"public/tags/wpf/index.html","hash":"2b2310d74648f36f5c997f30e99044c018e571aa","modified":1486635293821},{"_id":"public/tags/convert/index.html","hash":"d133a9c855ad4e54fd454c5ec7e368b97aa98ab1","modified":1486635293821},{"_id":"public/categories/index.html","hash":"23303c213107a9a9f82f3efd3f9ac06838a3cea6","modified":1486635293821},{"_id":"public/tags/index.html","hash":"df8b6bf5ae36d813e50e24c514f0df0ee17d6a24","modified":1486635293821},{"_id":"public/2016/12/04/cloud-clipboard-based-on-lan/index.html","hash":"25ad074f220e53d1021a79693257f33ac16888e8","modified":1486635293822},{"_id":"public/2016/11/21/nginx-multi-site/index.html","hash":"7444cbb2d87cb887011a04a70f84166907651880","modified":1486635293822},{"_id":"public/2016/09/10/mvvm-light-dev-1/index.html","hash":"542c0683625560acef32a9df0667550571d4ff1f","modified":1486635293822},{"_id":"public/2016/08/30/dev-php-extension-in-c-2/index.html","hash":"b50bb5f8d4276226a407aad65c70406bbce7d498","modified":1486635293822},{"_id":"public/2016/08/30/dev-php-extension-in-c-1/index.html","hash":"b54b17d80f80367e5cd497e1b21f79fcc7638c8f","modified":1486635293822},{"_id":"public/2016/06/07/mod-and-rem-in-javascript/index.html","hash":"edf863c1966f883bfd4d73f47fd51cb70ba02143","modified":1486635293822},{"_id":"public/2016/04/28/c-getch-getchar/index.html","hash":"97cc887d07d8b187d96174e36c9b166a75b6267d","modified":1486635293822},{"_id":"public/2016/04/01/jsonp-and-cross-domain/index.html","hash":"04a95d2c60e4b43366f4867abee4f7b72beefe7a","modified":1486635293822},{"_id":"public/2016/03/28/git-server-on-windows/index.html","hash":"80757000aacf7a1e2da1b752a44e1d3e6b7ec8ac","modified":1486635293822},{"_id":"public/2016/03/30/differences-between-post-array-and-query-string-with-php-curl/index.html","hash":"ee05444c1101ada47326cb7702eb4c6bfc737ed4","modified":1486635293822},{"_id":"public/2016/03/27/javascript-get-url-search-params/index.html","hash":"a46d68303f5c11b7e3bf883c7677cc18a972a29d","modified":1486635293822},{"_id":"public/2016/03/22/wechat-auth-get-user-info/index.html","hash":"6ee8a74834e2b8547516c3e436d9cf27dffe3144","modified":1486635293822},{"_id":"public/2015/12/26/number-to-excel-letter/index.html","hash":"2c2c638383f8a82e8175091d8ddfed92a29a74af","modified":1486635293822},{"_id":"public/2015/12/09/wechat-qr-code-manage/index.html","hash":"17fcc153207a7a5ab9cce8badd936603442daabc","modified":1486635293823},{"_id":"public/2015/12/09/wechat-button-manage/index.html","hash":"f41fa83d75e21cc8cdabf8e2d363e7a6eaf30079","modified":1486635293823},{"_id":"public/archives/index.html","hash":"5e1bc2b85a9eaf8aebd3f05d050bd0fa0eeb1aed","modified":1486635293824},{"_id":"public/archives/2016/index.html","hash":"21e7737e51f3e3b71a3130afb8cec01d8111a494","modified":1486635293824},{"_id":"public/index.html","hash":"3d0d5fee87d299d5e0221930b7bc75a953668ac5","modified":1486635293824},{"_id":"public/page/2/index.html","hash":"0e5506b5eb830560c38408e26f9a755af435fecb","modified":1486635293824},{"_id":"public/tags/php/index.html","hash":"41c74e8d67216dea2db3c4e7a8465705d4bb3792","modified":1486635293824},{"_id":"public/tags/curl/index.html","hash":"bd11871a73ddd5aa8ad906d96efd3dab2fef7029","modified":1486635293824},{"_id":"public/tags/javascript/index.html","hash":"c6b88200f568611fb60f8aeb6e396fa5f442ff6b","modified":1486635293824},{"_id":"public/tags/wechat/index.html","hash":"906784aaedbc18eeae7921353ebcd947a2a84ec7","modified":1486635293824},{"_id":"public/tags/tools/index.html","hash":"66c97f447a1b70ca2b8b9ef091936fe311dacfb6","modified":1486635293880},{"_id":"public/tags/jsonp/index.html","hash":"2ca792176b57bb73c30beb66bdb6221ce3ed6a0c","modified":1486635293880},{"_id":"public/tags/cross-domain/index.html","hash":"cd8115bb61fcca0be1ecbdbc86d46af959b9fdfa","modified":1486635293880},{"_id":"public/tags/nginx/index.html","hash":"054a3ec4220e559e3e1a014cba46784b6df2ce29","modified":1486635293881},{"_id":"public/img/2016-03-30-differences-between-post-array-and-query-string-with-php-curl/1.png","hash":"439df20f130d5e6560b1ba8d9fb7039a93fc8293","modified":1486635293902},{"_id":"public/img/2016-03-30-differences-between-post-array-and-query-string-with-php-curl/2.png","hash":"685fe404c06f4e82f67ff77a7442a739f1de9723","modified":1486635293903},{"_id":"public/img/2016-03-30-differences-between-post-array-and-query-string-with-php-curl/4.png","hash":"07635e22149b6a752b1547ffff92cc61d03171e8","modified":1486635293903},{"_id":"public/icon/favicon.ico","hash":"ba13e10002c3454a01e8fe16c1223c313d1483a2","modified":1486635293903},{"_id":"public/img/2016-03-30-differences-between-post-array-and-query-string-with-php-curl/3.png","hash":"f1e5c1798851628855149268df72f6810c084626","modified":1486635293903},{"_id":"public/img/brand.jpg","hash":"f4605bacbcbe6a4d3cdb5dabb9cf9b2bf95f79d7","modified":1486635293904},{"_id":"public/img/img-err.png","hash":"23a63ea26eb3c1d5e677d9883cf36cc1a1a1228b","modified":1486635293904},{"_id":"public/img/avatar.jpg","hash":"2c45df448b6eabb279c8d9a82522d9dc90c8e831","modified":1486635293904},{"_id":"public/img/cc.png","hash":"ebce75a62b40976a72d43f0bd937d859ac24d87c","modified":1486635293904},{"_id":"public/img/img-loading.png","hash":"a9cd5cd11866824f31e3d1c5e23badfeb3f73031","modified":1486635293904},{"_id":"public/css/fonts/roboto/Roboto-Bold.woff","hash":"ee99cd87a59a9a5d4092c83232bb3eec67547425","modified":1486635293904},{"_id":"public/css/fonts/roboto/Roboto-Bold.eot","hash":"a76cd602f5188b9fbd4ba7443dcb9c064e3dbf10","modified":1486635293904},{"_id":"public/css/fonts/roboto/Roboto-Bold.woff2","hash":"933b866d09c2b087707a98dab64b3888865eeb96","modified":1486635293905},{"_id":"public/css/fonts/roboto/Roboto-Light.woff","hash":"6300f659be9e834ab263efe2fb3c581d48b1e7b2","modified":1486635293905},{"_id":"public/css/fonts/roboto/Roboto-Light.woff2","hash":"bbdc28b887400fcb340b504ec2904993af42a5d7","modified":1486635293906},{"_id":"public/css/fonts/roboto/Roboto-Light.eot","hash":"42fe156996197e5eb0c0264c5d1bb3b4681f4595","modified":1486635293906},{"_id":"public/css/fonts/roboto/Roboto-Medium.woff","hash":"d45f84922131364989ad6578c7a06b6b4fc22c34","modified":1486635293907},{"_id":"public/css/fonts/roboto/Roboto-Medium.woff2","hash":"6cc1b73571af9e827c4e7e91418f476703cd4c4b","modified":1486635293908},{"_id":"public/css/fonts/roboto/Roboto-Medium.eot","hash":"1517f4b6e1c5d0e5198f937557253aac8fab0416","modified":1486635293908},{"_id":"public/css/fonts/roboto/Roboto-Regular.woff2","hash":"ed1558b0541f5e01ce48c7db1588371b990eec19","modified":1486635293910},{"_id":"public/css/fonts/roboto/Roboto-Thin.eot","hash":"0790a51a848dbe7292c98f9d0459218bf1a8ffdd","modified":1486635293910},{"_id":"public/css/fonts/roboto/Roboto-Thin.woff","hash":"fbc3e71d456c96667d8082ab910e3946ef89240b","modified":1486635293910},{"_id":"public/css/fonts/roboto/Roboto-Regular.eot","hash":"77ae3e980ec03863ebe2587a8ef9ddfd06941db0","modified":1486635293910},{"_id":"public/css/fonts/roboto/Roboto-Thin.woff2","hash":"2449e3dac5ddb7c3da8bb07450493b62d052758c","modified":1486635293911},{"_id":"public/css/fonts/roboto/Roboto-Regular.woff","hash":"74734dde8d94e7268170f9b994dedfbdcb5b3a15","modified":1486635293911},{"_id":"public/img/brand_old.jpg","hash":"0e237f1b433851c156e1f1cdaeb044054b3b9879","modified":1486635293913},{"_id":"public/img/alipay.jpg","hash":"695ed9d84ec5fbf72dd36131a7fd7302fefef6d3","modified":1486635294050},{"_id":"public/img/wechat.jpg","hash":"e8c70682e933ad951afa813f3b2378f0a9902431","modified":1486635294051},{"_id":"public/css/fonts/fontawesome/fontawesome-webfont.woff","hash":"28b782240b3e76db824e12c02754a9731a167527","modified":1486635294055},{"_id":"public/css/fonts/roboto/Roboto-Bold.ttf","hash":"47327df0f35e7cd7c8645874897a7449697544ae","modified":1486635294056},{"_id":"public/css/fonts/roboto/Roboto-Light.ttf","hash":"e321c183e2b75ee19813892b7bac8d7c411cb88a","modified":1486635294056},{"_id":"public/css/fonts/roboto/Roboto-Medium.ttf","hash":"6060ca726b9760b76f7c347dce9d2fa1fe42ec92","modified":1486635294056},{"_id":"public/css/fonts/roboto/Roboto-Regular.ttf","hash":"824b5480c977a8166e177e5357d13164ccc45f47","modified":1486635294056},{"_id":"public/css/fonts/fontawesome/fontawesome-webfont.woff2","hash":"d6f48cba7d076fb6f2fd6ba993a75b9dc1ecbf0c","modified":1486635294056},{"_id":"public/css/fonts/roboto/Roboto-Thin.ttf","hash":"173ed64528b4d010a76d8d38deb1d7e7eed58eda","modified":1486635294056},{"_id":"public/js/main.min.js","hash":"10fc64abfd344b9bd8dc56888961a20e0edc81ae","modified":1486635294654},{"_id":"public/js/search.js","hash":"c3f80dee3bab6bd4895b55b849085c8af7d1e647","modified":1486635294655},{"_id":"public/js/search.min.js","hash":"c0c3d048af0d6b840f6f1dfda08911c7bfdb5dc1","modified":1486635294655},{"_id":"public/js/main.js","hash":"d94b6c32ae2a3ebab312f33be2f5681b77f4b0a6","modified":1486635294655},{"_id":"public/js/embed.min.js","hash":"c2ad9ec865e531f47bb7db5cc032be44d7fe73a2","modified":1486635294655},{"_id":"public/js/embed.js","hash":"0a99baa3a205f94b16ce9134fc14375178912401","modified":1486635294655},{"_id":"public/css/fonts/fontawesome/fontawesome-webfont.ttf","hash":"13b1eab65a983c7a73bc7997c479d66943f7c6cb","modified":1486635294656},{"_id":"public/css/fonts/fontawesome/FontAwesome.otf","hash":"048707bc52ac4b6563aaa383bfe8660a0ddc908c","modified":1486635294656},{"_id":"public/css/fonts/fontawesome/fontawesome-webfont.eot","hash":"d980c2ce873dc43af460d4d572d441304499f400","modified":1486635294656},{"_id":"public/css/fonts/fontawesome/fontawesome-webfont.svg","hash":"b5483b11f8ba213e733b5b8af9927a04fec996f6","modified":1486635295085},{"_id":"public/css/style.css","hash":"227e841df03f426d9d2548b5ee032a82d5c607ff","modified":1486635296018}],"Category":[{"name":"PHP-Extension-Dev","_id":"ciyy89ngw0004bsubbn7or143"},{"name":"C","_id":"ciyy89nhe0009bsubl7nmhyxd"},{"name":"L-Clipboard","_id":"ciyy89nhj000ebsublvn42taa"},{"name":"Git","_id":"ciyy89nhv000nbsub0v9ej4ve"},{"name":"PHP","_id":"ciyy89ni3000sbsub7ka4czsv"},{"name":"JavaScript","_id":"ciyy89ni9000ybsub5mhvtnfc"},{"name":"Nginx","_id":"ciyy89nik0016bsub76nrrw4a"},{"name":"MVVM-Light-Dev","_id":"ciyy89nin001bbsub4pbjcz49"},{"name":"WeChat","_id":"ciyy89nip001ebsubaz2zs9vo"}],"Data":[],"Page":[{"layout":"categories","comments":0,"_content":"","source":"categories/index.md","raw":"---\nlayout: categories\ncomments: false\n---\n","date":"2017-02-08T08:15:13.331Z","updated":"2017-02-08T05:11:00.000Z","path":"categories/index.html","title":"","_id":"ciyy89ngp0001bsubfqqwxbwf","content":"","excerpt":"","more":""},{"layout":"tags","comments":0,"_content":"","source":"tags/index.md","raw":"---\nlayout: tags\ncomments: false\n---\n","date":"2017-02-08T08:15:13.338Z","updated":"2017-02-08T05:09:54.304Z","path":"tags/index.html","title":"","_id":"ciyy89ngu0003bsubd98e5gmv","content":"","excerpt":"","more":""}],"Post":[{"layout":"post","title":"用C语言开发PHP扩展（二）——封装C函数的扩展","description":"dev php extension in c 2","date":"2016-08-29T16:00:00.000Z","_content":"\n- 函数定义之间不能有空行\n- 使用资源是为了实现自动释放","source":"_posts/dev-php-extension-in-c-2.md","raw":"---\nlayout: post\ntitle: \"用C语言开发PHP扩展（二）——封装C函数的扩展\"\ndescription: \"dev php extension in c 2\"\ncategory: PHP-Extension-Dev\ntags: [php, c]\ndate: 2016-08-30\n---\n\n- 函数定义之间不能有空行\n- 使用资源是为了实现自动释放","slug":"dev-php-extension-in-c-2","published":1,"updated":"2017-02-08T05:31:58.771Z","comments":1,"photos":[],"link":"","_id":"ciyy89ngi0000bsubbegt07jn","content":"<ul>\n<li>函数定义之间不能有空行</li>\n<li>使用资源是为了实现自动释放</li>\n</ul>\n","excerpt":"","more":"<ul>\n<li>函数定义之间不能有空行</li>\n<li>使用资源是为了实现自动释放</li>\n</ul>\n"},{"layout":"post","title":"关于C语言中的getch和getchar函数","description":"c-getch-getchar","date":"2016-04-27T16:00:00.000Z","_content":"\n最近在阅读K&R的经典之作The C Programming Language（C程序设计语言）时遇到了一个看似简单的函数 `getchar()` ，书中对其的描述是：\n\n> `getchar()` 函数从文本流中读出下一个输入字符，并将其作为结果值返回。\n\n并给出一段用于文件复制的代码：\n\n```c\n#include <stdio.h>\n\nmain()\n{\n    int c;\n    while ((c = getchar()) != EOF)\n    {\n        putchar(c);\n    }\n}\n```\n\n书中说该例子*就是把输入一次一个字符地复制到输出*。而我在Ubuntu下和Windows下运行程序时发现每次输入完回车后，程序才会将输入的内容整行输出，即：\n\n```bash\nabcdef\nabcdef\n```\n\n在网上查到， `getchar()` 是**有缓冲区、有回显**的，用户输入的字符（包括回车）被放在键盘缓冲区中，当用户输入回车后 `getchar()` 函数从缓冲区中每次读入一个字符，后续的 `getchar()` 不会等待用户按键，而是直接从缓冲区读取字符，直到读完缓冲区中的字符。\n\n[有人](http://blog.csdn.net/stars2009/article/details/3837488)这样解释书中的描述：\n\n> 在大师编写C的时候，当时并没有所谓终端输入的概念，所有的输入实际上都是按照文件进行读取的，文件中一般都是以行为单位的。因此，只有遇到换行符，那么程序会认为输入结束，然后采取执行程序的其他部分。同时，输入是按照文件的方式存取的，那么要结束一个文件的输入就需用到EOF (Enf Of File). 这也就是为什么getchar结束输入退出时要用EOF的原因。\n\n而C语言中的 `getch()` 函数是**无缓冲区、无回显**的。同时，在Windows下（换行符为 `\\r\\n` ）调试的过程中发现 `getchar()` 和 `getch()` 对于换行符的处理不同： `getchar()` 返回的的是 `\\n` 而 `getch()` 接收到 `\\r` 就返回了。对此也[有人](http://bbs.csdn.net/topics/360137572#post-370454446)这样解释：\n\n> 因为getchar()是标准的C库函数，在UNIX系统里回车一律只用\\n。\nWindows里回车输入的其实是\\r\\n，但是C库会对其进行处理（读写文本文件时也会），统一转换为规范的\\n。而getch()则是比较低级的，会越过这个处理，貌似没有经过输入流缓冲，而是直接调用键盘服务中断获得的，就是原始按键。\n\n另外，程序中使用 `int c` 而不是 `char c` 的原因是\n\n> EOF在函数库里一般定义为-1。因此，在这种情况下，getchar函数返回一个负值，把一个负值赋给一个char型的变量是不正确的。\n\n","source":"_posts/c-getch-getchar.md","raw":"---\nlayout: post\ntitle: \"关于C语言中的getch和getchar函数\"\ndescription: \"c-getch-getchar\"\ncategory: C\ntags: [c, buffer, LF, windows]\ndate: 2016-04-28\n---\n\n最近在阅读K&R的经典之作The C Programming Language（C程序设计语言）时遇到了一个看似简单的函数 `getchar()` ，书中对其的描述是：\n\n> `getchar()` 函数从文本流中读出下一个输入字符，并将其作为结果值返回。\n\n并给出一段用于文件复制的代码：\n\n```c\n#include <stdio.h>\n\nmain()\n{\n    int c;\n    while ((c = getchar()) != EOF)\n    {\n        putchar(c);\n    }\n}\n```\n\n书中说该例子*就是把输入一次一个字符地复制到输出*。而我在Ubuntu下和Windows下运行程序时发现每次输入完回车后，程序才会将输入的内容整行输出，即：\n\n```bash\nabcdef\nabcdef\n```\n\n在网上查到， `getchar()` 是**有缓冲区、有回显**的，用户输入的字符（包括回车）被放在键盘缓冲区中，当用户输入回车后 `getchar()` 函数从缓冲区中每次读入一个字符，后续的 `getchar()` 不会等待用户按键，而是直接从缓冲区读取字符，直到读完缓冲区中的字符。\n\n[有人](http://blog.csdn.net/stars2009/article/details/3837488)这样解释书中的描述：\n\n> 在大师编写C的时候，当时并没有所谓终端输入的概念，所有的输入实际上都是按照文件进行读取的，文件中一般都是以行为单位的。因此，只有遇到换行符，那么程序会认为输入结束，然后采取执行程序的其他部分。同时，输入是按照文件的方式存取的，那么要结束一个文件的输入就需用到EOF (Enf Of File). 这也就是为什么getchar结束输入退出时要用EOF的原因。\n\n而C语言中的 `getch()` 函数是**无缓冲区、无回显**的。同时，在Windows下（换行符为 `\\r\\n` ）调试的过程中发现 `getchar()` 和 `getch()` 对于换行符的处理不同： `getchar()` 返回的的是 `\\n` 而 `getch()` 接收到 `\\r` 就返回了。对此也[有人](http://bbs.csdn.net/topics/360137572#post-370454446)这样解释：\n\n> 因为getchar()是标准的C库函数，在UNIX系统里回车一律只用\\n。\nWindows里回车输入的其实是\\r\\n，但是C库会对其进行处理（读写文本文件时也会），统一转换为规范的\\n。而getch()则是比较低级的，会越过这个处理，貌似没有经过输入流缓冲，而是直接调用键盘服务中断获得的，就是原始按键。\n\n另外，程序中使用 `int c` 而不是 `char c` 的原因是\n\n> EOF在函数库里一般定义为-1。因此，在这种情况下，getchar函数返回一个负值，把一个负值赋给一个char型的变量是不正确的。\n\n","slug":"c-getch-getchar","published":1,"updated":"2017-02-08T05:31:16.424Z","comments":1,"photos":[],"link":"","_id":"ciyy89ngr0002bsub7xs7dkgq","content":"<p>最近在阅读K&amp;R的经典之作The C Programming Language（C程序设计语言）时遇到了一个看似简单的函数 <code>getchar()</code> ，书中对其的描述是：</p>\n<blockquote>\n<p><code>getchar()</code> 函数从文本流中读出下一个输入字符，并将其作为结果值返回。</p>\n</blockquote>\n<p>并给出一段用于文件复制的代码：</p>\n<figure class=\"highlight c\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div><div class=\"line\">6</div><div class=\"line\">7</div><div class=\"line\">8</div><div class=\"line\">9</div><div class=\"line\">10</div></pre></td><td class=\"code\"><pre><div class=\"line\"><span class=\"meta\">#<span class=\"meta-keyword\">include</span> <span class=\"meta-string\">&lt;stdio.h&gt;</span></span></div><div class=\"line\"></div><div class=\"line\">main()</div><div class=\"line\">&#123;</div><div class=\"line\">    <span class=\"keyword\">int</span> c;</div><div class=\"line\">    <span class=\"keyword\">while</span> ((c = getchar()) != EOF)</div><div class=\"line\">    &#123;</div><div class=\"line\">        <span class=\"built_in\">putchar</span>(c);</div><div class=\"line\">    &#125;</div><div class=\"line\">&#125;</div></pre></td></tr></table></figure>\n<p>书中说该例子<em>就是把输入一次一个字符地复制到输出</em>。而我在Ubuntu下和Windows下运行程序时发现每次输入完回车后，程序才会将输入的内容整行输出，即：</p>\n<figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div></pre></td><td class=\"code\"><pre><div class=\"line\">abcdef</div><div class=\"line\">abcdef</div></pre></td></tr></table></figure>\n<p>在网上查到， <code>getchar()</code> 是<strong>有缓冲区、有回显</strong>的，用户输入的字符（包括回车）被放在键盘缓冲区中，当用户输入回车后 <code>getchar()</code> 函数从缓冲区中每次读入一个字符，后续的 <code>getchar()</code> 不会等待用户按键，而是直接从缓冲区读取字符，直到读完缓冲区中的字符。</p>\n<p><a href=\"http://blog.csdn.net/stars2009/article/details/3837488\" target=\"_blank\" rel=\"external\">有人</a>这样解释书中的描述：</p>\n<blockquote>\n<p>在大师编写C的时候，当时并没有所谓终端输入的概念，所有的输入实际上都是按照文件进行读取的，文件中一般都是以行为单位的。因此，只有遇到换行符，那么程序会认为输入结束，然后采取执行程序的其他部分。同时，输入是按照文件的方式存取的，那么要结束一个文件的输入就需用到EOF (Enf Of File). 这也就是为什么getchar结束输入退出时要用EOF的原因。</p>\n</blockquote>\n<p>而C语言中的 <code>getch()</code> 函数是<strong>无缓冲区、无回显</strong>的。同时，在Windows下（换行符为 <code>\\r\\n</code> ）调试的过程中发现 <code>getchar()</code> 和 <code>getch()</code> 对于换行符的处理不同： <code>getchar()</code> 返回的的是 <code>\\n</code> 而 <code>getch()</code> 接收到 <code>\\r</code> 就返回了。对此也<a href=\"http://bbs.csdn.net/topics/360137572#post-370454446\" target=\"_blank\" rel=\"external\">有人</a>这样解释：</p>\n<blockquote>\n<p>因为getchar()是标准的C库函数，在UNIX系统里回车一律只用\\n。<br>Windows里回车输入的其实是\\r\\n，但是C库会对其进行处理（读写文本文件时也会），统一转换为规范的\\n。而getch()则是比较低级的，会越过这个处理，貌似没有经过输入流缓冲，而是直接调用键盘服务中断获得的，就是原始按键。</p>\n</blockquote>\n<p>另外，程序中使用 <code>int c</code> 而不是 <code>char c</code> 的原因是</p>\n<blockquote>\n<p>EOF在函数库里一般定义为-1。因此，在这种情况下，getchar函数返回一个负值，把一个负值赋给一个char型的变量是不正确的。</p>\n</blockquote>\n","excerpt":"","more":"<p>最近在阅读K&amp;R的经典之作The C Programming Language（C程序设计语言）时遇到了一个看似简单的函数 <code>getchar()</code> ，书中对其的描述是：</p>\n<blockquote>\n<p><code>getchar()</code> 函数从文本流中读出下一个输入字符，并将其作为结果值返回。</p>\n</blockquote>\n<p>并给出一段用于文件复制的代码：</p>\n<figure class=\"highlight c\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div><div class=\"line\">6</div><div class=\"line\">7</div><div class=\"line\">8</div><div class=\"line\">9</div><div class=\"line\">10</div></pre></td><td class=\"code\"><pre><div class=\"line\"><span class=\"meta\">#<span class=\"meta-keyword\">include</span> <span class=\"meta-string\">&lt;stdio.h&gt;</span></span></div><div class=\"line\"></div><div class=\"line\">main()</div><div class=\"line\">&#123;</div><div class=\"line\">    <span class=\"keyword\">int</span> c;</div><div class=\"line\">    <span class=\"keyword\">while</span> ((c = getchar()) != EOF)</div><div class=\"line\">    &#123;</div><div class=\"line\">        <span class=\"built_in\">putchar</span>(c);</div><div class=\"line\">    &#125;</div><div class=\"line\">&#125;</div></pre></td></tr></table></figure>\n<p>书中说该例子<em>就是把输入一次一个字符地复制到输出</em>。而我在Ubuntu下和Windows下运行程序时发现每次输入完回车后，程序才会将输入的内容整行输出，即：</p>\n<figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div></pre></td><td class=\"code\"><pre><div class=\"line\">abcdef</div><div class=\"line\">abcdef</div></pre></td></tr></table></figure>\n<p>在网上查到， <code>getchar()</code> 是<strong>有缓冲区、有回显</strong>的，用户输入的字符（包括回车）被放在键盘缓冲区中，当用户输入回车后 <code>getchar()</code> 函数从缓冲区中每次读入一个字符，后续的 <code>getchar()</code> 不会等待用户按键，而是直接从缓冲区读取字符，直到读完缓冲区中的字符。</p>\n<p><a href=\"http://blog.csdn.net/stars2009/article/details/3837488\">有人</a>这样解释书中的描述：</p>\n<blockquote>\n<p>在大师编写C的时候，当时并没有所谓终端输入的概念，所有的输入实际上都是按照文件进行读取的，文件中一般都是以行为单位的。因此，只有遇到换行符，那么程序会认为输入结束，然后采取执行程序的其他部分。同时，输入是按照文件的方式存取的，那么要结束一个文件的输入就需用到EOF (Enf Of File). 这也就是为什么getchar结束输入退出时要用EOF的原因。</p>\n</blockquote>\n<p>而C语言中的 <code>getch()</code> 函数是<strong>无缓冲区、无回显</strong>的。同时，在Windows下（换行符为 <code>\\r\\n</code> ）调试的过程中发现 <code>getchar()</code> 和 <code>getch()</code> 对于换行符的处理不同： <code>getchar()</code> 返回的的是 <code>\\n</code> 而 <code>getch()</code> 接收到 <code>\\r</code> 就返回了。对此也<a href=\"http://bbs.csdn.net/topics/360137572#post-370454446\">有人</a>这样解释：</p>\n<blockquote>\n<p>因为getchar()是标准的C库函数，在UNIX系统里回车一律只用\\n。<br>Windows里回车输入的其实是\\r\\n，但是C库会对其进行处理（读写文本文件时也会），统一转换为规范的\\n。而getch()则是比较低级的，会越过这个处理，貌似没有经过输入流缓冲，而是直接调用键盘服务中断获得的，就是原始按键。</p>\n</blockquote>\n<p>另外，程序中使用 <code>int c</code> 而不是 <code>char c</code> 的原因是</p>\n<blockquote>\n<p>EOF在函数库里一般定义为-1。因此，在这种情况下，getchar函数返回一个负值，把一个负值赋给一个char型的变量是不正确的。</p>\n</blockquote>\n"},{"layout":"post","title":"局域网环境下的“云”剪贴板","description":"cloud clipboard based on lan","date":"2016-12-03T16:00:00.000Z","_content":"\n\n","source":"_posts/cloud-clipboard-based-on-lan.md","raw":"---\nlayout: post\ntitle: \"局域网环境下的“云”剪贴板\"\ndescription: \"cloud clipboard based on lan\"\ncategory: L-Clipboard\ntags: [c#, tcp, udp]\ndate: 2016-12-04\n---\n\n\n","slug":"cloud-clipboard-based-on-lan","published":1,"updated":"2017-02-08T05:32:42.297Z","comments":1,"photos":[],"link":"","_id":"ciyy89nh20006bsub8o1a3cha","content":"","excerpt":"","more":""},{"layout":"post","title":"用C语言开发PHP扩展（一）——入门与填坑","description":"dev php extension in c 1","date":"2016-08-29T16:00:00.000Z","_content":"\n1. 开发环境\n2. PHP源码\n3. 函数定义\n4. 扩展骨架\n5. 开发步骤\n\n    >   To use your new extension, you will have to execute the following steps:\n\n    >    1. $ cd ..\n    >    2. $ vi ext/myfunctions/config.m4\n    >    3. $ ./buildconf\n    >    4. $ ./configure --[with\\|enable]-myfunctions\n    >    5. $ make\n    >    6. $ ./php -f ext/myfunctions/myfunctions.php\n    >    7. $ vi ext/myfunctions/myfunctions.c\n    >    8. $ make\n\n    >    Repeat steps 3-6 until you are satisfied with ext/myfunctions/config.m4 and\n    >    step 6 confirms that your module is compiled into PHP. Then, start writing\n    >    code and repeat the last two steps as often as necessary.\n\n6. 函数实现\n7. 编译\n8. 测试运行\n\n-   跨平台CRLF与LF\n-   bison安装\n    checking for bison version... invalid\n    configure: WARNING: This bison version is not supported for regeneration of the Zend/PHP parsers (found: none, min: 204, excluded: ).\n    checking for re2c... no\n    configure: WARNING: You will need re2c 0.13.4 or later if you want to regenerate PHP parsers.\n    configure: error: bison is required to build PHP/Zend when building a GIT checkout!\n\n-   libxml2\n    configure: error: xml2-config not found. Please check your libxml2 installation.\n    解决\n    apt-get install libxml2-dev\n\n-   ./sapi/cli/php\n\nhttps://www.hongweipeng.com/index.php/archives/739/","source":"_posts/dev-php-extension-in-c-1.md","raw":"---\nlayout: post\ntitle: \"用C语言开发PHP扩展（一）——入门与填坑\"\ndescription: \"dev php extension in c 1\"\ncategory: PHP-Extension-Dev\ntags: [php, c]\ndate: 2016-08-30\n---\n\n1. 开发环境\n2. PHP源码\n3. 函数定义\n4. 扩展骨架\n5. 开发步骤\n\n    >   To use your new extension, you will have to execute the following steps:\n\n    >    1. $ cd ..\n    >    2. $ vi ext/myfunctions/config.m4\n    >    3. $ ./buildconf\n    >    4. $ ./configure --[with\\|enable]-myfunctions\n    >    5. $ make\n    >    6. $ ./php -f ext/myfunctions/myfunctions.php\n    >    7. $ vi ext/myfunctions/myfunctions.c\n    >    8. $ make\n\n    >    Repeat steps 3-6 until you are satisfied with ext/myfunctions/config.m4 and\n    >    step 6 confirms that your module is compiled into PHP. Then, start writing\n    >    code and repeat the last two steps as often as necessary.\n\n6. 函数实现\n7. 编译\n8. 测试运行\n\n-   跨平台CRLF与LF\n-   bison安装\n    checking for bison version... invalid\n    configure: WARNING: This bison version is not supported for regeneration of the Zend/PHP parsers (found: none, min: 204, excluded: ).\n    checking for re2c... no\n    configure: WARNING: You will need re2c 0.13.4 or later if you want to regenerate PHP parsers.\n    configure: error: bison is required to build PHP/Zend when building a GIT checkout!\n\n-   libxml2\n    configure: error: xml2-config not found. Please check your libxml2 installation.\n    解决\n    apt-get install libxml2-dev\n\n-   ./sapi/cli/php\n\nhttps://www.hongweipeng.com/index.php/archives/739/","slug":"dev-php-extension-in-c-1","published":1,"updated":"2017-02-08T05:31:43.968Z","comments":1,"photos":[],"link":"","_id":"ciyy89nh50007bsubolg0lxmt","content":"<ol>\n<li>开发环境</li>\n<li>PHP源码</li>\n<li>函数定义</li>\n<li>扩展骨架</li>\n<li><p>开发步骤</p>\n<blockquote>\n<p>  To use your new extension, you will have to execute the following steps:</p>\n<ol>\n<li>$ cd ..</li>\n<li>$ vi ext/myfunctions/config.m4</li>\n<li>$ ./buildconf</li>\n<li>$ ./configure –[with|enable]-myfunctions</li>\n<li>$ make</li>\n<li>$ ./php -f ext/myfunctions/myfunctions.php</li>\n<li>$ vi ext/myfunctions/myfunctions.c</li>\n<li><p>$ make</p>\n<p>Repeat steps 3-6 until you are satisfied with ext/myfunctions/config.m4 and<br>step 6 confirms that your module is compiled into PHP. Then, start writing<br>code and repeat the last two steps as often as necessary.</p>\n</li>\n</ol>\n</blockquote>\n</li>\n<li><p>函数实现</p>\n</li>\n<li>编译</li>\n<li>测试运行</li>\n</ol>\n<ul>\n<li>跨平台CRLF与LF</li>\n<li><p>bison安装<br>checking for bison version… invalid<br>configure: WARNING: This bison version is not supported for regeneration of the Zend/PHP parsers (found: none, min: 204, excluded: ).<br>checking for re2c… no<br>configure: WARNING: You will need re2c 0.13.4 or later if you want to regenerate PHP parsers.<br>configure: error: bison is required to build PHP/Zend when building a GIT checkout!</p>\n</li>\n<li><p>libxml2<br>configure: error: xml2-config not found. Please check your libxml2 installation.<br>解决<br>apt-get install libxml2-dev</p>\n</li>\n<li><p>./sapi/cli/php</p>\n</li>\n</ul>\n<p><a href=\"https://www.hongweipeng.com/index.php/archives/739/\" target=\"_blank\" rel=\"external\">https://www.hongweipeng.com/index.php/archives/739/</a></p>\n","excerpt":"","more":"<ol>\n<li>开发环境</li>\n<li>PHP源码</li>\n<li>函数定义</li>\n<li>扩展骨架</li>\n<li><p>开发步骤</p>\n<blockquote>\n<p>  To use your new extension, you will have to execute the following steps:</p>\n<ol>\n<li>$ cd ..</li>\n<li>$ vi ext/myfunctions/config.m4</li>\n<li>$ ./buildconf</li>\n<li>$ ./configure –[with|enable]-myfunctions</li>\n<li>$ make</li>\n<li>$ ./php -f ext/myfunctions/myfunctions.php</li>\n<li>$ vi ext/myfunctions/myfunctions.c</li>\n<li><p>$ make</p>\n<p>Repeat steps 3-6 until you are satisfied with ext/myfunctions/config.m4 and<br>step 6 confirms that your module is compiled into PHP. Then, start writing<br>code and repeat the last two steps as often as necessary.</p>\n</li>\n</ol>\n</blockquote>\n</li>\n<li><p>函数实现</p>\n</li>\n<li>编译</li>\n<li>测试运行</li>\n</ol>\n<ul>\n<li>跨平台CRLF与LF</li>\n<li><p>bison安装<br>checking for bison version… invalid<br>configure: WARNING: This bison version is not supported for regeneration of the Zend/PHP parsers (found: none, min: 204, excluded: ).<br>checking for re2c… no<br>configure: WARNING: You will need re2c 0.13.4 or later if you want to regenerate PHP parsers.<br>configure: error: bison is required to build PHP/Zend when building a GIT checkout!</p>\n</li>\n<li><p>libxml2<br>configure: error: xml2-config not found. Please check your libxml2 installation.<br>解决<br>apt-get install libxml2-dev</p>\n</li>\n<li><p>./sapi/cli/php</p>\n</li>\n</ul>\n<p><a href=\"https://www.hongweipeng.com/index.php/archives/739/\">https://www.hongweipeng.com/index.php/archives/739/</a></p>\n"},{"layout":"post","title":"在windows环境下用GitStack搭建git server的方法","description":"git server on windows","date":"2016-03-27T16:00:00.000Z","_content":"\n在Windows环境下用GitStack搭建git server的方法：\n\n- 安装/配置GitStack\n\n    GitStack下载地址：[GitStack](http://gitstack.com/download/)\n\n    在服务器下载安装GitStack，安装完成后，可在 *Admin* 页面的 *Setting* 中配置 *Server Ports* 和 *Repositories Location* ，然后在 *Security* 中选择 *Communication protocols* 为 *Accept http and https* 。\n\n- 添加User\n\n    在 *Admin* 页面的 *Users & Groups* 中添加User。\n\n- 添加Repository\n\n    在 *Admin* 页面的 *Repository* 中新建Repository，并添加刚才创建的User。\n\n- 远程clone\n\n    在自己的机器上clone刚才添加的Repository：\n    \n    `git clone https://name:password@your_server_domain:port/your_repository.git`\n\n- 远程push\n\n    在自己的机器上添加文件，并push到服务器：\n    \n```bash\ngit add --all .\ngit commit -m \"init\"\ngit push origin master\n```\n\n- 服务器本地clone\n\n    服务器上，在你想要部署代码的位置进行clone：\n    \n    `git clone https://name:password@localhost:port/your_repository.git`\n\n- 配置Hook\n\n    服务器上，找到你Repository所在位置，打开hooks文件夹添加名为 *post-receive* 的文件，文件内容例如：\n    \n```bash\n#!/bin/sh\nunset GIT_DIR\nDeployPath=path_to_your_deploy_folder\n\ncd $DeployPath\ngit pull origin master\n```\n\n- **修改GitStack服务的登录方式**\n\n    在服务中找到 *GitStack* ，右键 属性 打开登录选项卡，将登录身份由 *本地系统账户* 改为  *Administrator* ，重启 *GitStack* 服务。\n\n完成以上的步骤，下次从自己的机器push到服务器时，就可以实现自动部署。","source":"_posts/git-server-on-windows.md","raw":"---\nlayout: post\ntitle: \"在windows环境下用GitStack搭建git server的方法\"\ndescription: \"git server on windows\"\ncategory: Git\ntags: [git, server, windows]\ndate: 2016-03-28\n---\n\n在Windows环境下用GitStack搭建git server的方法：\n\n- 安装/配置GitStack\n\n    GitStack下载地址：[GitStack](http://gitstack.com/download/)\n\n    在服务器下载安装GitStack，安装完成后，可在 *Admin* 页面的 *Setting* 中配置 *Server Ports* 和 *Repositories Location* ，然后在 *Security* 中选择 *Communication protocols* 为 *Accept http and https* 。\n\n- 添加User\n\n    在 *Admin* 页面的 *Users & Groups* 中添加User。\n\n- 添加Repository\n\n    在 *Admin* 页面的 *Repository* 中新建Repository，并添加刚才创建的User。\n\n- 远程clone\n\n    在自己的机器上clone刚才添加的Repository：\n    \n    `git clone https://name:password@your_server_domain:port/your_repository.git`\n\n- 远程push\n\n    在自己的机器上添加文件，并push到服务器：\n    \n```bash\ngit add --all .\ngit commit -m \"init\"\ngit push origin master\n```\n\n- 服务器本地clone\n\n    服务器上，在你想要部署代码的位置进行clone：\n    \n    `git clone https://name:password@localhost:port/your_repository.git`\n\n- 配置Hook\n\n    服务器上，找到你Repository所在位置，打开hooks文件夹添加名为 *post-receive* 的文件，文件内容例如：\n    \n```bash\n#!/bin/sh\nunset GIT_DIR\nDeployPath=path_to_your_deploy_folder\n\ncd $DeployPath\ngit pull origin master\n```\n\n- **修改GitStack服务的登录方式**\n\n    在服务中找到 *GitStack* ，右键 属性 打开登录选项卡，将登录身份由 *本地系统账户* 改为  *Administrator* ，重启 *GitStack* 服务。\n\n完成以上的步骤，下次从自己的机器push到服务器时，就可以实现自动部署。","slug":"git-server-on-windows","published":1,"updated":"2017-02-08T05:30:32.071Z","comments":1,"photos":[],"link":"","_id":"ciyy89nh90008bsub8t9vcz4e","content":"<p>在Windows环境下用GitStack搭建git server的方法：</p>\n<ul>\n<li><p>安装/配置GitStack</p>\n<p>  GitStack下载地址：<a href=\"http://gitstack.com/download/\" target=\"_blank\" rel=\"external\">GitStack</a></p>\n<p>  在服务器下载安装GitStack，安装完成后，可在 <em>Admin</em> 页面的 <em>Setting</em> 中配置 <em>Server Ports</em> 和 <em>Repositories Location</em> ，然后在 <em>Security</em> 中选择 <em>Communication protocols</em> 为 <em>Accept http and https</em> 。</p>\n</li>\n<li><p>添加User</p>\n<p>  在 <em>Admin</em> 页面的 <em>Users &amp; Groups</em> 中添加User。</p>\n</li>\n<li><p>添加Repository</p>\n<p>  在 <em>Admin</em> 页面的 <em>Repository</em> 中新建Repository，并添加刚才创建的User。</p>\n</li>\n<li><p>远程clone</p>\n<p>  在自己的机器上clone刚才添加的Repository：</p>\n<p>  <code>git clone https://name:password@your_server_domain:port/your_repository.git</code></p>\n</li>\n<li><p>远程push</p>\n<p>  在自己的机器上添加文件，并push到服务器：</p>\n</li>\n</ul>\n<figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div></pre></td><td class=\"code\"><pre><div class=\"line\">git add --all .</div><div class=\"line\">git commit -m <span class=\"string\">\"init\"</span></div><div class=\"line\">git push origin master</div></pre></td></tr></table></figure>\n<ul>\n<li><p>服务器本地clone</p>\n<p>  服务器上，在你想要部署代码的位置进行clone：</p>\n<p>  <code>git clone https://name:password@localhost:port/your_repository.git</code></p>\n</li>\n<li><p>配置Hook</p>\n<p>  服务器上，找到你Repository所在位置，打开hooks文件夹添加名为 <em>post-receive</em> 的文件，文件内容例如：</p>\n</li>\n</ul>\n<figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div><div class=\"line\">6</div></pre></td><td class=\"code\"><pre><div class=\"line\"><span class=\"meta\">#!/bin/sh</span></div><div class=\"line\"><span class=\"built_in\">unset</span> GIT_DIR</div><div class=\"line\">DeployPath=path_to_your_deploy_folder</div><div class=\"line\"></div><div class=\"line\"><span class=\"built_in\">cd</span> <span class=\"variable\">$DeployPath</span></div><div class=\"line\">git pull origin master</div></pre></td></tr></table></figure>\n<ul>\n<li><p><strong>修改GitStack服务的登录方式</strong></p>\n<p>  在服务中找到 <em>GitStack</em> ，右键 属性 打开登录选项卡，将登录身份由 <em>本地系统账户</em> 改为  <em>Administrator</em> ，重启 <em>GitStack</em> 服务。</p>\n</li>\n</ul>\n<p>完成以上的步骤，下次从自己的机器push到服务器时，就可以实现自动部署。</p>\n","excerpt":"","more":"<p>在Windows环境下用GitStack搭建git server的方法：</p>\n<ul>\n<li><p>安装/配置GitStack</p>\n<p>  GitStack下载地址：<a href=\"http://gitstack.com/download/\">GitStack</a></p>\n<p>  在服务器下载安装GitStack，安装完成后，可在 <em>Admin</em> 页面的 <em>Setting</em> 中配置 <em>Server Ports</em> 和 <em>Repositories Location</em> ，然后在 <em>Security</em> 中选择 <em>Communication protocols</em> 为 <em>Accept http and https</em> 。</p>\n</li>\n<li><p>添加User</p>\n<p>  在 <em>Admin</em> 页面的 <em>Users &amp; Groups</em> 中添加User。</p>\n</li>\n<li><p>添加Repository</p>\n<p>  在 <em>Admin</em> 页面的 <em>Repository</em> 中新建Repository，并添加刚才创建的User。</p>\n</li>\n<li><p>远程clone</p>\n<p>  在自己的机器上clone刚才添加的Repository：</p>\n<p>  <code>git clone https://name:password@your_server_domain:port/your_repository.git</code></p>\n</li>\n<li><p>远程push</p>\n<p>  在自己的机器上添加文件，并push到服务器：</p>\n</li>\n</ul>\n<figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div></pre></td><td class=\"code\"><pre><div class=\"line\">git add --all .</div><div class=\"line\">git commit -m <span class=\"string\">\"init\"</span></div><div class=\"line\">git push origin master</div></pre></td></tr></table></figure>\n<ul>\n<li><p>服务器本地clone</p>\n<p>  服务器上，在你想要部署代码的位置进行clone：</p>\n<p>  <code>git clone https://name:password@localhost:port/your_repository.git</code></p>\n</li>\n<li><p>配置Hook</p>\n<p>  服务器上，找到你Repository所在位置，打开hooks文件夹添加名为 <em>post-receive</em> 的文件，文件内容例如：</p>\n</li>\n</ul>\n<figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div><div class=\"line\">6</div></pre></td><td class=\"code\"><pre><div class=\"line\"><span class=\"meta\">#!/bin/sh</span></div><div class=\"line\"><span class=\"built_in\">unset</span> GIT_DIR</div><div class=\"line\">DeployPath=path_to_your_deploy_folder</div><div class=\"line\"></div><div class=\"line\"><span class=\"built_in\">cd</span> <span class=\"variable\">$DeployPath</span></div><div class=\"line\">git pull origin master</div></pre></td></tr></table></figure>\n<ul>\n<li><p><strong>修改GitStack服务的登录方式</strong></p>\n<p>  在服务中找到 <em>GitStack</em> ，右键 属性 打开登录选项卡，将登录身份由 <em>本地系统账户</em> 改为  <em>Administrator</em> ，重启 <em>GitStack</em> 服务。</p>\n</li>\n</ul>\n<p>完成以上的步骤，下次从自己的机器push到服务器时，就可以实现自动部署。</p>\n"},{"layout":"post","title":"PHP curl post 数组与 post query字符串的区别","description":"","comments":1,"date":"2016-03-29T16:00:00.000Z","_content":"\n使用PHP的curl方法post数据时通常使用以下方法：\n\n```php\n$post_fields = [\"aaa\"=>\"aaaa\", \"bbb\"=>\"bbbb\"];\n$url = \"http://localhost/sandbox/PHPTest/output.php\";\n$ch = curl_init();\ncurl_setopt($ch, CURLOPT_URL, $url);\ncurl_setopt($ch, CURLOPT_POST, 1);\ncurl_setopt($ch, CURLOPT_POSTFIELDS, $post_fields);\ncurl_setopt($ch, CURLOPT_RETURNTRANSFER, 1);\n$response = curl_exec($ch);\necho $response;\n```\n\n$url为php页面时，该方法没有遇到问题，但$url为jsp页面时，出现post数据为空的情况，即在jsp页面用`request.getParameter(\"aaa\")`得到的结果为null。尝试将$post_fields拼接为query字符串：\n\n```php\n$post_fields = http_build_query($post_fields);\n```\n\n结果正确。\n抓包对比直接post数组与post query字符串两种方法结果如下：\n\n- ### 直接post数组\n    - header\n\n        ![array header](http://leoyoung07.github.io/blog/img/2016-03-30-differences-between-post-array-and-query-string-with-php-curl/1.png)\n    - body\n\n        ![array body](http://leoyoung07.github.io/blog/img/2016-03-30-differences-between-post-array-and-query-string-with-php-curl/2.png)\n\n- ### post query字符串\n    - header\n\n        ![query string header](http://leoyoung07.github.io/blog/img/2016-03-30-differences-between-post-array-and-query-string-with-php-curl/3.png)\n    - body\n\n        ![query string body](http://leoyoung07.github.io/blog/img/2016-03-30-differences-between-post-array-and-query-string-with-php-curl/4.png)\n\n可见，直接post数组时，Content-type为`multipart/form-data`；而post query字符串时Content-type为`application/x-www-form-urlencoded`。\n\nPHP手册中对CURLOPT_POSTFIELDS的说明如下：\n\n> 全部数据使用HTTP协议中的\"POST\"操作来发送。要发送文件，在文件名前面加上@前缀并使用完整路径。这个参数可以通过urlencoded后的字符串类似'para1=val1&para2=val2&...'或使用一个以字段名为键值，字段数据为值的数组。如果value是一个数组，Content-Type头将会被设置成multipart/form-data。","source":"_posts/differences-between-post-array-and-query-string-with-php-curl.md","raw":"---\nlayout: post\ntitle: \"PHP curl post 数组与 post query字符串的区别\"\ndescription: \"\"\ncomments: true\ncategory: PHP\ntags: [php, curl, post]\ndate: 2016-03-30\n---\n\n使用PHP的curl方法post数据时通常使用以下方法：\n\n```php\n$post_fields = [\"aaa\"=>\"aaaa\", \"bbb\"=>\"bbbb\"];\n$url = \"http://localhost/sandbox/PHPTest/output.php\";\n$ch = curl_init();\ncurl_setopt($ch, CURLOPT_URL, $url);\ncurl_setopt($ch, CURLOPT_POST, 1);\ncurl_setopt($ch, CURLOPT_POSTFIELDS, $post_fields);\ncurl_setopt($ch, CURLOPT_RETURNTRANSFER, 1);\n$response = curl_exec($ch);\necho $response;\n```\n\n$url为php页面时，该方法没有遇到问题，但$url为jsp页面时，出现post数据为空的情况，即在jsp页面用`request.getParameter(\"aaa\")`得到的结果为null。尝试将$post_fields拼接为query字符串：\n\n```php\n$post_fields = http_build_query($post_fields);\n```\n\n结果正确。\n抓包对比直接post数组与post query字符串两种方法结果如下：\n\n- ### 直接post数组\n    - header\n\n        ![array header](http://leoyoung07.github.io/blog/img/2016-03-30-differences-between-post-array-and-query-string-with-php-curl/1.png)\n    - body\n\n        ![array body](http://leoyoung07.github.io/blog/img/2016-03-30-differences-between-post-array-and-query-string-with-php-curl/2.png)\n\n- ### post query字符串\n    - header\n\n        ![query string header](http://leoyoung07.github.io/blog/img/2016-03-30-differences-between-post-array-and-query-string-with-php-curl/3.png)\n    - body\n\n        ![query string body](http://leoyoung07.github.io/blog/img/2016-03-30-differences-between-post-array-and-query-string-with-php-curl/4.png)\n\n可见，直接post数组时，Content-type为`multipart/form-data`；而post query字符串时Content-type为`application/x-www-form-urlencoded`。\n\nPHP手册中对CURLOPT_POSTFIELDS的说明如下：\n\n> 全部数据使用HTTP协议中的\"POST\"操作来发送。要发送文件，在文件名前面加上@前缀并使用完整路径。这个参数可以通过urlencoded后的字符串类似'para1=val1&para2=val2&...'或使用一个以字段名为键值，字段数据为值的数组。如果value是一个数组，Content-Type头将会被设置成multipart/form-data。","slug":"differences-between-post-array-and-query-string-with-php-curl","published":1,"updated":"2017-02-08T10:22:19.767Z","photos":[],"link":"","_id":"ciyy89nhg000bbsubsi8igtlw","content":"<p>使用PHP的curl方法post数据时通常使用以下方法：</p>\n<figure class=\"highlight php\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div><div class=\"line\">6</div><div class=\"line\">7</div><div class=\"line\">8</div><div class=\"line\">9</div></pre></td><td class=\"code\"><pre><div class=\"line\">$post_fields = [<span class=\"string\">\"aaa\"</span>=&gt;<span class=\"string\">\"aaaa\"</span>, <span class=\"string\">\"bbb\"</span>=&gt;<span class=\"string\">\"bbbb\"</span>];</div><div class=\"line\">$url = <span class=\"string\">\"http://localhost/sandbox/PHPTest/output.php\"</span>;</div><div class=\"line\">$ch = curl_init();</div><div class=\"line\">curl_setopt($ch, CURLOPT_URL, $url);</div><div class=\"line\">curl_setopt($ch, CURLOPT_POST, <span class=\"number\">1</span>);</div><div class=\"line\">curl_setopt($ch, CURLOPT_POSTFIELDS, $post_fields);</div><div class=\"line\">curl_setopt($ch, CURLOPT_RETURNTRANSFER, <span class=\"number\">1</span>);</div><div class=\"line\">$response = curl_exec($ch);</div><div class=\"line\"><span class=\"keyword\">echo</span> $response;</div></pre></td></tr></table></figure>\n<p>$url为php页面时，该方法没有遇到问题，但$url为jsp页面时，出现post数据为空的情况，即在jsp页面用<code>request.getParameter(&quot;aaa&quot;)</code>得到的结果为null。尝试将$post_fields拼接为query字符串：</p>\n<figure class=\"highlight php\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div></pre></td><td class=\"code\"><pre><div class=\"line\">$post_fields = http_build_query($post_fields);</div></pre></td></tr></table></figure>\n<p>结果正确。<br>抓包对比直接post数组与post query字符串两种方法结果如下：</p>\n<ul>\n<li><h3 id=\"直接post数组\"><a href=\"#直接post数组\" class=\"headerlink\" title=\"直接post数组\"></a>直接post数组</h3><ul>\n<li><p>header</p>\n<p>  <img src=\"http://leoyoung07.github.io/blog/img/2016-03-30-differences-between-post-array-and-query-string-with-php-curl/1.png\" alt=\"array header\"></p>\n</li>\n<li><p>body</p>\n<p>  <img src=\"http://leoyoung07.github.io/blog/img/2016-03-30-differences-between-post-array-and-query-string-with-php-curl/2.png\" alt=\"array body\"></p>\n</li>\n</ul>\n</li>\n<li><h3 id=\"post-query字符串\"><a href=\"#post-query字符串\" class=\"headerlink\" title=\"post query字符串\"></a>post query字符串</h3><ul>\n<li><p>header</p>\n<p>  <img src=\"http://leoyoung07.github.io/blog/img/2016-03-30-differences-between-post-array-and-query-string-with-php-curl/3.png\" alt=\"query string header\"></p>\n</li>\n<li><p>body</p>\n<p>  <img src=\"http://leoyoung07.github.io/blog/img/2016-03-30-differences-between-post-array-and-query-string-with-php-curl/4.png\" alt=\"query string body\"></p>\n</li>\n</ul>\n</li>\n</ul>\n<p>可见，直接post数组时，Content-type为<code>multipart/form-data</code>；而post query字符串时Content-type为<code>application/x-www-form-urlencoded</code>。</p>\n<p>PHP手册中对CURLOPT_POSTFIELDS的说明如下：</p>\n<blockquote>\n<p>全部数据使用HTTP协议中的”POST”操作来发送。要发送文件，在文件名前面加上@前缀并使用完整路径。这个参数可以通过urlencoded后的字符串类似’para1=val1&amp;para2=val2&amp;…’或使用一个以字段名为键值，字段数据为值的数组。如果value是一个数组，Content-Type头将会被设置成multipart/form-data。</p>\n</blockquote>\n","excerpt":"","more":"<p>使用PHP的curl方法post数据时通常使用以下方法：</p>\n<figure class=\"highlight php\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div><div class=\"line\">6</div><div class=\"line\">7</div><div class=\"line\">8</div><div class=\"line\">9</div></pre></td><td class=\"code\"><pre><div class=\"line\">$post_fields = [<span class=\"string\">\"aaa\"</span>=&gt;<span class=\"string\">\"aaaa\"</span>, <span class=\"string\">\"bbb\"</span>=&gt;<span class=\"string\">\"bbbb\"</span>];</div><div class=\"line\">$url = <span class=\"string\">\"http://localhost/sandbox/PHPTest/output.php\"</span>;</div><div class=\"line\">$ch = curl_init();</div><div class=\"line\">curl_setopt($ch, CURLOPT_URL, $url);</div><div class=\"line\">curl_setopt($ch, CURLOPT_POST, <span class=\"number\">1</span>);</div><div class=\"line\">curl_setopt($ch, CURLOPT_POSTFIELDS, $post_fields);</div><div class=\"line\">curl_setopt($ch, CURLOPT_RETURNTRANSFER, <span class=\"number\">1</span>);</div><div class=\"line\">$response = curl_exec($ch);</div><div class=\"line\"><span class=\"keyword\">echo</span> $response;</div></pre></td></tr></table></figure>\n<p>$url为php页面时，该方法没有遇到问题，但$url为jsp页面时，出现post数据为空的情况，即在jsp页面用<code>request.getParameter(&quot;aaa&quot;)</code>得到的结果为null。尝试将$post_fields拼接为query字符串：</p>\n<figure class=\"highlight php\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div></pre></td><td class=\"code\"><pre><div class=\"line\">$post_fields = http_build_query($post_fields);</div></pre></td></tr></table></figure>\n<p>结果正确。<br>抓包对比直接post数组与post query字符串两种方法结果如下：</p>\n<ul>\n<li><h3 id=\"直接post数组\"><a href=\"#直接post数组\" class=\"headerlink\" title=\"直接post数组\"></a>直接post数组</h3><ul>\n<li><p>header</p>\n<p>  <img src=\"http://leoyoung07.github.io/blog/img/2016-03-30-differences-between-post-array-and-query-string-with-php-curl/1.png\" alt=\"array header\"></p>\n</li>\n<li><p>body</p>\n<p>  <img src=\"http://leoyoung07.github.io/blog/img/2016-03-30-differences-between-post-array-and-query-string-with-php-curl/2.png\" alt=\"array body\"></p>\n</li>\n</ul>\n</li>\n<li><h3 id=\"post-query字符串\"><a href=\"#post-query字符串\" class=\"headerlink\" title=\"post query字符串\"></a>post query字符串</h3><ul>\n<li><p>header</p>\n<p>  <img src=\"http://leoyoung07.github.io/blog/img/2016-03-30-differences-between-post-array-and-query-string-with-php-curl/3.png\" alt=\"query string header\"></p>\n</li>\n<li><p>body</p>\n<p>  <img src=\"http://leoyoung07.github.io/blog/img/2016-03-30-differences-between-post-array-and-query-string-with-php-curl/4.png\" alt=\"query string body\"></p>\n</li>\n</ul>\n</li>\n</ul>\n<p>可见，直接post数组时，Content-type为<code>multipart/form-data</code>；而post query字符串时Content-type为<code>application/x-www-form-urlencoded</code>。</p>\n<p>PHP手册中对CURLOPT_POSTFIELDS的说明如下：</p>\n<blockquote>\n<p>全部数据使用HTTP协议中的”POST”操作来发送。要发送文件，在文件名前面加上@前缀并使用完整路径。这个参数可以通过urlencoded后的字符串类似’para1=val1&amp;para2=val2&amp;…’或使用一个以字段名为键值，字段数据为值的数组。如果value是一个数组，Content-Type头将会被设置成multipart/form-data。</p>\n</blockquote>\n"},{"layout":"post","title":"用JavaScript获取URL参数的方法","description":"","date":"2016-03-26T16:00:00.000Z","_content":"\nJavaScript中通过正则表达式获取URL参数的方法：\n\n```javascript\nfunction getQueryString(name) \n{\n    var reg = new RegExp(\"(^|&)\" + name + \"=([^&]*)(&|$)\", \"i\");\n    var r = location.search.substr(1).match(reg);\n    if (r != null) return decodeURI(r[2]);\n    return null;\n}\n```\n\n- r[2]是分组2的内容，即([^&]*)所匹配的内容（r[0]是整个正则表达式所匹配的内容）\n- 正则表达式后边的“i”表示忽略大小写","source":"_posts/javascript-get-url-search-params.md","raw":"---\nlayout: post\ntitle: \"用JavaScript获取URL参数的方法\"\ndescription: \"\"\ncategory: JavaScript\ntags: [javascript, regex]\ndate: 2016-03-27\n---\n\nJavaScript中通过正则表达式获取URL参数的方法：\n\n```javascript\nfunction getQueryString(name) \n{\n    var reg = new RegExp(\"(^|&)\" + name + \"=([^&]*)(&|$)\", \"i\");\n    var r = location.search.substr(1).match(reg);\n    if (r != null) return decodeURI(r[2]);\n    return null;\n}\n```\n\n- r[2]是分组2的内容，即([^&]*)所匹配的内容（r[0]是整个正则表达式所匹配的内容）\n- 正则表达式后边的“i”表示忽略大小写","slug":"javascript-get-url-search-params","published":1,"updated":"2017-02-08T05:30:13.482Z","comments":1,"photos":[],"link":"","_id":"ciyy89nhi000dbsubx9jdvztc","content":"<p>JavaScript中通过正则表达式获取URL参数的方法：</p>\n<figure class=\"highlight javascript\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div><div class=\"line\">6</div><div class=\"line\">7</div></pre></td><td class=\"code\"><pre><div class=\"line\"><span class=\"function\"><span class=\"keyword\">function</span> <span class=\"title\">getQueryString</span>(<span class=\"params\">name</span>) </span></div><div class=\"line\">&#123;</div><div class=\"line\">    <span class=\"keyword\">var</span> reg = <span class=\"keyword\">new</span> <span class=\"built_in\">RegExp</span>(<span class=\"string\">\"(^|&amp;)\"</span> + name + <span class=\"string\">\"=([^&amp;]*)(&amp;|$)\"</span>, <span class=\"string\">\"i\"</span>);</div><div class=\"line\">    <span class=\"keyword\">var</span> r = location.search.substr(<span class=\"number\">1</span>).match(reg);</div><div class=\"line\">    <span class=\"keyword\">if</span> (r != <span class=\"literal\">null</span>) <span class=\"keyword\">return</span> <span class=\"built_in\">decodeURI</span>(r[<span class=\"number\">2</span>]);</div><div class=\"line\">    <span class=\"keyword\">return</span> <span class=\"literal\">null</span>;</div><div class=\"line\">&#125;</div></pre></td></tr></table></figure>\n<ul>\n<li>r[2]是分组2的内容，即([^&amp;]*)所匹配的内容（r[0]是整个正则表达式所匹配的内容）</li>\n<li>正则表达式后边的“i”表示忽略大小写</li>\n</ul>\n","excerpt":"","more":"<p>JavaScript中通过正则表达式获取URL参数的方法：</p>\n<figure class=\"highlight javascript\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div><div class=\"line\">6</div><div class=\"line\">7</div></pre></td><td class=\"code\"><pre><div class=\"line\"><span class=\"function\"><span class=\"keyword\">function</span> <span class=\"title\">getQueryString</span>(<span class=\"params\">name</span>) </div><div class=\"line\"></span>&#123;</div><div class=\"line\">    <span class=\"keyword\">var</span> reg = <span class=\"keyword\">new</span> <span class=\"built_in\">RegExp</span>(<span class=\"string\">\"(^|&amp;)\"</span> + name + <span class=\"string\">\"=([^&amp;]*)(&amp;|$)\"</span>, <span class=\"string\">\"i\"</span>);</div><div class=\"line\">    <span class=\"keyword\">var</span> r = location.search.substr(<span class=\"number\">1</span>).match(reg);</div><div class=\"line\">    <span class=\"keyword\">if</span> (r != <span class=\"literal\">null</span>) <span class=\"keyword\">return</span> <span class=\"built_in\">decodeURI</span>(r[<span class=\"number\">2</span>]);</div><div class=\"line\">    <span class=\"keyword\">return</span> <span class=\"literal\">null</span>;</div><div class=\"line\">&#125;</div></pre></td></tr></table></figure>\n<ul>\n<li>r[2]是分组2的内容，即([^&amp;]*)所匹配的内容（r[0]是整个正则表达式所匹配的内容）</li>\n<li>正则表达式后边的“i”表示忽略大小写</li>\n</ul>\n"},{"layout":"post","title":"JavaScript中的求模和求余","description":"mod and rem in javascript","date":"2016-06-06T16:00:00.000Z","_content":"\n# 求模与求余\n\n求模和求余其实是两种不同的运算。当两个操作数同号时，它们的运算结果相同；而当两个操作数异号时，它们的运算结果就不同了。\n\n求模与求余运算都分两步进行：\n\n1. 求整数商：c = a/b;\n1. 求值: r = a - c*b;\n\n求模和求余的差别在第一步：\n\n- 求模是向负无穷的方向舍弃小数位（(-1)/3 = -1）\n- 求余是向0的方向舍弃小数位（(-1)/3 = 0）\n\n# JavaScript中的求余\n\nJavaScript中的 `%` 运算符其实是求余运算，即：\n\n```javascript\nconsole.log((-13) % 64);\n```\n\n结果是-13。\n\n# JavaScript中的求模\n\nJavaScript中的求模运算可以采用以下方法实现：\n\n```javascript\nNumber.prototype.mod = function (n)\n{\n    return ((this % n) + n) % n;\n}\n```\n\n此时，用：\n\n```javascript\nconsole.log((-13).mod(64));\n```\n\n结果是51。","source":"_posts/mod-and-rem-in-javascript.md","raw":"---\nlayout: post\ntitle: \"JavaScript中的求模和求余\"\ndescription: \"mod and rem in javascript\"\ncategory: JavaScript\ntags: [javascript,math]\ndate: 2016-06-07\n---\n\n# 求模与求余\n\n求模和求余其实是两种不同的运算。当两个操作数同号时，它们的运算结果相同；而当两个操作数异号时，它们的运算结果就不同了。\n\n求模与求余运算都分两步进行：\n\n1. 求整数商：c = a/b;\n1. 求值: r = a - c*b;\n\n求模和求余的差别在第一步：\n\n- 求模是向负无穷的方向舍弃小数位（(-1)/3 = -1）\n- 求余是向0的方向舍弃小数位（(-1)/3 = 0）\n\n# JavaScript中的求余\n\nJavaScript中的 `%` 运算符其实是求余运算，即：\n\n```javascript\nconsole.log((-13) % 64);\n```\n\n结果是-13。\n\n# JavaScript中的求模\n\nJavaScript中的求模运算可以采用以下方法实现：\n\n```javascript\nNumber.prototype.mod = function (n)\n{\n    return ((this % n) + n) % n;\n}\n```\n\n此时，用：\n\n```javascript\nconsole.log((-13).mod(64));\n```\n\n结果是51。","slug":"mod-and-rem-in-javascript","published":1,"updated":"2017-02-08T05:31:30.083Z","comments":1,"photos":[],"link":"","_id":"ciyy89nhm000hbsub8qbvfbwt","content":"<h1 id=\"求模与求余\"><a href=\"#求模与求余\" class=\"headerlink\" title=\"求模与求余\"></a>求模与求余</h1><p>求模和求余其实是两种不同的运算。当两个操作数同号时，它们的运算结果相同；而当两个操作数异号时，它们的运算结果就不同了。</p>\n<p>求模与求余运算都分两步进行：</p>\n<ol>\n<li>求整数商：c = a/b;</li>\n<li>求值: r = a - c*b;</li>\n</ol>\n<p>求模和求余的差别在第一步：</p>\n<ul>\n<li>求模是向负无穷的方向舍弃小数位（(-1)/3 = -1）</li>\n<li>求余是向0的方向舍弃小数位（(-1)/3 = 0）</li>\n</ul>\n<h1 id=\"JavaScript中的求余\"><a href=\"#JavaScript中的求余\" class=\"headerlink\" title=\"JavaScript中的求余\"></a>JavaScript中的求余</h1><p>JavaScript中的 <code>%</code> 运算符其实是求余运算，即：</p>\n<figure class=\"highlight javascript\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div></pre></td><td class=\"code\"><pre><div class=\"line\"><span class=\"built_in\">console</span>.log((<span class=\"number\">-13</span>) % <span class=\"number\">64</span>);</div></pre></td></tr></table></figure>\n<p>结果是-13。</p>\n<h1 id=\"JavaScript中的求模\"><a href=\"#JavaScript中的求模\" class=\"headerlink\" title=\"JavaScript中的求模\"></a>JavaScript中的求模</h1><p>JavaScript中的求模运算可以采用以下方法实现：</p>\n<figure class=\"highlight javascript\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div></pre></td><td class=\"code\"><pre><div class=\"line\"><span class=\"built_in\">Number</span>.prototype.mod = <span class=\"function\"><span class=\"keyword\">function</span> (<span class=\"params\">n</span>)</span></div><div class=\"line\">&#123;</div><div class=\"line\">    <span class=\"keyword\">return</span> ((<span class=\"keyword\">this</span> % n) + n) % n;</div><div class=\"line\">&#125;</div></pre></td></tr></table></figure>\n<p>此时，用：</p>\n<figure class=\"highlight javascript\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div></pre></td><td class=\"code\"><pre><div class=\"line\"><span class=\"built_in\">console</span>.log((<span class=\"number\">-13</span>).mod(<span class=\"number\">64</span>));</div></pre></td></tr></table></figure>\n<p>结果是51。</p>\n","excerpt":"","more":"<h1 id=\"求模与求余\"><a href=\"#求模与求余\" class=\"headerlink\" title=\"求模与求余\"></a>求模与求余</h1><p>求模和求余其实是两种不同的运算。当两个操作数同号时，它们的运算结果相同；而当两个操作数异号时，它们的运算结果就不同了。</p>\n<p>求模与求余运算都分两步进行：</p>\n<ol>\n<li>求整数商：c = a/b;</li>\n<li>求值: r = a - c*b;</li>\n</ol>\n<p>求模和求余的差别在第一步：</p>\n<ul>\n<li>求模是向负无穷的方向舍弃小数位（(-1)/3 = -1）</li>\n<li>求余是向0的方向舍弃小数位（(-1)/3 = 0）</li>\n</ul>\n<h1 id=\"JavaScript中的求余\"><a href=\"#JavaScript中的求余\" class=\"headerlink\" title=\"JavaScript中的求余\"></a>JavaScript中的求余</h1><p>JavaScript中的 <code>%</code> 运算符其实是求余运算，即：</p>\n<figure class=\"highlight javascript\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div></pre></td><td class=\"code\"><pre><div class=\"line\"><span class=\"built_in\">console</span>.log((<span class=\"number\">-13</span>) % <span class=\"number\">64</span>);</div></pre></td></tr></table></figure>\n<p>结果是-13。</p>\n<h1 id=\"JavaScript中的求模\"><a href=\"#JavaScript中的求模\" class=\"headerlink\" title=\"JavaScript中的求模\"></a>JavaScript中的求模</h1><p>JavaScript中的求模运算可以采用以下方法实现：</p>\n<figure class=\"highlight javascript\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div></pre></td><td class=\"code\"><pre><div class=\"line\"><span class=\"built_in\">Number</span>.prototype.mod = <span class=\"function\"><span class=\"keyword\">function</span> (<span class=\"params\">n</span>)</div><div class=\"line\"></span>&#123;</div><div class=\"line\">    <span class=\"keyword\">return</span> ((<span class=\"keyword\">this</span> % n) + n) % n;</div><div class=\"line\">&#125;</div></pre></td></tr></table></figure>\n<p>此时，用：</p>\n<figure class=\"highlight javascript\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div></pre></td><td class=\"code\"><pre><div class=\"line\"><span class=\"built_in\">console</span>.log((<span class=\"number\">-13</span>).mod(<span class=\"number\">64</span>));</div></pre></td></tr></table></figure>\n<p>结果是51。</p>\n"},{"layout":"post","title":"Nginx多站点配置","description":"nginx multi site","date":"2016-11-20T16:00:00.000Z","_content":"\n# 概述\n\n利用Nginx可以在一台服务器上搭建多个站点，实现从不同的二级域名访问不同的web应用。例如，我有一级域名 leoyoung.site，其下有2个二级域名 test.leoyoung.site 和 blog.leoyoung.site，它们都解析至同一IP，通过配置Nginx可以实现将 test.leoyoung.site 指向一个PHP站点，将 blog.leoyoung.site 指向一个 Django站点。服务器运行ubuntu 14.04系统，以下是配置方法。\n\n# 安装Nginx\n\n`sudo apt-get install nginx`\n\n安装后，所有的配置文件都在/etc/nginx下， 程序文件为/usr/sbin/nginx。查看nginx.conf文件，注意到以下几行配置：\n\n```bash\n##\n# Virtual Host Configs\n##\n\ninclude /etc/nginx/conf.d/*.conf;\ninclude /etc/nginx/sites-enabled/*;\n```\n\n因此，可在/etc/nginx/conf.d/目录下添加conf文件以实现多站点配置。\n\n# Nginx下的PHP站点配置\n\n- ## 安装PHP环境\n\n    `sudo apt-get install php5-cli php5-cgi mysql-server php5-mysql`\n\n- ## 安装FastCgi\n\n    `sudo apt-get install php5-fpm`\n\n- ## 配置Nginx\n    在 `/etc/nginx/conf.d` 目录下创建`test.leoyoung.site.conf`配置文件，其内容为：\n    ```bash\n    server {\n        listen 80;\n\n        root /data/htdoc/test;\n        index index.html index.htm;\n\n        server_name test.leoyoung.site;\n\n        location / {\n            # First attempt to serve request as file, then\n            # as directory, then fall back to displaying a 404.\n            try_files $uri $uri/ =404;\n            # Uncomment to enable naxsi on this location\n            # include /etc/nginx/naxsi.rules\n        }\n        location ~ \\.php$ {\n            fastcgi_split_path_info ^(.+\\.php)(/.+)$;\n            # NOTE: You should have \"cgi.fix_pathinfo = 0;\" in php.ini\n\n            # With php5-cgi alone:\n            fastcgi_pass 127.0.0.1:8000;\n            # With php5-fpm:\n            #fastcgi_pass unix:/var/run/php5-fpm.sock;\n            fastcgi_index index.php;\n            include fastcgi_params;\n        }\n    }\n    ```\n    `/data/htdoc/test` 为PHP站点的根目录。\n\n- ## 设置php-cgi开机启动\n    在 中添加一行：\n\n    `spawn-fcgi -a 127.0.0.1 -p 8000 -C 10 -u www-data -f /usr/bin/php-cgi >> /data/log/phpcgi.log 2>&1 &`\n\n   其中， `/data/log/phpcgi.log` 为访问日志文件。\n\n# Nginx下的Django站点配置\n\n- ## 安装Django\n\n    `pip3 install Django`\n\n- ## 安装uwsgi\n\n    `pip3 install uwsgi`\n\n- ## 配置uwsgi\n\n    \n\n- ## 配置Nginx\n\n- ## 处理静态文件\n\n# 参考\n\n- [Nginx - Ubuntu中文](http://wiki.ubuntu.org.cn/Nginx#.E5.AE.89.E8.A3.85nginx)\n\n- [Ubuntu上通过nginx部署Django笔记](http://www.cnblogs.com/jhao/p/6071790.html)","source":"_posts/nginx-multi-site.md","raw":"---\nlayout: post\ntitle: \"Nginx多站点配置\"\ndescription: \"nginx multi site\"\ncategory: Nginx\ntags: [nginx]\ndate: 2016-11-21\n---\n\n# 概述\n\n利用Nginx可以在一台服务器上搭建多个站点，实现从不同的二级域名访问不同的web应用。例如，我有一级域名 leoyoung.site，其下有2个二级域名 test.leoyoung.site 和 blog.leoyoung.site，它们都解析至同一IP，通过配置Nginx可以实现将 test.leoyoung.site 指向一个PHP站点，将 blog.leoyoung.site 指向一个 Django站点。服务器运行ubuntu 14.04系统，以下是配置方法。\n\n# 安装Nginx\n\n`sudo apt-get install nginx`\n\n安装后，所有的配置文件都在/etc/nginx下， 程序文件为/usr/sbin/nginx。查看nginx.conf文件，注意到以下几行配置：\n\n```bash\n##\n# Virtual Host Configs\n##\n\ninclude /etc/nginx/conf.d/*.conf;\ninclude /etc/nginx/sites-enabled/*;\n```\n\n因此，可在/etc/nginx/conf.d/目录下添加conf文件以实现多站点配置。\n\n# Nginx下的PHP站点配置\n\n- ## 安装PHP环境\n\n    `sudo apt-get install php5-cli php5-cgi mysql-server php5-mysql`\n\n- ## 安装FastCgi\n\n    `sudo apt-get install php5-fpm`\n\n- ## 配置Nginx\n    在 `/etc/nginx/conf.d` 目录下创建`test.leoyoung.site.conf`配置文件，其内容为：\n    ```bash\n    server {\n        listen 80;\n\n        root /data/htdoc/test;\n        index index.html index.htm;\n\n        server_name test.leoyoung.site;\n\n        location / {\n            # First attempt to serve request as file, then\n            # as directory, then fall back to displaying a 404.\n            try_files $uri $uri/ =404;\n            # Uncomment to enable naxsi on this location\n            # include /etc/nginx/naxsi.rules\n        }\n        location ~ \\.php$ {\n            fastcgi_split_path_info ^(.+\\.php)(/.+)$;\n            # NOTE: You should have \"cgi.fix_pathinfo = 0;\" in php.ini\n\n            # With php5-cgi alone:\n            fastcgi_pass 127.0.0.1:8000;\n            # With php5-fpm:\n            #fastcgi_pass unix:/var/run/php5-fpm.sock;\n            fastcgi_index index.php;\n            include fastcgi_params;\n        }\n    }\n    ```\n    `/data/htdoc/test` 为PHP站点的根目录。\n\n- ## 设置php-cgi开机启动\n    在 中添加一行：\n\n    `spawn-fcgi -a 127.0.0.1 -p 8000 -C 10 -u www-data -f /usr/bin/php-cgi >> /data/log/phpcgi.log 2>&1 &`\n\n   其中， `/data/log/phpcgi.log` 为访问日志文件。\n\n# Nginx下的Django站点配置\n\n- ## 安装Django\n\n    `pip3 install Django`\n\n- ## 安装uwsgi\n\n    `pip3 install uwsgi`\n\n- ## 配置uwsgi\n\n    \n\n- ## 配置Nginx\n\n- ## 处理静态文件\n\n# 参考\n\n- [Nginx - Ubuntu中文](http://wiki.ubuntu.org.cn/Nginx#.E5.AE.89.E8.A3.85nginx)\n\n- [Ubuntu上通过nginx部署Django笔记](http://www.cnblogs.com/jhao/p/6071790.html)","slug":"nginx-multi-site","published":1,"updated":"2017-02-08T05:32:30.081Z","comments":1,"photos":[],"link":"","_id":"ciyy89nhq000jbsubxgto2o6g","content":"<h1 id=\"概述\"><a href=\"#概述\" class=\"headerlink\" title=\"概述\"></a>概述</h1><p>利用Nginx可以在一台服务器上搭建多个站点，实现从不同的二级域名访问不同的web应用。例如，我有一级域名 leoyoung.site，其下有2个二级域名 test.leoyoung.site 和 blog.leoyoung.site，它们都解析至同一IP，通过配置Nginx可以实现将 test.leoyoung.site 指向一个PHP站点，将 blog.leoyoung.site 指向一个 Django站点。服务器运行ubuntu 14.04系统，以下是配置方法。</p>\n<h1 id=\"安装Nginx\"><a href=\"#安装Nginx\" class=\"headerlink\" title=\"安装Nginx\"></a>安装Nginx</h1><p><code>sudo apt-get install nginx</code></p>\n<p>安装后，所有的配置文件都在/etc/nginx下， 程序文件为/usr/sbin/nginx。查看nginx.conf文件，注意到以下几行配置：</p>\n<figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div><div class=\"line\">6</div></pre></td><td class=\"code\"><pre><div class=\"line\"><span class=\"comment\">##</span></div><div class=\"line\"><span class=\"comment\"># Virtual Host Configs</span></div><div class=\"line\"><span class=\"comment\">##</span></div><div class=\"line\"></div><div class=\"line\">include /etc/nginx/conf.d/*.conf;</div><div class=\"line\">include /etc/nginx/sites-enabled/*;</div></pre></td></tr></table></figure>\n<p>因此，可在/etc/nginx/conf.d/目录下添加conf文件以实现多站点配置。</p>\n<h1 id=\"Nginx下的PHP站点配置\"><a href=\"#Nginx下的PHP站点配置\" class=\"headerlink\" title=\"Nginx下的PHP站点配置\"></a>Nginx下的PHP站点配置</h1><ul>\n<li><h2 id=\"安装PHP环境\"><a href=\"#安装PHP环境\" class=\"headerlink\" title=\"安装PHP环境\"></a>安装PHP环境</h2><p>  <code>sudo apt-get install php5-cli php5-cgi mysql-server php5-mysql</code></p>\n</li>\n<li><h2 id=\"安装FastCgi\"><a href=\"#安装FastCgi\" class=\"headerlink\" title=\"安装FastCgi\"></a>安装FastCgi</h2><p>  <code>sudo apt-get install php5-fpm</code></p>\n</li>\n<li><h2 id=\"配置Nginx\"><a href=\"#配置Nginx\" class=\"headerlink\" title=\"配置Nginx\"></a>配置Nginx</h2><p>  在 <code>/etc/nginx/conf.d</code> 目录下创建<code>test.leoyoung.site.conf</code>配置文件，其内容为：</p>\n  <figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div><div class=\"line\">6</div><div class=\"line\">7</div><div class=\"line\">8</div><div class=\"line\">9</div><div class=\"line\">10</div><div class=\"line\">11</div><div class=\"line\">12</div><div class=\"line\">13</div><div class=\"line\">14</div><div class=\"line\">15</div><div class=\"line\">16</div><div class=\"line\">17</div><div class=\"line\">18</div><div class=\"line\">19</div><div class=\"line\">20</div><div class=\"line\">21</div><div class=\"line\">22</div><div class=\"line\">23</div><div class=\"line\">24</div><div class=\"line\">25</div><div class=\"line\">26</div><div class=\"line\">27</div></pre></td><td class=\"code\"><pre><div class=\"line\">server &#123;</div><div class=\"line\">    listen 80;</div><div class=\"line\"></div><div class=\"line\">    root /data/htdoc/<span class=\"built_in\">test</span>;</div><div class=\"line\">    index index.html index.htm;</div><div class=\"line\"></div><div class=\"line\">    server_name test.leoyoung.site;</div><div class=\"line\"></div><div class=\"line\">    location / &#123;</div><div class=\"line\">        <span class=\"comment\"># First attempt to serve request as file, then</span></div><div class=\"line\">        <span class=\"comment\"># as directory, then fall back to displaying a 404.</span></div><div class=\"line\">        try_files <span class=\"variable\">$uri</span> <span class=\"variable\">$uri</span>/ =404;</div><div class=\"line\">        <span class=\"comment\"># Uncomment to enable naxsi on this location</span></div><div class=\"line\">        <span class=\"comment\"># include /etc/nginx/naxsi.rules</span></div><div class=\"line\">    &#125;</div><div class=\"line\">    location ~ \\.php$ &#123;</div><div class=\"line\">        fastcgi_split_path_info ^(.+\\.php)(/.+)$;</div><div class=\"line\">        <span class=\"comment\"># <span class=\"doctag\">NOTE:</span> You should have \"cgi.fix_pathinfo = 0;\" in php.ini</span></div><div class=\"line\"></div><div class=\"line\">        <span class=\"comment\"># With php5-cgi alone:</span></div><div class=\"line\">        fastcgi_pass 127.0.0.1:8000;</div><div class=\"line\">        <span class=\"comment\"># With php5-fpm:</span></div><div class=\"line\">        <span class=\"comment\">#fastcgi_pass unix:/var/run/php5-fpm.sock;</span></div><div class=\"line\">        fastcgi_index index.php;</div><div class=\"line\">        include fastcgi_params;</div><div class=\"line\">    &#125;</div><div class=\"line\">&#125;</div></pre></td></tr></table></figure>\n<p>  <code>/data/htdoc/test</code> 为PHP站点的根目录。</p>\n</li>\n<li><h2 id=\"设置php-cgi开机启动\"><a href=\"#设置php-cgi开机启动\" class=\"headerlink\" title=\"设置php-cgi开机启动\"></a>设置php-cgi开机启动</h2><p>  在 中添加一行：</p>\n<p>  <code>spawn-fcgi -a 127.0.0.1 -p 8000 -C 10 -u www-data -f /usr/bin/php-cgi &gt;&gt; /data/log/phpcgi.log 2&gt;&amp;1 &amp;</code></p>\n<p> 其中， <code>/data/log/phpcgi.log</code> 为访问日志文件。</p>\n</li>\n</ul>\n<h1 id=\"Nginx下的Django站点配置\"><a href=\"#Nginx下的Django站点配置\" class=\"headerlink\" title=\"Nginx下的Django站点配置\"></a>Nginx下的Django站点配置</h1><ul>\n<li><h2 id=\"安装Django\"><a href=\"#安装Django\" class=\"headerlink\" title=\"安装Django\"></a>安装Django</h2><p>  <code>pip3 install Django</code></p>\n</li>\n<li><h2 id=\"安装uwsgi\"><a href=\"#安装uwsgi\" class=\"headerlink\" title=\"安装uwsgi\"></a>安装uwsgi</h2><p>  <code>pip3 install uwsgi</code></p>\n</li>\n<li><h2 id=\"配置uwsgi\"><a href=\"#配置uwsgi\" class=\"headerlink\" title=\"配置uwsgi\"></a>配置uwsgi</h2></li>\n</ul>\n<ul>\n<li><h2 id=\"配置Nginx-1\"><a href=\"#配置Nginx-1\" class=\"headerlink\" title=\"配置Nginx\"></a>配置Nginx</h2></li>\n<li><h2 id=\"处理静态文件\"><a href=\"#处理静态文件\" class=\"headerlink\" title=\"处理静态文件\"></a>处理静态文件</h2></li>\n</ul>\n<h1 id=\"参考\"><a href=\"#参考\" class=\"headerlink\" title=\"参考\"></a>参考</h1><ul>\n<li><p><a href=\"http://wiki.ubuntu.org.cn/Nginx#.E5.AE.89.E8.A3.85nginx\" target=\"_blank\" rel=\"external\">Nginx - Ubuntu中文</a></p>\n</li>\n<li><p><a href=\"http://www.cnblogs.com/jhao/p/6071790.html\" target=\"_blank\" rel=\"external\">Ubuntu上通过nginx部署Django笔记</a></p>\n</li>\n</ul>\n","excerpt":"","more":"<h1 id=\"概述\"><a href=\"#概述\" class=\"headerlink\" title=\"概述\"></a>概述</h1><p>利用Nginx可以在一台服务器上搭建多个站点，实现从不同的二级域名访问不同的web应用。例如，我有一级域名 leoyoung.site，其下有2个二级域名 test.leoyoung.site 和 blog.leoyoung.site，它们都解析至同一IP，通过配置Nginx可以实现将 test.leoyoung.site 指向一个PHP站点，将 blog.leoyoung.site 指向一个 Django站点。服务器运行ubuntu 14.04系统，以下是配置方法。</p>\n<h1 id=\"安装Nginx\"><a href=\"#安装Nginx\" class=\"headerlink\" title=\"安装Nginx\"></a>安装Nginx</h1><p><code>sudo apt-get install nginx</code></p>\n<p>安装后，所有的配置文件都在/etc/nginx下， 程序文件为/usr/sbin/nginx。查看nginx.conf文件，注意到以下几行配置：</p>\n<figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div><div class=\"line\">6</div></pre></td><td class=\"code\"><pre><div class=\"line\"><span class=\"comment\">##</span></div><div class=\"line\"><span class=\"comment\"># Virtual Host Configs</span></div><div class=\"line\"><span class=\"comment\">##</span></div><div class=\"line\"></div><div class=\"line\">include /etc/nginx/conf.d/*.conf;</div><div class=\"line\">include /etc/nginx/sites-enabled/*;</div></pre></td></tr></table></figure>\n<p>因此，可在/etc/nginx/conf.d/目录下添加conf文件以实现多站点配置。</p>\n<h1 id=\"Nginx下的PHP站点配置\"><a href=\"#Nginx下的PHP站点配置\" class=\"headerlink\" title=\"Nginx下的PHP站点配置\"></a>Nginx下的PHP站点配置</h1><ul>\n<li><h2 id=\"安装PHP环境\"><a href=\"#安装PHP环境\" class=\"headerlink\" title=\"安装PHP环境\"></a>安装PHP环境</h2><p>  <code>sudo apt-get install php5-cli php5-cgi mysql-server php5-mysql</code></p>\n</li>\n<li><h2 id=\"安装FastCgi\"><a href=\"#安装FastCgi\" class=\"headerlink\" title=\"安装FastCgi\"></a>安装FastCgi</h2><p>  <code>sudo apt-get install php5-fpm</code></p>\n</li>\n<li><h2 id=\"配置Nginx\"><a href=\"#配置Nginx\" class=\"headerlink\" title=\"配置Nginx\"></a>配置Nginx</h2><p>  在 <code>/etc/nginx/conf.d</code> 目录下创建<code>test.leoyoung.site.conf</code>配置文件，其内容为：</p>\n  <figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div><div class=\"line\">6</div><div class=\"line\">7</div><div class=\"line\">8</div><div class=\"line\">9</div><div class=\"line\">10</div><div class=\"line\">11</div><div class=\"line\">12</div><div class=\"line\">13</div><div class=\"line\">14</div><div class=\"line\">15</div><div class=\"line\">16</div><div class=\"line\">17</div><div class=\"line\">18</div><div class=\"line\">19</div><div class=\"line\">20</div><div class=\"line\">21</div><div class=\"line\">22</div><div class=\"line\">23</div><div class=\"line\">24</div><div class=\"line\">25</div><div class=\"line\">26</div><div class=\"line\">27</div></pre></td><td class=\"code\"><pre><div class=\"line\">server &#123;</div><div class=\"line\">    listen 80;</div><div class=\"line\"></div><div class=\"line\">    root /data/htdoc/<span class=\"built_in\">test</span>;</div><div class=\"line\">    index index.html index.htm;</div><div class=\"line\"></div><div class=\"line\">    server_name test.leoyoung.site;</div><div class=\"line\"></div><div class=\"line\">    location / &#123;</div><div class=\"line\">        <span class=\"comment\"># First attempt to serve request as file, then</span></div><div class=\"line\">        <span class=\"comment\"># as directory, then fall back to displaying a 404.</span></div><div class=\"line\">        try_files <span class=\"variable\">$uri</span> <span class=\"variable\">$uri</span>/ =404;</div><div class=\"line\">        <span class=\"comment\"># Uncomment to enable naxsi on this location</span></div><div class=\"line\">        <span class=\"comment\"># include /etc/nginx/naxsi.rules</span></div><div class=\"line\">    &#125;</div><div class=\"line\">    location ~ \\.php$ &#123;</div><div class=\"line\">        fastcgi_split_path_info ^(.+\\.php)(/.+)$;</div><div class=\"line\">        <span class=\"comment\"># <span class=\"doctag\">NOTE:</span> You should have \"cgi.fix_pathinfo = 0;\" in php.ini</span></div><div class=\"line\"></div><div class=\"line\">        <span class=\"comment\"># With php5-cgi alone:</span></div><div class=\"line\">        fastcgi_pass 127.0.0.1:8000;</div><div class=\"line\">        <span class=\"comment\"># With php5-fpm:</span></div><div class=\"line\">        <span class=\"comment\">#fastcgi_pass unix:/var/run/php5-fpm.sock;</span></div><div class=\"line\">        fastcgi_index index.php;</div><div class=\"line\">        include fastcgi_params;</div><div class=\"line\">    &#125;</div><div class=\"line\">&#125;</div></pre></td></tr></table></figure>\n<p>  <code>/data/htdoc/test</code> 为PHP站点的根目录。</p>\n</li>\n<li><h2 id=\"设置php-cgi开机启动\"><a href=\"#设置php-cgi开机启动\" class=\"headerlink\" title=\"设置php-cgi开机启动\"></a>设置php-cgi开机启动</h2><p>  在 中添加一行：</p>\n<p>  <code>spawn-fcgi -a 127.0.0.1 -p 8000 -C 10 -u www-data -f /usr/bin/php-cgi &gt;&gt; /data/log/phpcgi.log 2&gt;&amp;1 &amp;</code></p>\n<p> 其中， <code>/data/log/phpcgi.log</code> 为访问日志文件。</p>\n</li>\n</ul>\n<h1 id=\"Nginx下的Django站点配置\"><a href=\"#Nginx下的Django站点配置\" class=\"headerlink\" title=\"Nginx下的Django站点配置\"></a>Nginx下的Django站点配置</h1><ul>\n<li><h2 id=\"安装Django\"><a href=\"#安装Django\" class=\"headerlink\" title=\"安装Django\"></a>安装Django</h2><p>  <code>pip3 install Django</code></p>\n</li>\n<li><h2 id=\"安装uwsgi\"><a href=\"#安装uwsgi\" class=\"headerlink\" title=\"安装uwsgi\"></a>安装uwsgi</h2><p>  <code>pip3 install uwsgi</code></p>\n</li>\n<li><h2 id=\"配置uwsgi\"><a href=\"#配置uwsgi\" class=\"headerlink\" title=\"配置uwsgi\"></a>配置uwsgi</h2></li>\n</ul>\n<ul>\n<li><h2 id=\"配置Nginx-1\"><a href=\"#配置Nginx-1\" class=\"headerlink\" title=\"配置Nginx\"></a>配置Nginx</h2></li>\n<li><h2 id=\"处理静态文件\"><a href=\"#处理静态文件\" class=\"headerlink\" title=\"处理静态文件\"></a>处理静态文件</h2></li>\n</ul>\n<h1 id=\"参考\"><a href=\"#参考\" class=\"headerlink\" title=\"参考\"></a>参考</h1><ul>\n<li><p><a href=\"http://wiki.ubuntu.org.cn/Nginx#.E5.AE.89.E8.A3.85nginx\">Nginx - Ubuntu中文</a></p>\n</li>\n<li><p><a href=\"http://www.cnblogs.com/jhao/p/6071790.html\">Ubuntu上通过nginx部署Django笔记</a></p>\n</li>\n</ul>\n"},{"layout":"post","title":"MVVM Light 应用开发（一）——入门","description":"mvvm light dev 1","date":"2016-09-09T16:00:00.000Z","_content":"\n# MVVM 简介\n\n# MVVM Light 简介\n\n# 安装模版 & 创建应用\n\n# Hello World\n\n","source":"_posts/mvvm-light-dev-1.md","raw":"---\nlayout: post\ntitle: \"MVVM Light 应用开发（一）——入门\"\ndescription: \"mvvm light dev 1\"\ncategory: MVVM-Light-Dev\ntags: [mvvm, c#, wpf]\ndate: 2016-09-10\n---\n\n# MVVM 简介\n\n# MVVM Light 简介\n\n# 安装模版 & 创建应用\n\n# Hello World\n\n","slug":"mvvm-light-dev-1","published":1,"updated":"2017-02-08T05:32:16.323Z","comments":1,"photos":[],"link":"","_id":"ciyy89nhw000obsubhuvrdb5e","content":"<h1 id=\"MVVM-简介\"><a href=\"#MVVM-简介\" class=\"headerlink\" title=\"MVVM 简介\"></a>MVVM 简介</h1><h1 id=\"MVVM-Light-简介\"><a href=\"#MVVM-Light-简介\" class=\"headerlink\" title=\"MVVM Light 简介\"></a>MVVM Light 简介</h1><h1 id=\"安装模版-amp-创建应用\"><a href=\"#安装模版-amp-创建应用\" class=\"headerlink\" title=\"安装模版 &amp; 创建应用\"></a>安装模版 &amp; 创建应用</h1><h1 id=\"Hello-World\"><a href=\"#Hello-World\" class=\"headerlink\" title=\"Hello World\"></a>Hello World</h1>","excerpt":"","more":"<h1 id=\"MVVM-简介\"><a href=\"#MVVM-简介\" class=\"headerlink\" title=\"MVVM 简介\"></a>MVVM 简介</h1><h1 id=\"MVVM-Light-简介\"><a href=\"#MVVM-Light-简介\" class=\"headerlink\" title=\"MVVM Light 简介\"></a>MVVM Light 简介</h1><h1 id=\"安装模版-amp-创建应用\"><a href=\"#安装模版-amp-创建应用\" class=\"headerlink\" title=\"安装模版 &amp; 创建应用\"></a>安装模版 &amp; 创建应用</h1><h1 id=\"Hello-World\"><a href=\"#Hello-World\" class=\"headerlink\" title=\"Hello World\"></a>Hello World</h1>"},{"layout":"post","title":"微信公众平台下通过网页授权获取用户信息的方法","description":"","date":"2016-03-21T16:00:00.000Z","_content":"\n-\t###\t授权方式\n\n    微信网页的授权方式分为两种：\n\n    - 以 snsapi_base 为 scope 发起的网页授权：用于获取用户的 openid ，为静默授权\n    - 以 snsapi_userinfo 为 scope 发起的网页授权：用于获取用户的基本信息，需要用户手动同意授权\n\n    下面以 snsapi_userinfo 的类型为例，说明网页授权的步骤：\n\n1.  ### 获取code\n\n    引导关注者打开以下页面：\n\n    [https://open.weixin.qq.com/connect/oauth2/authorize?appid=APPID&redirect_uri=REDIRECT_URI&response_type=code&\n    scope=snsapi_userinfo&state=STATE#wechat_redirect]()\n\n    其中 redirect_uri 为需要获取用户信息的页面，redirect_uri 需要进行 urlencode 处理。用户同意授权之后，redirect_uri 的页面就可以通过 GET 的方式从 url 中拿到 code，即：\n\n    `$code = $_GET[\"code\"];`\n\n2.  ### 用code换取网页授权的access_token\n\n    利用上一步获取的code即可换取网页授权access_token，方法如下：\n\n    ```php\n    $api_url = \"https://api.weixin.qq.com/sns/oauth2/access_token?appid={$appid}&secret={$secret}&code={$code}&grant_type=authorization_code\";\n    $response_info = self::get_info_from_api($api_url);\n    if(isset($response_info[\"errcode\"]))\n    {\n        exit(\"get access token failed: \".$response_info[\"errcode\"].\", \".$response_info[\"errmsg\"]);\n    }\n\n    $access_token = $response_info[\"access_token\"];\n    ```\n\n    其中，get_info_from_api 的定义如下：\n\n    ```php\n    public static function get_info_from_api($api_url)\n    {\n        $ch = curl_init();\n        curl_setopt($ch, CURLOPT_URL, $api_url);\n        curl_setopt($ch, CURLOPT_RETURNTRANSFER, 1);\n        curl_setopt($ch, CURLOPT_SSL_VERIFYPEER, false);\n        curl_setopt($ch, CURLOPT_SSL_VERIFYHOST, false);\n        $result = curl_exec($ch);\n        curl_close($ch);\n        $response_info = json_decode($result, true);\n        return $response_info;\n    }\n    ```\n    get_info_from_api 是利用PHP中的curl函数以 GET 方法从微信提供的 api 获取数据，返回的结果为关联数组的形式。\n\n3.  ### 获取用户信息\n\n    接下来，即可用 access_token 获取用户信息：\n\n    ```php\n    $open_id = $response_info[\"openid\"];\n    $api_url = \"https://api.weixin.qq.com/sns/userinfo?access_token={$access_token}&openid={$open_id}&lang=zh_CN\";\n    $user_info = self::get_info_from_api($api_url);\n    if(isset($user_info[\"errcode\"]))\n    {\n        exit(\"get user info failed: \".$user_info[\"errcode\"].\", \".$user_info[\"errmsg\"]);\n    }\n    ```\n\n","source":"_posts/wechat-auth-get-user-info.md","raw":"---\nlayout: post\ntitle: \"微信公众平台下通过网页授权获取用户信息的方法\"\ndescription: \"\"\ncategory: WeChat\ntags: [php, wechat]\ndate: 2016-03-22\n---\n\n-\t###\t授权方式\n\n    微信网页的授权方式分为两种：\n\n    - 以 snsapi_base 为 scope 发起的网页授权：用于获取用户的 openid ，为静默授权\n    - 以 snsapi_userinfo 为 scope 发起的网页授权：用于获取用户的基本信息，需要用户手动同意授权\n\n    下面以 snsapi_userinfo 的类型为例，说明网页授权的步骤：\n\n1.  ### 获取code\n\n    引导关注者打开以下页面：\n\n    [https://open.weixin.qq.com/connect/oauth2/authorize?appid=APPID&redirect_uri=REDIRECT_URI&response_type=code&\n    scope=snsapi_userinfo&state=STATE#wechat_redirect]()\n\n    其中 redirect_uri 为需要获取用户信息的页面，redirect_uri 需要进行 urlencode 处理。用户同意授权之后，redirect_uri 的页面就可以通过 GET 的方式从 url 中拿到 code，即：\n\n    `$code = $_GET[\"code\"];`\n\n2.  ### 用code换取网页授权的access_token\n\n    利用上一步获取的code即可换取网页授权access_token，方法如下：\n\n    ```php\n    $api_url = \"https://api.weixin.qq.com/sns/oauth2/access_token?appid={$appid}&secret={$secret}&code={$code}&grant_type=authorization_code\";\n    $response_info = self::get_info_from_api($api_url);\n    if(isset($response_info[\"errcode\"]))\n    {\n        exit(\"get access token failed: \".$response_info[\"errcode\"].\", \".$response_info[\"errmsg\"]);\n    }\n\n    $access_token = $response_info[\"access_token\"];\n    ```\n\n    其中，get_info_from_api 的定义如下：\n\n    ```php\n    public static function get_info_from_api($api_url)\n    {\n        $ch = curl_init();\n        curl_setopt($ch, CURLOPT_URL, $api_url);\n        curl_setopt($ch, CURLOPT_RETURNTRANSFER, 1);\n        curl_setopt($ch, CURLOPT_SSL_VERIFYPEER, false);\n        curl_setopt($ch, CURLOPT_SSL_VERIFYHOST, false);\n        $result = curl_exec($ch);\n        curl_close($ch);\n        $response_info = json_decode($result, true);\n        return $response_info;\n    }\n    ```\n    get_info_from_api 是利用PHP中的curl函数以 GET 方法从微信提供的 api 获取数据，返回的结果为关联数组的形式。\n\n3.  ### 获取用户信息\n\n    接下来，即可用 access_token 获取用户信息：\n\n    ```php\n    $open_id = $response_info[\"openid\"];\n    $api_url = \"https://api.weixin.qq.com/sns/userinfo?access_token={$access_token}&openid={$open_id}&lang=zh_CN\";\n    $user_info = self::get_info_from_api($api_url);\n    if(isset($user_info[\"errcode\"]))\n    {\n        exit(\"get user info failed: \".$user_info[\"errcode\"].\", \".$user_info[\"errmsg\"]);\n    }\n    ```\n\n","slug":"wechat-auth-get-user-info","published":1,"updated":"2017-02-08T05:29:46.773Z","comments":1,"photos":[],"link":"","_id":"ciyy89nhz000pbsubwmsrp9oh","content":"<ul>\n<li><h3 id=\"授权方式\"><a href=\"#授权方式\" class=\"headerlink\" title=\"授权方式\"></a>授权方式</h3><p>微信网页的授权方式分为两种：</p>\n<ul>\n<li>以 snsapi_base 为 scope 发起的网页授权：用于获取用户的 openid ，为静默授权</li>\n<li>以 snsapi_userinfo 为 scope 发起的网页授权：用于获取用户的基本信息，需要用户手动同意授权</li>\n</ul>\n<p>下面以 snsapi_userinfo 的类型为例，说明网页授权的步骤：</p>\n</li>\n</ul>\n<ol>\n<li><h3 id=\"获取code\"><a href=\"#获取code\" class=\"headerlink\" title=\"获取code\"></a>获取code</h3><p>引导关注者打开以下页面：</p>\n<p><a href=\"\">https://open.weixin.qq.com/connect/oauth2/authorize?appid=APPID&amp;redirect_uri=REDIRECT_URI&amp;response_type=code&amp;<br>scope=snsapi_userinfo&amp;state=STATE#wechat_redirect</a></p>\n<p>其中 redirect_uri 为需要获取用户信息的页面，redirect_uri 需要进行 urlencode 处理。用户同意授权之后，redirect_uri 的页面就可以通过 GET 的方式从 url 中拿到 code，即：</p>\n<p><code>$code = $_GET[&quot;code&quot;];</code></p>\n</li>\n<li><h3 id=\"用code换取网页授权的access-token\"><a href=\"#用code换取网页授权的access-token\" class=\"headerlink\" title=\"用code换取网页授权的access_token\"></a>用code换取网页授权的access_token</h3><p>利用上一步获取的code即可换取网页授权access_token，方法如下：</p>\n<figure class=\"highlight php\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div><div class=\"line\">6</div><div class=\"line\">7</div><div class=\"line\">8</div></pre></td><td class=\"code\"><pre><div class=\"line\">$api_url = <span class=\"string\">\"https://api.weixin.qq.com/sns/oauth2/access_token?appid=&#123;$appid&#125;&amp;secret=&#123;$secret&#125;&amp;code=&#123;$code&#125;&amp;grant_type=authorization_code\"</span>;</div><div class=\"line\">$response_info = <span class=\"keyword\">self</span>::get_info_from_api($api_url);</div><div class=\"line\"><span class=\"keyword\">if</span>(<span class=\"keyword\">isset</span>($response_info[<span class=\"string\">\"errcode\"</span>]))</div><div class=\"line\">&#123;</div><div class=\"line\">    <span class=\"keyword\">exit</span>(<span class=\"string\">\"get access token failed: \"</span>.$response_info[<span class=\"string\">\"errcode\"</span>].<span class=\"string\">\", \"</span>.$response_info[<span class=\"string\">\"errmsg\"</span>]);</div><div class=\"line\">&#125;</div><div class=\"line\"></div><div class=\"line\">$access_token = $response_info[<span class=\"string\">\"access_token\"</span>];</div></pre></td></tr></table></figure>\n<p>其中，get_info_from_api 的定义如下：</p>\n<figure class=\"highlight php\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div><div class=\"line\">6</div><div class=\"line\">7</div><div class=\"line\">8</div><div class=\"line\">9</div><div class=\"line\">10</div><div class=\"line\">11</div><div class=\"line\">12</div></pre></td><td class=\"code\"><pre><div class=\"line\"><span class=\"keyword\">public</span> <span class=\"keyword\">static</span> <span class=\"function\"><span class=\"keyword\">function</span> <span class=\"title\">get_info_from_api</span><span class=\"params\">($api_url)</span></span></div><div class=\"line\">&#123;</div><div class=\"line\">    $ch = curl_init();</div><div class=\"line\">    curl_setopt($ch, CURLOPT_URL, $api_url);</div><div class=\"line\">    curl_setopt($ch, CURLOPT_RETURNTRANSFER, <span class=\"number\">1</span>);</div><div class=\"line\">    curl_setopt($ch, CURLOPT_SSL_VERIFYPEER, <span class=\"keyword\">false</span>);</div><div class=\"line\">    curl_setopt($ch, CURLOPT_SSL_VERIFYHOST, <span class=\"keyword\">false</span>);</div><div class=\"line\">    $result = curl_exec($ch);</div><div class=\"line\">    curl_close($ch);</div><div class=\"line\">    $response_info = json_decode($result, <span class=\"keyword\">true</span>);</div><div class=\"line\">    <span class=\"keyword\">return</span> $response_info;</div><div class=\"line\">&#125;</div></pre></td></tr></table></figure>\n<p>get_info_from_api 是利用PHP中的curl函数以 GET 方法从微信提供的 api 获取数据，返回的结果为关联数组的形式。</p>\n</li>\n<li><h3 id=\"获取用户信息\"><a href=\"#获取用户信息\" class=\"headerlink\" title=\"获取用户信息\"></a>获取用户信息</h3><p>接下来，即可用 access_token 获取用户信息：</p>\n<figure class=\"highlight php\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div><div class=\"line\">6</div><div class=\"line\">7</div></pre></td><td class=\"code\"><pre><div class=\"line\">$open_id = $response_info[<span class=\"string\">\"openid\"</span>];</div><div class=\"line\">$api_url = <span class=\"string\">\"https://api.weixin.qq.com/sns/userinfo?access_token=&#123;$access_token&#125;&amp;openid=&#123;$open_id&#125;&amp;lang=zh_CN\"</span>;</div><div class=\"line\">$user_info = <span class=\"keyword\">self</span>::get_info_from_api($api_url);</div><div class=\"line\"><span class=\"keyword\">if</span>(<span class=\"keyword\">isset</span>($user_info[<span class=\"string\">\"errcode\"</span>]))</div><div class=\"line\">&#123;</div><div class=\"line\">    <span class=\"keyword\">exit</span>(<span class=\"string\">\"get user info failed: \"</span>.$user_info[<span class=\"string\">\"errcode\"</span>].<span class=\"string\">\", \"</span>.$user_info[<span class=\"string\">\"errmsg\"</span>]);</div><div class=\"line\">&#125;</div></pre></td></tr></table></figure>\n</li>\n</ol>\n","excerpt":"","more":"<ul>\n<li><h3 id=\"授权方式\"><a href=\"#授权方式\" class=\"headerlink\" title=\"授权方式\"></a>授权方式</h3><p>微信网页的授权方式分为两种：</p>\n<ul>\n<li>以 snsapi_base 为 scope 发起的网页授权：用于获取用户的 openid ，为静默授权</li>\n<li>以 snsapi_userinfo 为 scope 发起的网页授权：用于获取用户的基本信息，需要用户手动同意授权</li>\n</ul>\n<p>下面以 snsapi_userinfo 的类型为例，说明网页授权的步骤：</p>\n</li>\n</ul>\n<ol>\n<li><h3 id=\"获取code\"><a href=\"#获取code\" class=\"headerlink\" title=\"获取code\"></a>获取code</h3><p>引导关注者打开以下页面：</p>\n<p><a href=\"\">https://open.weixin.qq.com/connect/oauth2/authorize?appid=APPID&amp;redirect_uri=REDIRECT_URI&amp;response_type=code&amp;<br>scope=snsapi_userinfo&amp;state=STATE#wechat_redirect</a></p>\n<p>其中 redirect_uri 为需要获取用户信息的页面，redirect_uri 需要进行 urlencode 处理。用户同意授权之后，redirect_uri 的页面就可以通过 GET 的方式从 url 中拿到 code，即：</p>\n<p><code>$code = $_GET[&quot;code&quot;];</code></p>\n</li>\n<li><h3 id=\"用code换取网页授权的access-token\"><a href=\"#用code换取网页授权的access-token\" class=\"headerlink\" title=\"用code换取网页授权的access_token\"></a>用code换取网页授权的access_token</h3><p>利用上一步获取的code即可换取网页授权access_token，方法如下：</p>\n<figure class=\"highlight php\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div><div class=\"line\">6</div><div class=\"line\">7</div><div class=\"line\">8</div></pre></td><td class=\"code\"><pre><div class=\"line\">$api_url = <span class=\"string\">\"https://api.weixin.qq.com/sns/oauth2/access_token?appid=&#123;$appid&#125;&amp;secret=&#123;$secret&#125;&amp;code=&#123;$code&#125;&amp;grant_type=authorization_code\"</span>;</div><div class=\"line\">$response_info = <span class=\"keyword\">self</span>::get_info_from_api($api_url);</div><div class=\"line\"><span class=\"keyword\">if</span>(<span class=\"keyword\">isset</span>($response_info[<span class=\"string\">\"errcode\"</span>]))</div><div class=\"line\">&#123;</div><div class=\"line\">    <span class=\"keyword\">exit</span>(<span class=\"string\">\"get access token failed: \"</span>.$response_info[<span class=\"string\">\"errcode\"</span>].<span class=\"string\">\", \"</span>.$response_info[<span class=\"string\">\"errmsg\"</span>]);</div><div class=\"line\">&#125;</div><div class=\"line\"></div><div class=\"line\">$access_token = $response_info[<span class=\"string\">\"access_token\"</span>];</div></pre></td></tr></table></figure>\n<p>其中，get_info_from_api 的定义如下：</p>\n<figure class=\"highlight php\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div><div class=\"line\">6</div><div class=\"line\">7</div><div class=\"line\">8</div><div class=\"line\">9</div><div class=\"line\">10</div><div class=\"line\">11</div><div class=\"line\">12</div></pre></td><td class=\"code\"><pre><div class=\"line\"><span class=\"keyword\">public</span> <span class=\"keyword\">static</span> <span class=\"function\"><span class=\"keyword\">function</span> <span class=\"title\">get_info_from_api</span><span class=\"params\">($api_url)</span></div><div class=\"line\"></span>&#123;</div><div class=\"line\">    $ch = curl_init();</div><div class=\"line\">    curl_setopt($ch, CURLOPT_URL, $api_url);</div><div class=\"line\">    curl_setopt($ch, CURLOPT_RETURNTRANSFER, <span class=\"number\">1</span>);</div><div class=\"line\">    curl_setopt($ch, CURLOPT_SSL_VERIFYPEER, <span class=\"keyword\">false</span>);</div><div class=\"line\">    curl_setopt($ch, CURLOPT_SSL_VERIFYHOST, <span class=\"keyword\">false</span>);</div><div class=\"line\">    $result = curl_exec($ch);</div><div class=\"line\">    curl_close($ch);</div><div class=\"line\">    $response_info = json_decode($result, <span class=\"keyword\">true</span>);</div><div class=\"line\">    <span class=\"keyword\">return</span> $response_info;</div><div class=\"line\">&#125;</div></pre></td></tr></table></figure>\n<p>get_info_from_api 是利用PHP中的curl函数以 GET 方法从微信提供的 api 获取数据，返回的结果为关联数组的形式。</p>\n</li>\n<li><h3 id=\"获取用户信息\"><a href=\"#获取用户信息\" class=\"headerlink\" title=\"获取用户信息\"></a>获取用户信息</h3><p>接下来，即可用 access_token 获取用户信息：</p>\n<figure class=\"highlight php\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div><div class=\"line\">6</div><div class=\"line\">7</div></pre></td><td class=\"code\"><pre><div class=\"line\">$open_id = $response_info[<span class=\"string\">\"openid\"</span>];</div><div class=\"line\">$api_url = <span class=\"string\">\"https://api.weixin.qq.com/sns/userinfo?access_token=&#123;$access_token&#125;&amp;openid=&#123;$open_id&#125;&amp;lang=zh_CN\"</span>;</div><div class=\"line\">$user_info = <span class=\"keyword\">self</span>::get_info_from_api($api_url);</div><div class=\"line\"><span class=\"keyword\">if</span>(<span class=\"keyword\">isset</span>($user_info[<span class=\"string\">\"errcode\"</span>]))</div><div class=\"line\">&#123;</div><div class=\"line\">    <span class=\"keyword\">exit</span>(<span class=\"string\">\"get user info failed: \"</span>.$user_info[<span class=\"string\">\"errcode\"</span>].<span class=\"string\">\", \"</span>.$user_info[<span class=\"string\">\"errmsg\"</span>]);</div><div class=\"line\">&#125;</div></pre></td></tr></table></figure>\n</li>\n</ol>\n"},{"layout":"post","title":"将数字转换为EXCEL列名的方法","description":"number to excel letter","date":"2015-12-25T16:00:00.000Z","_content":"\n用递归函数将数字转换为EXCEL中的列名，直接上代码（PHP）：\n\n```php\n//递归求解\nfunction R_NumToLetter($num)\n{\n    if($num == 0)\n    {\n        return '';\n    }\n    $base = 26;\n    $mod = (int)($num % $base);\n    $num = (int)($num / $base);\n    if($mod == 0)\n        return R_NumToLetter($num - 1).NumToLetter($base);\n    if($num == 0)\n        return NumToLetter($mod);\n    return R_NumToLetter($num).NumToLetter($mod);\n}\nfunction NumToLetter($num)\n{\n    if($num == 0)\n        return '';\n    $num = (int)$num - 1;\n    $ord_A = ord('A');\n    $chr = chr($ord_A + $num);\n    return $chr;\n}\n\n```","source":"_posts/number-to-excel-letter.md","raw":"---\nlayout: post\ntitle: \"将数字转换为EXCEL列名的方法\"\ndescription: \"number to excel letter\"\ncategory: PHP\ntags: [php, convert]\ndate: 2015-12-26\n---\n\n用递归函数将数字转换为EXCEL中的列名，直接上代码（PHP）：\n\n```php\n//递归求解\nfunction R_NumToLetter($num)\n{\n    if($num == 0)\n    {\n        return '';\n    }\n    $base = 26;\n    $mod = (int)($num % $base);\n    $num = (int)($num / $base);\n    if($mod == 0)\n        return R_NumToLetter($num - 1).NumToLetter($base);\n    if($num == 0)\n        return NumToLetter($mod);\n    return R_NumToLetter($num).NumToLetter($mod);\n}\nfunction NumToLetter($num)\n{\n    if($num == 0)\n        return '';\n    $num = (int)$num - 1;\n    $ord_A = ord('A');\n    $chr = chr($ord_A + $num);\n    return $chr;\n}\n\n```","slug":"number-to-excel-letter","published":1,"updated":"2017-02-08T05:39:50.350Z","comments":1,"photos":[],"link":"","_id":"ciyy89ni3000tbsub9e0upi2e","content":"<p>用递归函数将数字转换为EXCEL中的列名，直接上代码（PHP）：</p>\n<figure class=\"highlight php\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div><div class=\"line\">6</div><div class=\"line\">7</div><div class=\"line\">8</div><div class=\"line\">9</div><div class=\"line\">10</div><div class=\"line\">11</div><div class=\"line\">12</div><div class=\"line\">13</div><div class=\"line\">14</div><div class=\"line\">15</div><div class=\"line\">16</div><div class=\"line\">17</div><div class=\"line\">18</div><div class=\"line\">19</div><div class=\"line\">20</div><div class=\"line\">21</div><div class=\"line\">22</div><div class=\"line\">23</div><div class=\"line\">24</div><div class=\"line\">25</div></pre></td><td class=\"code\"><pre><div class=\"line\"><span class=\"comment\">//递归求解</span></div><div class=\"line\"><span class=\"function\"><span class=\"keyword\">function</span> <span class=\"title\">R_NumToLetter</span><span class=\"params\">($num)</span></span></div><div class=\"line\">&#123;</div><div class=\"line\">    <span class=\"keyword\">if</span>($num == <span class=\"number\">0</span>)</div><div class=\"line\">    &#123;</div><div class=\"line\">        <span class=\"keyword\">return</span> <span class=\"string\">''</span>;</div><div class=\"line\">    &#125;</div><div class=\"line\">    $base = <span class=\"number\">26</span>;</div><div class=\"line\">    $mod = (int)($num % $base);</div><div class=\"line\">    $num = (int)($num / $base);</div><div class=\"line\">    <span class=\"keyword\">if</span>($mod == <span class=\"number\">0</span>)</div><div class=\"line\">        <span class=\"keyword\">return</span> R_NumToLetter($num - <span class=\"number\">1</span>).NumToLetter($base);</div><div class=\"line\">    <span class=\"keyword\">if</span>($num == <span class=\"number\">0</span>)</div><div class=\"line\">        <span class=\"keyword\">return</span> NumToLetter($mod);</div><div class=\"line\">    <span class=\"keyword\">return</span> R_NumToLetter($num).NumToLetter($mod);</div><div class=\"line\">&#125;</div><div class=\"line\"><span class=\"function\"><span class=\"keyword\">function</span> <span class=\"title\">NumToLetter</span><span class=\"params\">($num)</span></span></div><div class=\"line\">&#123;</div><div class=\"line\">    <span class=\"keyword\">if</span>($num == <span class=\"number\">0</span>)</div><div class=\"line\">        <span class=\"keyword\">return</span> <span class=\"string\">''</span>;</div><div class=\"line\">    $num = (int)$num - <span class=\"number\">1</span>;</div><div class=\"line\">    $ord_A = ord(<span class=\"string\">'A'</span>);</div><div class=\"line\">    $chr = chr($ord_A + $num);</div><div class=\"line\">    <span class=\"keyword\">return</span> $chr;</div><div class=\"line\">&#125;</div></pre></td></tr></table></figure>","excerpt":"","more":"<p>用递归函数将数字转换为EXCEL中的列名，直接上代码（PHP）：</p>\n<figure class=\"highlight php\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div><div class=\"line\">6</div><div class=\"line\">7</div><div class=\"line\">8</div><div class=\"line\">9</div><div class=\"line\">10</div><div class=\"line\">11</div><div class=\"line\">12</div><div class=\"line\">13</div><div class=\"line\">14</div><div class=\"line\">15</div><div class=\"line\">16</div><div class=\"line\">17</div><div class=\"line\">18</div><div class=\"line\">19</div><div class=\"line\">20</div><div class=\"line\">21</div><div class=\"line\">22</div><div class=\"line\">23</div><div class=\"line\">24</div><div class=\"line\">25</div></pre></td><td class=\"code\"><pre><div class=\"line\"><span class=\"comment\">//递归求解</span></div><div class=\"line\"><span class=\"function\"><span class=\"keyword\">function</span> <span class=\"title\">R_NumToLetter</span><span class=\"params\">($num)</span></div><div class=\"line\"></span>&#123;</div><div class=\"line\">    <span class=\"keyword\">if</span>($num == <span class=\"number\">0</span>)</div><div class=\"line\">    &#123;</div><div class=\"line\">        <span class=\"keyword\">return</span> <span class=\"string\">''</span>;</div><div class=\"line\">    &#125;</div><div class=\"line\">    $base = <span class=\"number\">26</span>;</div><div class=\"line\">    $mod = (int)($num % $base);</div><div class=\"line\">    $num = (int)($num / $base);</div><div class=\"line\">    <span class=\"keyword\">if</span>($mod == <span class=\"number\">0</span>)</div><div class=\"line\">        <span class=\"keyword\">return</span> R_NumToLetter($num - <span class=\"number\">1</span>).NumToLetter($base);</div><div class=\"line\">    <span class=\"keyword\">if</span>($num == <span class=\"number\">0</span>)</div><div class=\"line\">        <span class=\"keyword\">return</span> NumToLetter($mod);</div><div class=\"line\">    <span class=\"keyword\">return</span> R_NumToLetter($num).NumToLetter($mod);</div><div class=\"line\">&#125;</div><div class=\"line\"><span class=\"function\"><span class=\"keyword\">function</span> <span class=\"title\">NumToLetter</span><span class=\"params\">($num)</span></div><div class=\"line\"></span>&#123;</div><div class=\"line\">    <span class=\"keyword\">if</span>($num == <span class=\"number\">0</span>)</div><div class=\"line\">        <span class=\"keyword\">return</span> <span class=\"string\">''</span>;</div><div class=\"line\">    $num = (int)$num - <span class=\"number\">1</span>;</div><div class=\"line\">    $ord_A = ord(<span class=\"string\">'A'</span>);</div><div class=\"line\">    $chr = chr($ord_A + $num);</div><div class=\"line\">    <span class=\"keyword\">return</span> $chr;</div><div class=\"line\">&#125;</div></pre></td></tr></table></figure>"},{"layout":"post","title":"微信公众平台带参数二维码配置工具的实现","description":"wechat qr code manage","date":"2015-12-08T16:00:00.000Z","_content":"\n配置带参数的二维码同样需要先获取Access Token，获取方法在 *微信公众平台自定义菜单配置工具的实现* 一文中有描述。\n\n利用获取到的Access Token，可以创建二维码的Ticket。通过POST方法向服务器提交相关信息，JS代码如下：\n\n```javascript\nfunction getTicket()\n{\n    var url = \"qrcode_manage.php?access_token=\"+$(\"#accessToken\").val();\n    var qrcode_type = $(\"#qrType\").val();\n    var qrcode_scene_id = $(\"#qrSceneId\").val();\n    $.post(url,\n        {\n            \"qrcode_type\":qrcode_type,\n            \"qrcode_scene_id\":qrcode_scene_id\n        },\n        function (data,status) {\n            var result = eval(\"(\"+data+\")\");\n            $(\"#ticketInfo\").css(\"display\",\"block\");\n            if(typeof (result[\"errcode\"])!=\"undefined\")\n            {\n                var errorInfo = \"错误代码：\"+result[\"errcode\"]+\";错误信息：\"+result[\"errmsg\"];\n                $(\"#ticketInfo\").html(errorInfo);\n                $(\"#getQrcodeBtn\").attr(\"disabled\",\"disabled\");\n            }\n            else\n            {\n                var successInfo = \"获取Ticket 成功，Ticket：\" + result[\"ticket\"];\n                successInfo += \"<br>url:\" + result[\"url\"];\n                $(\"#ticket\").val(result[\"ticket\"]);\n                $(\"#ticketInfo\").html(successInfo);\n                $(\"#getQrcodeBtn\").removeAttr(\"disabled\");\n            }\n        }\n    );\n}\n\n```\n\n服务器端进行转发的PHP代码如下：\n\n```php\n$access_token = $_GET[\"access_token\"];\n$api_url = \"https://api.weixin.qq.com/cgi-bin/qrcode/create?access_token={$access_token}\";\n$qrcode_type = $_POST[\"qrcode_type\"];\n$qrcode_scene_id = (int)$_POST[\"qrcode_scene_id\"];\n$qrcode_array = array();\nif($qrcode_type == \"QR_SCENE\")\n{\n    $qrcode_array[\"expire_seconds\"] = 604800; //七天\n    $qrcode_array[\"action_name\"] = \"QR_SCENE\";\n}\nelse\n{\n    $qrcode_array[\"action_name\"] = \"QR_LIMIT_SCENE\";\n}\n\n$qrcode_array[\"action_info\"][\"scene\"][\"scene_id\"] = $qrcode_scene_id;\n$qrcode_json = json_encode($qrcode_array);\n$ch = curl_init();\ncurl_setopt($ch,CURLOPT_URL,$api_url);\ncurl_setopt($ch,CURLOPT_RETURNTRANSFER,1);\ncurl_setopt($ch, CURLOPT_SSL_VERIFYPEER, false);\ncurl_setopt($ch, CURLOPT_SSL_VERIFYHOST, false);\ncurl_setopt($ch, CURLOPT_POST, 1);\ncurl_setopt($ch, CURLOPT_POSTFIELDS, $qrcode_json);\n$json_result = curl_exec($ch);\ncurl_close($ch);\necho $json_result;\n\n```\n\n之后，可以通过Ticket换取二维码，JS代码如下：\n\n```javascript\nfunction getQrcode()\n{\n    var ticket = $(\"#ticket\").val();\n    var date = new Date();\n    var url = \"qrcode_manage.php?ticket=\"+ticket+\"&time=\"+date.getTime();\n    $(\"#qrcode\").attr(\"src\",\"qrcode_manage.php?ticket=\"+ticket+\"&time=\"+date.getTime());\n}\n\n```\n\n服务器端进行转发的PHP代码如下：\n\n```php\n$ticket = $_GET[\"ticket\"];\n$api_url = \"https://mp.weixin.qq.com/cgi-bin/showqrcode?ticket={$ticket}\";\n$ch = curl_init();\ncurl_setopt($ch,CURLOPT_URL,$api_url);\ncurl_setopt($ch,CURLOPT_RETURNTRANSFER,1);\ncurl_setopt($ch, CURLOPT_SSL_VERIFYPEER, false);\ncurl_setopt($ch, CURLOPT_SSL_VERIFYHOST, false);\n$qrcode_result = curl_exec($ch);\ncurl_close($ch);\necho $qrcode_result;\n```\n\n实现效果可访问：\n\n[http://leo07.sinaapp.com/qrcode_manage.html](http://leo07.sinaapp.com/qrcode_manage.html)\n\n","source":"_posts/wechat-qr-code-manage.md","raw":"---\nlayout: post\ntitle: \"微信公众平台带参数二维码配置工具的实现\"\ndescription: \"wechat qr code manage\"\ncategory: WeChat\ntags: [php, wechat, curl, tools]\ndate: 2015-12-09\n---\n\n配置带参数的二维码同样需要先获取Access Token，获取方法在 *微信公众平台自定义菜单配置工具的实现* 一文中有描述。\n\n利用获取到的Access Token，可以创建二维码的Ticket。通过POST方法向服务器提交相关信息，JS代码如下：\n\n```javascript\nfunction getTicket()\n{\n    var url = \"qrcode_manage.php?access_token=\"+$(\"#accessToken\").val();\n    var qrcode_type = $(\"#qrType\").val();\n    var qrcode_scene_id = $(\"#qrSceneId\").val();\n    $.post(url,\n        {\n            \"qrcode_type\":qrcode_type,\n            \"qrcode_scene_id\":qrcode_scene_id\n        },\n        function (data,status) {\n            var result = eval(\"(\"+data+\")\");\n            $(\"#ticketInfo\").css(\"display\",\"block\");\n            if(typeof (result[\"errcode\"])!=\"undefined\")\n            {\n                var errorInfo = \"错误代码：\"+result[\"errcode\"]+\";错误信息：\"+result[\"errmsg\"];\n                $(\"#ticketInfo\").html(errorInfo);\n                $(\"#getQrcodeBtn\").attr(\"disabled\",\"disabled\");\n            }\n            else\n            {\n                var successInfo = \"获取Ticket 成功，Ticket：\" + result[\"ticket\"];\n                successInfo += \"<br>url:\" + result[\"url\"];\n                $(\"#ticket\").val(result[\"ticket\"]);\n                $(\"#ticketInfo\").html(successInfo);\n                $(\"#getQrcodeBtn\").removeAttr(\"disabled\");\n            }\n        }\n    );\n}\n\n```\n\n服务器端进行转发的PHP代码如下：\n\n```php\n$access_token = $_GET[\"access_token\"];\n$api_url = \"https://api.weixin.qq.com/cgi-bin/qrcode/create?access_token={$access_token}\";\n$qrcode_type = $_POST[\"qrcode_type\"];\n$qrcode_scene_id = (int)$_POST[\"qrcode_scene_id\"];\n$qrcode_array = array();\nif($qrcode_type == \"QR_SCENE\")\n{\n    $qrcode_array[\"expire_seconds\"] = 604800; //七天\n    $qrcode_array[\"action_name\"] = \"QR_SCENE\";\n}\nelse\n{\n    $qrcode_array[\"action_name\"] = \"QR_LIMIT_SCENE\";\n}\n\n$qrcode_array[\"action_info\"][\"scene\"][\"scene_id\"] = $qrcode_scene_id;\n$qrcode_json = json_encode($qrcode_array);\n$ch = curl_init();\ncurl_setopt($ch,CURLOPT_URL,$api_url);\ncurl_setopt($ch,CURLOPT_RETURNTRANSFER,1);\ncurl_setopt($ch, CURLOPT_SSL_VERIFYPEER, false);\ncurl_setopt($ch, CURLOPT_SSL_VERIFYHOST, false);\ncurl_setopt($ch, CURLOPT_POST, 1);\ncurl_setopt($ch, CURLOPT_POSTFIELDS, $qrcode_json);\n$json_result = curl_exec($ch);\ncurl_close($ch);\necho $json_result;\n\n```\n\n之后，可以通过Ticket换取二维码，JS代码如下：\n\n```javascript\nfunction getQrcode()\n{\n    var ticket = $(\"#ticket\").val();\n    var date = new Date();\n    var url = \"qrcode_manage.php?ticket=\"+ticket+\"&time=\"+date.getTime();\n    $(\"#qrcode\").attr(\"src\",\"qrcode_manage.php?ticket=\"+ticket+\"&time=\"+date.getTime());\n}\n\n```\n\n服务器端进行转发的PHP代码如下：\n\n```php\n$ticket = $_GET[\"ticket\"];\n$api_url = \"https://mp.weixin.qq.com/cgi-bin/showqrcode?ticket={$ticket}\";\n$ch = curl_init();\ncurl_setopt($ch,CURLOPT_URL,$api_url);\ncurl_setopt($ch,CURLOPT_RETURNTRANSFER,1);\ncurl_setopt($ch, CURLOPT_SSL_VERIFYPEER, false);\ncurl_setopt($ch, CURLOPT_SSL_VERIFYHOST, false);\n$qrcode_result = curl_exec($ch);\ncurl_close($ch);\necho $qrcode_result;\n```\n\n实现效果可访问：\n\n[http://leo07.sinaapp.com/qrcode_manage.html](http://leo07.sinaapp.com/qrcode_manage.html)\n\n","slug":"wechat-qr-code-manage","published":1,"updated":"2017-02-08T05:29:20.565Z","comments":1,"photos":[],"link":"","_id":"ciyy89ni6000ubsubyw0c5n10","content":"<p>配置带参数的二维码同样需要先获取Access Token，获取方法在 <em>微信公众平台自定义菜单配置工具的实现</em> 一文中有描述。</p>\n<p>利用获取到的Access Token，可以创建二维码的Ticket。通过POST方法向服务器提交相关信息，JS代码如下：</p>\n<figure class=\"highlight javascript\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div><div class=\"line\">6</div><div class=\"line\">7</div><div class=\"line\">8</div><div class=\"line\">9</div><div class=\"line\">10</div><div class=\"line\">11</div><div class=\"line\">12</div><div class=\"line\">13</div><div class=\"line\">14</div><div class=\"line\">15</div><div class=\"line\">16</div><div class=\"line\">17</div><div class=\"line\">18</div><div class=\"line\">19</div><div class=\"line\">20</div><div class=\"line\">21</div><div class=\"line\">22</div><div class=\"line\">23</div><div class=\"line\">24</div><div class=\"line\">25</div><div class=\"line\">26</div><div class=\"line\">27</div><div class=\"line\">28</div><div class=\"line\">29</div><div class=\"line\">30</div></pre></td><td class=\"code\"><pre><div class=\"line\"><span class=\"function\"><span class=\"keyword\">function</span> <span class=\"title\">getTicket</span>(<span class=\"params\"></span>)</span></div><div class=\"line\">&#123;</div><div class=\"line\">    <span class=\"keyword\">var</span> url = <span class=\"string\">\"qrcode_manage.php?access_token=\"</span>+$(<span class=\"string\">\"#accessToken\"</span>).val();</div><div class=\"line\">    <span class=\"keyword\">var</span> qrcode_type = $(<span class=\"string\">\"#qrType\"</span>).val();</div><div class=\"line\">    <span class=\"keyword\">var</span> qrcode_scene_id = $(<span class=\"string\">\"#qrSceneId\"</span>).val();</div><div class=\"line\">    $.post(url,</div><div class=\"line\">        &#123;</div><div class=\"line\">            <span class=\"string\">\"qrcode_type\"</span>:qrcode_type,</div><div class=\"line\">            <span class=\"string\">\"qrcode_scene_id\"</span>:qrcode_scene_id</div><div class=\"line\">        &#125;,</div><div class=\"line\">        <span class=\"function\"><span class=\"keyword\">function</span> (<span class=\"params\">data,status</span>) </span>&#123;</div><div class=\"line\">            <span class=\"keyword\">var</span> result = <span class=\"built_in\">eval</span>(<span class=\"string\">\"(\"</span>+data+<span class=\"string\">\")\"</span>);</div><div class=\"line\">            $(<span class=\"string\">\"#ticketInfo\"</span>).css(<span class=\"string\">\"display\"</span>,<span class=\"string\">\"block\"</span>);</div><div class=\"line\">            <span class=\"keyword\">if</span>(<span class=\"keyword\">typeof</span> (result[<span class=\"string\">\"errcode\"</span>])!=<span class=\"string\">\"undefined\"</span>)</div><div class=\"line\">            &#123;</div><div class=\"line\">                <span class=\"keyword\">var</span> errorInfo = <span class=\"string\">\"错误代码：\"</span>+result[<span class=\"string\">\"errcode\"</span>]+<span class=\"string\">\";错误信息：\"</span>+result[<span class=\"string\">\"errmsg\"</span>];</div><div class=\"line\">                $(<span class=\"string\">\"#ticketInfo\"</span>).html(errorInfo);</div><div class=\"line\">                $(<span class=\"string\">\"#getQrcodeBtn\"</span>).attr(<span class=\"string\">\"disabled\"</span>,<span class=\"string\">\"disabled\"</span>);</div><div class=\"line\">            &#125;</div><div class=\"line\">            <span class=\"keyword\">else</span></div><div class=\"line\">            &#123;</div><div class=\"line\">                <span class=\"keyword\">var</span> successInfo = <span class=\"string\">\"获取Ticket 成功，Ticket：\"</span> + result[<span class=\"string\">\"ticket\"</span>];</div><div class=\"line\">                successInfo += <span class=\"string\">\"&lt;br&gt;url:\"</span> + result[<span class=\"string\">\"url\"</span>];</div><div class=\"line\">                $(<span class=\"string\">\"#ticket\"</span>).val(result[<span class=\"string\">\"ticket\"</span>]);</div><div class=\"line\">                $(<span class=\"string\">\"#ticketInfo\"</span>).html(successInfo);</div><div class=\"line\">                $(<span class=\"string\">\"#getQrcodeBtn\"</span>).removeAttr(<span class=\"string\">\"disabled\"</span>);</div><div class=\"line\">            &#125;</div><div class=\"line\">        &#125;</div><div class=\"line\">    );</div><div class=\"line\">&#125;</div></pre></td></tr></table></figure>\n<p>服务器端进行转发的PHP代码如下：</p>\n<figure class=\"highlight php\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div><div class=\"line\">6</div><div class=\"line\">7</div><div class=\"line\">8</div><div class=\"line\">9</div><div class=\"line\">10</div><div class=\"line\">11</div><div class=\"line\">12</div><div class=\"line\">13</div><div class=\"line\">14</div><div class=\"line\">15</div><div class=\"line\">16</div><div class=\"line\">17</div><div class=\"line\">18</div><div class=\"line\">19</div><div class=\"line\">20</div><div class=\"line\">21</div><div class=\"line\">22</div><div class=\"line\">23</div><div class=\"line\">24</div><div class=\"line\">25</div><div class=\"line\">26</div><div class=\"line\">27</div></pre></td><td class=\"code\"><pre><div class=\"line\">$access_token = $_GET[<span class=\"string\">\"access_token\"</span>];</div><div class=\"line\">$api_url = <span class=\"string\">\"https://api.weixin.qq.com/cgi-bin/qrcode/create?access_token=&#123;$access_token&#125;\"</span>;</div><div class=\"line\">$qrcode_type = $_POST[<span class=\"string\">\"qrcode_type\"</span>];</div><div class=\"line\">$qrcode_scene_id = (int)$_POST[<span class=\"string\">\"qrcode_scene_id\"</span>];</div><div class=\"line\">$qrcode_array = <span class=\"keyword\">array</span>();</div><div class=\"line\"><span class=\"keyword\">if</span>($qrcode_type == <span class=\"string\">\"QR_SCENE\"</span>)</div><div class=\"line\">&#123;</div><div class=\"line\">    $qrcode_array[<span class=\"string\">\"expire_seconds\"</span>] = <span class=\"number\">604800</span>; <span class=\"comment\">//七天</span></div><div class=\"line\">    $qrcode_array[<span class=\"string\">\"action_name\"</span>] = <span class=\"string\">\"QR_SCENE\"</span>;</div><div class=\"line\">&#125;</div><div class=\"line\"><span class=\"keyword\">else</span></div><div class=\"line\">&#123;</div><div class=\"line\">    $qrcode_array[<span class=\"string\">\"action_name\"</span>] = <span class=\"string\">\"QR_LIMIT_SCENE\"</span>;</div><div class=\"line\">&#125;</div><div class=\"line\"></div><div class=\"line\">$qrcode_array[<span class=\"string\">\"action_info\"</span>][<span class=\"string\">\"scene\"</span>][<span class=\"string\">\"scene_id\"</span>] = $qrcode_scene_id;</div><div class=\"line\">$qrcode_json = json_encode($qrcode_array);</div><div class=\"line\">$ch = curl_init();</div><div class=\"line\">curl_setopt($ch,CURLOPT_URL,$api_url);</div><div class=\"line\">curl_setopt($ch,CURLOPT_RETURNTRANSFER,<span class=\"number\">1</span>);</div><div class=\"line\">curl_setopt($ch, CURLOPT_SSL_VERIFYPEER, <span class=\"keyword\">false</span>);</div><div class=\"line\">curl_setopt($ch, CURLOPT_SSL_VERIFYHOST, <span class=\"keyword\">false</span>);</div><div class=\"line\">curl_setopt($ch, CURLOPT_POST, <span class=\"number\">1</span>);</div><div class=\"line\">curl_setopt($ch, CURLOPT_POSTFIELDS, $qrcode_json);</div><div class=\"line\">$json_result = curl_exec($ch);</div><div class=\"line\">curl_close($ch);</div><div class=\"line\"><span class=\"keyword\">echo</span> $json_result;</div></pre></td></tr></table></figure>\n<p>之后，可以通过Ticket换取二维码，JS代码如下：</p>\n<figure class=\"highlight javascript\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div><div class=\"line\">6</div><div class=\"line\">7</div></pre></td><td class=\"code\"><pre><div class=\"line\"><span class=\"function\"><span class=\"keyword\">function</span> <span class=\"title\">getQrcode</span>(<span class=\"params\"></span>)</span></div><div class=\"line\">&#123;</div><div class=\"line\">    <span class=\"keyword\">var</span> ticket = $(<span class=\"string\">\"#ticket\"</span>).val();</div><div class=\"line\">    <span class=\"keyword\">var</span> date = <span class=\"keyword\">new</span> <span class=\"built_in\">Date</span>();</div><div class=\"line\">    <span class=\"keyword\">var</span> url = <span class=\"string\">\"qrcode_manage.php?ticket=\"</span>+ticket+<span class=\"string\">\"&amp;time=\"</span>+date.getTime();</div><div class=\"line\">    $(<span class=\"string\">\"#qrcode\"</span>).attr(<span class=\"string\">\"src\"</span>,<span class=\"string\">\"qrcode_manage.php?ticket=\"</span>+ticket+<span class=\"string\">\"&amp;time=\"</span>+date.getTime());</div><div class=\"line\">&#125;</div></pre></td></tr></table></figure>\n<p>服务器端进行转发的PHP代码如下：</p>\n<figure class=\"highlight php\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div><div class=\"line\">6</div><div class=\"line\">7</div><div class=\"line\">8</div><div class=\"line\">9</div><div class=\"line\">10</div></pre></td><td class=\"code\"><pre><div class=\"line\">$ticket = $_GET[<span class=\"string\">\"ticket\"</span>];</div><div class=\"line\">$api_url = <span class=\"string\">\"https://mp.weixin.qq.com/cgi-bin/showqrcode?ticket=&#123;$ticket&#125;\"</span>;</div><div class=\"line\">$ch = curl_init();</div><div class=\"line\">curl_setopt($ch,CURLOPT_URL,$api_url);</div><div class=\"line\">curl_setopt($ch,CURLOPT_RETURNTRANSFER,<span class=\"number\">1</span>);</div><div class=\"line\">curl_setopt($ch, CURLOPT_SSL_VERIFYPEER, <span class=\"keyword\">false</span>);</div><div class=\"line\">curl_setopt($ch, CURLOPT_SSL_VERIFYHOST, <span class=\"keyword\">false</span>);</div><div class=\"line\">$qrcode_result = curl_exec($ch);</div><div class=\"line\">curl_close($ch);</div><div class=\"line\"><span class=\"keyword\">echo</span> $qrcode_result;</div></pre></td></tr></table></figure>\n<p>实现效果可访问：</p>\n<p><a href=\"http://leo07.sinaapp.com/qrcode_manage.html\" target=\"_blank\" rel=\"external\">http://leo07.sinaapp.com/qrcode_manage.html</a></p>\n","excerpt":"","more":"<p>配置带参数的二维码同样需要先获取Access Token，获取方法在 <em>微信公众平台自定义菜单配置工具的实现</em> 一文中有描述。</p>\n<p>利用获取到的Access Token，可以创建二维码的Ticket。通过POST方法向服务器提交相关信息，JS代码如下：</p>\n<figure class=\"highlight javascript\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div><div class=\"line\">6</div><div class=\"line\">7</div><div class=\"line\">8</div><div class=\"line\">9</div><div class=\"line\">10</div><div class=\"line\">11</div><div class=\"line\">12</div><div class=\"line\">13</div><div class=\"line\">14</div><div class=\"line\">15</div><div class=\"line\">16</div><div class=\"line\">17</div><div class=\"line\">18</div><div class=\"line\">19</div><div class=\"line\">20</div><div class=\"line\">21</div><div class=\"line\">22</div><div class=\"line\">23</div><div class=\"line\">24</div><div class=\"line\">25</div><div class=\"line\">26</div><div class=\"line\">27</div><div class=\"line\">28</div><div class=\"line\">29</div><div class=\"line\">30</div></pre></td><td class=\"code\"><pre><div class=\"line\"><span class=\"function\"><span class=\"keyword\">function</span> <span class=\"title\">getTicket</span>(<span class=\"params\"></span>)</div><div class=\"line\"></span>&#123;</div><div class=\"line\">    <span class=\"keyword\">var</span> url = <span class=\"string\">\"qrcode_manage.php?access_token=\"</span>+$(<span class=\"string\">\"#accessToken\"</span>).val();</div><div class=\"line\">    <span class=\"keyword\">var</span> qrcode_type = $(<span class=\"string\">\"#qrType\"</span>).val();</div><div class=\"line\">    <span class=\"keyword\">var</span> qrcode_scene_id = $(<span class=\"string\">\"#qrSceneId\"</span>).val();</div><div class=\"line\">    $.post(url,</div><div class=\"line\">        &#123;</div><div class=\"line\">            <span class=\"string\">\"qrcode_type\"</span>:qrcode_type,</div><div class=\"line\">            <span class=\"string\">\"qrcode_scene_id\"</span>:qrcode_scene_id</div><div class=\"line\">        &#125;,</div><div class=\"line\">        <span class=\"function\"><span class=\"keyword\">function</span> (<span class=\"params\">data,status</span>) </span>&#123;</div><div class=\"line\">            <span class=\"keyword\">var</span> result = <span class=\"built_in\">eval</span>(<span class=\"string\">\"(\"</span>+data+<span class=\"string\">\")\"</span>);</div><div class=\"line\">            $(<span class=\"string\">\"#ticketInfo\"</span>).css(<span class=\"string\">\"display\"</span>,<span class=\"string\">\"block\"</span>);</div><div class=\"line\">            <span class=\"keyword\">if</span>(<span class=\"keyword\">typeof</span> (result[<span class=\"string\">\"errcode\"</span>])!=<span class=\"string\">\"undefined\"</span>)</div><div class=\"line\">            &#123;</div><div class=\"line\">                <span class=\"keyword\">var</span> errorInfo = <span class=\"string\">\"错误代码：\"</span>+result[<span class=\"string\">\"errcode\"</span>]+<span class=\"string\">\";错误信息：\"</span>+result[<span class=\"string\">\"errmsg\"</span>];</div><div class=\"line\">                $(<span class=\"string\">\"#ticketInfo\"</span>).html(errorInfo);</div><div class=\"line\">                $(<span class=\"string\">\"#getQrcodeBtn\"</span>).attr(<span class=\"string\">\"disabled\"</span>,<span class=\"string\">\"disabled\"</span>);</div><div class=\"line\">            &#125;</div><div class=\"line\">            <span class=\"keyword\">else</span></div><div class=\"line\">            &#123;</div><div class=\"line\">                <span class=\"keyword\">var</span> successInfo = <span class=\"string\">\"获取Ticket 成功，Ticket：\"</span> + result[<span class=\"string\">\"ticket\"</span>];</div><div class=\"line\">                successInfo += <span class=\"string\">\"&lt;br&gt;url:\"</span> + result[<span class=\"string\">\"url\"</span>];</div><div class=\"line\">                $(<span class=\"string\">\"#ticket\"</span>).val(result[<span class=\"string\">\"ticket\"</span>]);</div><div class=\"line\">                $(<span class=\"string\">\"#ticketInfo\"</span>).html(successInfo);</div><div class=\"line\">                $(<span class=\"string\">\"#getQrcodeBtn\"</span>).removeAttr(<span class=\"string\">\"disabled\"</span>);</div><div class=\"line\">            &#125;</div><div class=\"line\">        &#125;</div><div class=\"line\">    );</div><div class=\"line\">&#125;</div></pre></td></tr></table></figure>\n<p>服务器端进行转发的PHP代码如下：</p>\n<figure class=\"highlight php\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div><div class=\"line\">6</div><div class=\"line\">7</div><div class=\"line\">8</div><div class=\"line\">9</div><div class=\"line\">10</div><div class=\"line\">11</div><div class=\"line\">12</div><div class=\"line\">13</div><div class=\"line\">14</div><div class=\"line\">15</div><div class=\"line\">16</div><div class=\"line\">17</div><div class=\"line\">18</div><div class=\"line\">19</div><div class=\"line\">20</div><div class=\"line\">21</div><div class=\"line\">22</div><div class=\"line\">23</div><div class=\"line\">24</div><div class=\"line\">25</div><div class=\"line\">26</div><div class=\"line\">27</div></pre></td><td class=\"code\"><pre><div class=\"line\">$access_token = $_GET[<span class=\"string\">\"access_token\"</span>];</div><div class=\"line\">$api_url = <span class=\"string\">\"https://api.weixin.qq.com/cgi-bin/qrcode/create?access_token=&#123;$access_token&#125;\"</span>;</div><div class=\"line\">$qrcode_type = $_POST[<span class=\"string\">\"qrcode_type\"</span>];</div><div class=\"line\">$qrcode_scene_id = (int)$_POST[<span class=\"string\">\"qrcode_scene_id\"</span>];</div><div class=\"line\">$qrcode_array = <span class=\"keyword\">array</span>();</div><div class=\"line\"><span class=\"keyword\">if</span>($qrcode_type == <span class=\"string\">\"QR_SCENE\"</span>)</div><div class=\"line\">&#123;</div><div class=\"line\">    $qrcode_array[<span class=\"string\">\"expire_seconds\"</span>] = <span class=\"number\">604800</span>; <span class=\"comment\">//七天</span></div><div class=\"line\">    $qrcode_array[<span class=\"string\">\"action_name\"</span>] = <span class=\"string\">\"QR_SCENE\"</span>;</div><div class=\"line\">&#125;</div><div class=\"line\"><span class=\"keyword\">else</span></div><div class=\"line\">&#123;</div><div class=\"line\">    $qrcode_array[<span class=\"string\">\"action_name\"</span>] = <span class=\"string\">\"QR_LIMIT_SCENE\"</span>;</div><div class=\"line\">&#125;</div><div class=\"line\"></div><div class=\"line\">$qrcode_array[<span class=\"string\">\"action_info\"</span>][<span class=\"string\">\"scene\"</span>][<span class=\"string\">\"scene_id\"</span>] = $qrcode_scene_id;</div><div class=\"line\">$qrcode_json = json_encode($qrcode_array);</div><div class=\"line\">$ch = curl_init();</div><div class=\"line\">curl_setopt($ch,CURLOPT_URL,$api_url);</div><div class=\"line\">curl_setopt($ch,CURLOPT_RETURNTRANSFER,<span class=\"number\">1</span>);</div><div class=\"line\">curl_setopt($ch, CURLOPT_SSL_VERIFYPEER, <span class=\"keyword\">false</span>);</div><div class=\"line\">curl_setopt($ch, CURLOPT_SSL_VERIFYHOST, <span class=\"keyword\">false</span>);</div><div class=\"line\">curl_setopt($ch, CURLOPT_POST, <span class=\"number\">1</span>);</div><div class=\"line\">curl_setopt($ch, CURLOPT_POSTFIELDS, $qrcode_json);</div><div class=\"line\">$json_result = curl_exec($ch);</div><div class=\"line\">curl_close($ch);</div><div class=\"line\"><span class=\"keyword\">echo</span> $json_result;</div></pre></td></tr></table></figure>\n<p>之后，可以通过Ticket换取二维码，JS代码如下：</p>\n<figure class=\"highlight javascript\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div><div class=\"line\">6</div><div class=\"line\">7</div></pre></td><td class=\"code\"><pre><div class=\"line\"><span class=\"function\"><span class=\"keyword\">function</span> <span class=\"title\">getQrcode</span>(<span class=\"params\"></span>)</div><div class=\"line\"></span>&#123;</div><div class=\"line\">    <span class=\"keyword\">var</span> ticket = $(<span class=\"string\">\"#ticket\"</span>).val();</div><div class=\"line\">    <span class=\"keyword\">var</span> date = <span class=\"keyword\">new</span> <span class=\"built_in\">Date</span>();</div><div class=\"line\">    <span class=\"keyword\">var</span> url = <span class=\"string\">\"qrcode_manage.php?ticket=\"</span>+ticket+<span class=\"string\">\"&amp;time=\"</span>+date.getTime();</div><div class=\"line\">    $(<span class=\"string\">\"#qrcode\"</span>).attr(<span class=\"string\">\"src\"</span>,<span class=\"string\">\"qrcode_manage.php?ticket=\"</span>+ticket+<span class=\"string\">\"&amp;time=\"</span>+date.getTime());</div><div class=\"line\">&#125;</div></pre></td></tr></table></figure>\n<p>服务器端进行转发的PHP代码如下：</p>\n<figure class=\"highlight php\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div><div class=\"line\">6</div><div class=\"line\">7</div><div class=\"line\">8</div><div class=\"line\">9</div><div class=\"line\">10</div></pre></td><td class=\"code\"><pre><div class=\"line\">$ticket = $_GET[<span class=\"string\">\"ticket\"</span>];</div><div class=\"line\">$api_url = <span class=\"string\">\"https://mp.weixin.qq.com/cgi-bin/showqrcode?ticket=&#123;$ticket&#125;\"</span>;</div><div class=\"line\">$ch = curl_init();</div><div class=\"line\">curl_setopt($ch,CURLOPT_URL,$api_url);</div><div class=\"line\">curl_setopt($ch,CURLOPT_RETURNTRANSFER,<span class=\"number\">1</span>);</div><div class=\"line\">curl_setopt($ch, CURLOPT_SSL_VERIFYPEER, <span class=\"keyword\">false</span>);</div><div class=\"line\">curl_setopt($ch, CURLOPT_SSL_VERIFYHOST, <span class=\"keyword\">false</span>);</div><div class=\"line\">$qrcode_result = curl_exec($ch);</div><div class=\"line\">curl_close($ch);</div><div class=\"line\"><span class=\"keyword\">echo</span> $qrcode_result;</div></pre></td></tr></table></figure>\n<p>实现效果可访问：</p>\n<p><a href=\"http://leo07.sinaapp.com/qrcode_manage.html\">http://leo07.sinaapp.com/qrcode_manage.html</a></p>\n"},{"layout":"post","title":"JSONP与跨域问题","description":"jsonp and cross domain","date":"2016-03-31T16:00:00.000Z","_content":"\n## 跨域问题\n\n**跨域问题**是由于浏览器的**同源策略**而产生的，同源是指**同协议**、**同域名**、**同端口**，出于安全的考虑，浏览器禁止脚本的跨域（不同源）请求。\n\n虽然浏览器禁止跨域请求，但是却允许引用和执行来自其他域的脚本文件，这也就是下面将要提到的 JSONP 的原理。\n\n\n## JSONP\n\nJSONP（JSON with Padding） 是一种动态加载js的技术，即使用javascript脚本动态加载`<script>`标签，从而使得网页可以跨域获取数据。该方法需要服务器端进行配合，动态生成javascript脚本，javascript脚本中包含网页所需的数据。\n\n假设 `www.bbbbb.com.cn` 域名下有一网页需要请求 `www.aaaaa.com.cn` 域名下的数据，利用JSONP实现跨域请求的步骤如下：\n\n1.  `www.bbbbb.com.cn` 域名下的网页中定义一个加载跨域脚本的javascript函数，即一个能够动态生成 `<script>` 标签的函数，该 `<script>` 标签的 `src` 指向服务器端程序（ `www.aaaaa.com.cn` ）所在的URL，并且URL后应附加一个 `callback` 参数，以便服务器端能够动态生成以 `callback` 为名的javascript函数：\n\n    ```javascript\n    var remoteUrl = \"http://www.aaaaa.com.cn/test/jsonpTest.php?callback=\";\n    function getDataFromRemote(callback) \n    {\n        var remoteDataUrl = remoteUrl + callback;\n        var script = document.createElement(\"script\");\n        script.setAttribute(\"src\", remoteDataUrl);\n        document.getElementsByTagName(\"head\")[0].appendChild(script);\n    } \n    ```\n\n2.  服务器端收到请求后，根据 `callback` 参数动态生成一段javascript脚本，该脚本调用 `callback` 函数并向其传递网页所需的数据：\n\n    ```php\n    <?php\n    if(isset($_GET[\"callback\"]))\n    {\n        $json_data = json_encode([\"data\"=> \"Hello World\"]);\n        echo $_GET[\"callback\"].\"({$json_data});\";\n    }\n    ?>\n    ```\n\n3.  网页端定义名为 `callback` 的函数，用于接收、处理服务器端传来的数据：\n\n    ```javascript\n    function testCallback(jsonData) \n    {\n        alert(jsonData[\"data\"]);\n    }\n    getDataFromRemote('testCallback');\n    ```\n\n## jQuery示例\n\njQuery 中的 `ajax` 方法支持 JSONP 类型的请求，只需将 `dataType` 设置为 `jsonp` 即可，示例如下：\n\n```javascript\n<script type=\"text/javascript\" src=\"//cdn.bootcss.com/jquery/2.2.1/jquery.min.js\"></script>\n<script type=\"text/javascript\">\n    function getDataFromRemoteAjax()\n    {\n        $.ajax({\n            type: \"get\",\n            async: true,\n            url: \"http://www.aaaaa.com.cn/test/jsonpTest.php\",\n            dataType: \"jsonp\",\n            jsonpCallback: \"testCallbackAjax\",\n            success: function (data) {\n                alert(data[\"data\"]);\n            },\n            error: function (err) {\n                alert(\"error\");\n            }\n        });\n    }\n</script>\n```\n\n服务器端的代码与上例的相同。\n","source":"_posts/jsonp-and-cross-domain.md","raw":"---\nlayout: post\ntitle: \"JSONP与跨域问题\"\ndescription: \"jsonp and cross domain\"\ncategory: JavaScript\ntags: [javascript, jsonp, cross-domain]\ndate: 2016-04-01\n---\n\n## 跨域问题\n\n**跨域问题**是由于浏览器的**同源策略**而产生的，同源是指**同协议**、**同域名**、**同端口**，出于安全的考虑，浏览器禁止脚本的跨域（不同源）请求。\n\n虽然浏览器禁止跨域请求，但是却允许引用和执行来自其他域的脚本文件，这也就是下面将要提到的 JSONP 的原理。\n\n\n## JSONP\n\nJSONP（JSON with Padding） 是一种动态加载js的技术，即使用javascript脚本动态加载`<script>`标签，从而使得网页可以跨域获取数据。该方法需要服务器端进行配合，动态生成javascript脚本，javascript脚本中包含网页所需的数据。\n\n假设 `www.bbbbb.com.cn` 域名下有一网页需要请求 `www.aaaaa.com.cn` 域名下的数据，利用JSONP实现跨域请求的步骤如下：\n\n1.  `www.bbbbb.com.cn` 域名下的网页中定义一个加载跨域脚本的javascript函数，即一个能够动态生成 `<script>` 标签的函数，该 `<script>` 标签的 `src` 指向服务器端程序（ `www.aaaaa.com.cn` ）所在的URL，并且URL后应附加一个 `callback` 参数，以便服务器端能够动态生成以 `callback` 为名的javascript函数：\n\n    ```javascript\n    var remoteUrl = \"http://www.aaaaa.com.cn/test/jsonpTest.php?callback=\";\n    function getDataFromRemote(callback) \n    {\n        var remoteDataUrl = remoteUrl + callback;\n        var script = document.createElement(\"script\");\n        script.setAttribute(\"src\", remoteDataUrl);\n        document.getElementsByTagName(\"head\")[0].appendChild(script);\n    } \n    ```\n\n2.  服务器端收到请求后，根据 `callback` 参数动态生成一段javascript脚本，该脚本调用 `callback` 函数并向其传递网页所需的数据：\n\n    ```php\n    <?php\n    if(isset($_GET[\"callback\"]))\n    {\n        $json_data = json_encode([\"data\"=> \"Hello World\"]);\n        echo $_GET[\"callback\"].\"({$json_data});\";\n    }\n    ?>\n    ```\n\n3.  网页端定义名为 `callback` 的函数，用于接收、处理服务器端传来的数据：\n\n    ```javascript\n    function testCallback(jsonData) \n    {\n        alert(jsonData[\"data\"]);\n    }\n    getDataFromRemote('testCallback');\n    ```\n\n## jQuery示例\n\njQuery 中的 `ajax` 方法支持 JSONP 类型的请求，只需将 `dataType` 设置为 `jsonp` 即可，示例如下：\n\n```javascript\n<script type=\"text/javascript\" src=\"//cdn.bootcss.com/jquery/2.2.1/jquery.min.js\"></script>\n<script type=\"text/javascript\">\n    function getDataFromRemoteAjax()\n    {\n        $.ajax({\n            type: \"get\",\n            async: true,\n            url: \"http://www.aaaaa.com.cn/test/jsonpTest.php\",\n            dataType: \"jsonp\",\n            jsonpCallback: \"testCallbackAjax\",\n            success: function (data) {\n                alert(data[\"data\"]);\n            },\n            error: function (err) {\n                alert(\"error\");\n            }\n        });\n    }\n</script>\n```\n\n服务器端的代码与上例的相同。\n","slug":"jsonp-and-cross-domain","published":1,"updated":"2017-02-08T05:31:03.393Z","comments":1,"photos":[],"link":"","_id":"ciyy89ni8000xbsublcrbv01c","content":"<h2 id=\"跨域问题\"><a href=\"#跨域问题\" class=\"headerlink\" title=\"跨域问题\"></a>跨域问题</h2><p><strong>跨域问题</strong>是由于浏览器的<strong>同源策略</strong>而产生的，同源是指<strong>同协议</strong>、<strong>同域名</strong>、<strong>同端口</strong>，出于安全的考虑，浏览器禁止脚本的跨域（不同源）请求。</p>\n<p>虽然浏览器禁止跨域请求，但是却允许引用和执行来自其他域的脚本文件，这也就是下面将要提到的 JSONP 的原理。</p>\n<h2 id=\"JSONP\"><a href=\"#JSONP\" class=\"headerlink\" title=\"JSONP\"></a>JSONP</h2><p>JSONP（JSON with Padding） 是一种动态加载js的技术，即使用javascript脚本动态加载<code>&lt;script&gt;</code>标签，从而使得网页可以跨域获取数据。该方法需要服务器端进行配合，动态生成javascript脚本，javascript脚本中包含网页所需的数据。</p>\n<p>假设 <code>www.bbbbb.com.cn</code> 域名下有一网页需要请求 <code>www.aaaaa.com.cn</code> 域名下的数据，利用JSONP实现跨域请求的步骤如下：</p>\n<ol>\n<li><p><code>www.bbbbb.com.cn</code> 域名下的网页中定义一个加载跨域脚本的javascript函数，即一个能够动态生成 <code>&lt;script&gt;</code> 标签的函数，该 <code>&lt;script&gt;</code> 标签的 <code>src</code> 指向服务器端程序（ <code>www.aaaaa.com.cn</code> ）所在的URL，并且URL后应附加一个 <code>callback</code> 参数，以便服务器端能够动态生成以 <code>callback</code> 为名的javascript函数：</p>\n<figure class=\"highlight javascript\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div><div class=\"line\">6</div><div class=\"line\">7</div><div class=\"line\">8</div></pre></td><td class=\"code\"><pre><div class=\"line\"><span class=\"keyword\">var</span> remoteUrl = <span class=\"string\">\"http://www.aaaaa.com.cn/test/jsonpTest.php?callback=\"</span>;</div><div class=\"line\"><span class=\"function\"><span class=\"keyword\">function</span> <span class=\"title\">getDataFromRemote</span>(<span class=\"params\">callback</span>) </span></div><div class=\"line\">&#123;</div><div class=\"line\">    <span class=\"keyword\">var</span> remoteDataUrl = remoteUrl + callback;</div><div class=\"line\">    <span class=\"keyword\">var</span> script = <span class=\"built_in\">document</span>.createElement(<span class=\"string\">\"script\"</span>);</div><div class=\"line\">    script.setAttribute(<span class=\"string\">\"src\"</span>, remoteDataUrl);</div><div class=\"line\">    <span class=\"built_in\">document</span>.getElementsByTagName(<span class=\"string\">\"head\"</span>)[<span class=\"number\">0</span>].appendChild(script);</div><div class=\"line\">&#125;</div></pre></td></tr></table></figure>\n</li>\n<li><p>服务器端收到请求后，根据 <code>callback</code> 参数动态生成一段javascript脚本，该脚本调用 <code>callback</code> 函数并向其传递网页所需的数据：</p>\n<figure class=\"highlight php\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div><div class=\"line\">6</div><div class=\"line\">7</div></pre></td><td class=\"code\"><pre><div class=\"line\"><span class=\"meta\">&lt;?php</span></div><div class=\"line\"><span class=\"keyword\">if</span>(<span class=\"keyword\">isset</span>($_GET[<span class=\"string\">\"callback\"</span>]))</div><div class=\"line\">&#123;</div><div class=\"line\">    $json_data = json_encode([<span class=\"string\">\"data\"</span>=&gt; <span class=\"string\">\"Hello World\"</span>]);</div><div class=\"line\">    <span class=\"keyword\">echo</span> $_GET[<span class=\"string\">\"callback\"</span>].<span class=\"string\">\"(&#123;$json_data&#125;);\"</span>;</div><div class=\"line\">&#125;</div><div class=\"line\"><span class=\"meta\">?&gt;</span></div></pre></td></tr></table></figure>\n</li>\n<li><p>网页端定义名为 <code>callback</code> 的函数，用于接收、处理服务器端传来的数据：</p>\n<figure class=\"highlight javascript\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div></pre></td><td class=\"code\"><pre><div class=\"line\"><span class=\"function\"><span class=\"keyword\">function</span> <span class=\"title\">testCallback</span>(<span class=\"params\">jsonData</span>) </span></div><div class=\"line\">&#123;</div><div class=\"line\">    alert(jsonData[<span class=\"string\">\"data\"</span>]);</div><div class=\"line\">&#125;</div><div class=\"line\">getDataFromRemote(<span class=\"string\">'testCallback'</span>);</div></pre></td></tr></table></figure>\n</li>\n</ol>\n<h2 id=\"jQuery示例\"><a href=\"#jQuery示例\" class=\"headerlink\" title=\"jQuery示例\"></a>jQuery示例</h2><p>jQuery 中的 <code>ajax</code> 方法支持 JSONP 类型的请求，只需将 <code>dataType</code> 设置为 <code>jsonp</code> 即可，示例如下：</p>\n<figure class=\"highlight javascript\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div><div class=\"line\">6</div><div class=\"line\">7</div><div class=\"line\">8</div><div class=\"line\">9</div><div class=\"line\">10</div><div class=\"line\">11</div><div class=\"line\">12</div><div class=\"line\">13</div><div class=\"line\">14</div><div class=\"line\">15</div><div class=\"line\">16</div><div class=\"line\">17</div><div class=\"line\">18</div><div class=\"line\">19</div></pre></td><td class=\"code\"><pre><div class=\"line\">&lt;script type=<span class=\"string\">\"text/javascript\"</span> src=<span class=\"string\">\"//cdn.bootcss.com/jquery/2.2.1/jquery.min.js\"</span>&gt;&lt;/script&gt;</div><div class=\"line\">&lt;script type=<span class=\"string\">\"text/javascript\"</span>&gt;</div><div class=\"line\">    <span class=\"function\"><span class=\"keyword\">function</span> <span class=\"title\">getDataFromRemoteAjax</span>(<span class=\"params\"></span>)</span></div><div class=\"line\">    &#123;</div><div class=\"line\">        $.ajax(&#123;</div><div class=\"line\">            <span class=\"attr\">type</span>: <span class=\"string\">\"get\"</span>,</div><div class=\"line\">            <span class=\"attr\">async</span>: <span class=\"literal\">true</span>,</div><div class=\"line\">            <span class=\"attr\">url</span>: <span class=\"string\">\"http://www.aaaaa.com.cn/test/jsonpTest.php\"</span>,</div><div class=\"line\">            <span class=\"attr\">dataType</span>: <span class=\"string\">\"jsonp\"</span>,</div><div class=\"line\">            <span class=\"attr\">jsonpCallback</span>: <span class=\"string\">\"testCallbackAjax\"</span>,</div><div class=\"line\">            <span class=\"attr\">success</span>: <span class=\"function\"><span class=\"keyword\">function</span> (<span class=\"params\">data</span>) </span>&#123;</div><div class=\"line\">                alert(data[<span class=\"string\">\"data\"</span>]);</div><div class=\"line\">            &#125;,</div><div class=\"line\">            <span class=\"attr\">error</span>: <span class=\"function\"><span class=\"keyword\">function</span> (<span class=\"params\">err</span>) </span>&#123;</div><div class=\"line\">                alert(<span class=\"string\">\"error\"</span>);</div><div class=\"line\">            &#125;</div><div class=\"line\">        &#125;);</div><div class=\"line\">    &#125;</div><div class=\"line\">&lt;<span class=\"regexp\">/script&gt;</span></div></pre></td></tr></table></figure>\n<p>服务器端的代码与上例的相同。</p>\n","excerpt":"","more":"<h2 id=\"跨域问题\"><a href=\"#跨域问题\" class=\"headerlink\" title=\"跨域问题\"></a>跨域问题</h2><p><strong>跨域问题</strong>是由于浏览器的<strong>同源策略</strong>而产生的，同源是指<strong>同协议</strong>、<strong>同域名</strong>、<strong>同端口</strong>，出于安全的考虑，浏览器禁止脚本的跨域（不同源）请求。</p>\n<p>虽然浏览器禁止跨域请求，但是却允许引用和执行来自其他域的脚本文件，这也就是下面将要提到的 JSONP 的原理。</p>\n<h2 id=\"JSONP\"><a href=\"#JSONP\" class=\"headerlink\" title=\"JSONP\"></a>JSONP</h2><p>JSONP（JSON with Padding） 是一种动态加载js的技术，即使用javascript脚本动态加载<code>&lt;script&gt;</code>标签，从而使得网页可以跨域获取数据。该方法需要服务器端进行配合，动态生成javascript脚本，javascript脚本中包含网页所需的数据。</p>\n<p>假设 <code>www.bbbbb.com.cn</code> 域名下有一网页需要请求 <code>www.aaaaa.com.cn</code> 域名下的数据，利用JSONP实现跨域请求的步骤如下：</p>\n<ol>\n<li><p><code>www.bbbbb.com.cn</code> 域名下的网页中定义一个加载跨域脚本的javascript函数，即一个能够动态生成 <code>&lt;script&gt;</code> 标签的函数，该 <code>&lt;script&gt;</code> 标签的 <code>src</code> 指向服务器端程序（ <code>www.aaaaa.com.cn</code> ）所在的URL，并且URL后应附加一个 <code>callback</code> 参数，以便服务器端能够动态生成以 <code>callback</code> 为名的javascript函数：</p>\n<figure class=\"highlight javascript\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div><div class=\"line\">6</div><div class=\"line\">7</div><div class=\"line\">8</div></pre></td><td class=\"code\"><pre><div class=\"line\"><span class=\"keyword\">var</span> remoteUrl = <span class=\"string\">\"http://www.aaaaa.com.cn/test/jsonpTest.php?callback=\"</span>;</div><div class=\"line\"><span class=\"function\"><span class=\"keyword\">function</span> <span class=\"title\">getDataFromRemote</span>(<span class=\"params\">callback</span>) </div><div class=\"line\"></span>&#123;</div><div class=\"line\">    <span class=\"keyword\">var</span> remoteDataUrl = remoteUrl + callback;</div><div class=\"line\">    <span class=\"keyword\">var</span> script = <span class=\"built_in\">document</span>.createElement(<span class=\"string\">\"script\"</span>);</div><div class=\"line\">    script.setAttribute(<span class=\"string\">\"src\"</span>, remoteDataUrl);</div><div class=\"line\">    <span class=\"built_in\">document</span>.getElementsByTagName(<span class=\"string\">\"head\"</span>)[<span class=\"number\">0</span>].appendChild(script);</div><div class=\"line\">&#125;</div></pre></td></tr></table></figure>\n</li>\n<li><p>服务器端收到请求后，根据 <code>callback</code> 参数动态生成一段javascript脚本，该脚本调用 <code>callback</code> 函数并向其传递网页所需的数据：</p>\n<figure class=\"highlight php\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div><div class=\"line\">6</div><div class=\"line\">7</div></pre></td><td class=\"code\"><pre><div class=\"line\"><span class=\"meta\">&lt;?php</span></div><div class=\"line\"><span class=\"keyword\">if</span>(<span class=\"keyword\">isset</span>($_GET[<span class=\"string\">\"callback\"</span>]))</div><div class=\"line\">&#123;</div><div class=\"line\">    $json_data = json_encode([<span class=\"string\">\"data\"</span>=&gt; <span class=\"string\">\"Hello World\"</span>]);</div><div class=\"line\">    <span class=\"keyword\">echo</span> $_GET[<span class=\"string\">\"callback\"</span>].<span class=\"string\">\"(&#123;$json_data&#125;);\"</span>;</div><div class=\"line\">&#125;</div><div class=\"line\"><span class=\"meta\">?&gt;</span></div></pre></td></tr></table></figure>\n</li>\n<li><p>网页端定义名为 <code>callback</code> 的函数，用于接收、处理服务器端传来的数据：</p>\n<figure class=\"highlight javascript\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div></pre></td><td class=\"code\"><pre><div class=\"line\"><span class=\"function\"><span class=\"keyword\">function</span> <span class=\"title\">testCallback</span>(<span class=\"params\">jsonData</span>) </div><div class=\"line\"></span>&#123;</div><div class=\"line\">    alert(jsonData[<span class=\"string\">\"data\"</span>]);</div><div class=\"line\">&#125;</div><div class=\"line\">getDataFromRemote(<span class=\"string\">'testCallback'</span>);</div></pre></td></tr></table></figure>\n</li>\n</ol>\n<h2 id=\"jQuery示例\"><a href=\"#jQuery示例\" class=\"headerlink\" title=\"jQuery示例\"></a>jQuery示例</h2><p>jQuery 中的 <code>ajax</code> 方法支持 JSONP 类型的请求，只需将 <code>dataType</code> 设置为 <code>jsonp</code> 即可，示例如下：</p>\n<figure class=\"highlight javascript\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div><div class=\"line\">6</div><div class=\"line\">7</div><div class=\"line\">8</div><div class=\"line\">9</div><div class=\"line\">10</div><div class=\"line\">11</div><div class=\"line\">12</div><div class=\"line\">13</div><div class=\"line\">14</div><div class=\"line\">15</div><div class=\"line\">16</div><div class=\"line\">17</div><div class=\"line\">18</div><div class=\"line\">19</div></pre></td><td class=\"code\"><pre><div class=\"line\">&lt;script type=<span class=\"string\">\"text/javascript\"</span> src=<span class=\"string\">\"//cdn.bootcss.com/jquery/2.2.1/jquery.min.js\"</span>&gt;&lt;/script&gt;</div><div class=\"line\">&lt;script type=<span class=\"string\">\"text/javascript\"</span>&gt;</div><div class=\"line\">    <span class=\"function\"><span class=\"keyword\">function</span> <span class=\"title\">getDataFromRemoteAjax</span>(<span class=\"params\"></span>)</div><div class=\"line\">    </span>&#123;</div><div class=\"line\">        $.ajax(&#123;</div><div class=\"line\">            <span class=\"attr\">type</span>: <span class=\"string\">\"get\"</span>,</div><div class=\"line\">            <span class=\"attr\">async</span>: <span class=\"literal\">true</span>,</div><div class=\"line\">            <span class=\"attr\">url</span>: <span class=\"string\">\"http://www.aaaaa.com.cn/test/jsonpTest.php\"</span>,</div><div class=\"line\">            <span class=\"attr\">dataType</span>: <span class=\"string\">\"jsonp\"</span>,</div><div class=\"line\">            <span class=\"attr\">jsonpCallback</span>: <span class=\"string\">\"testCallbackAjax\"</span>,</div><div class=\"line\">            <span class=\"attr\">success</span>: <span class=\"function\"><span class=\"keyword\">function</span> (<span class=\"params\">data</span>) </span>&#123;</div><div class=\"line\">                alert(data[<span class=\"string\">\"data\"</span>]);</div><div class=\"line\">            &#125;,</div><div class=\"line\">            <span class=\"attr\">error</span>: <span class=\"function\"><span class=\"keyword\">function</span> (<span class=\"params\">err</span>) </span>&#123;</div><div class=\"line\">                alert(<span class=\"string\">\"error\"</span>);</div><div class=\"line\">            &#125;</div><div class=\"line\">        &#125;);</div><div class=\"line\">    &#125;</div><div class=\"line\">&lt;<span class=\"regexp\">/script&gt;</span></div></pre></td></tr></table></figure>\n<p>服务器端的代码与上例的相同。</p>\n"},{"layout":"post","title":"微信公众平台自定义菜单配置工具的实现","description":"wechat button manage","date":"2015-12-08T16:00:00.000Z","_content":"\n由于JS脚本跨域访问的问题，无法通过jQuery的Ajax方法直接调用微信的API，故采用服务器端转发的方式与微信API交互。\n\n配置自定义菜单须先获取Access Token，前端JS代码如下：\n\n```javascript\nfunction getAccessToken()\n{\n    var appidParam = $(\"#appid\").val();\n    var secretParam = $(\"#secret\").val();\n    var date = new Date();\n    var url = \"get_access_token.php?appid=\"+appidParam+\"&secret=\"+secretParam+\"&time=\"+date.getTime();\n    $.get(url, function (data,status) {\n        var result = eval(\"(\"+data+\")\");\n        $(\"#info\").css(\"display\",\"block\");\n        if(typeof (result[\"errcode\"])!=\"undefined\")\n        {\n            var errorInfo = \"错误代码：\"+result[\"errcode\"]+\";错误信息：\"+result[\"errmsg\"];\n            $(\"#info\").html(errorInfo);\n            $(\"#changeBtn\").attr(\"disabled\",\"disabled\");\n        }\n        else\n        {\n            var successInfo = \"获取Access Token 成功：\" + result[\"access_token\"];\n            $(\"#accessToken\").val(result[\"access_token\"]);\n            $(\"#info\").html(successInfo);\n            $(\"#changeBtn\").removeAttr(\"disabled\");\n        }\n    })\n\n}\n\n```\n\n服务器端使用PHP的curl工具进行转发，代码如下\n\n```php\n$appid = $_GET[\"appid\"];\n$secret = $_GET[\"secret\"];\n$api_url = \"https://api.weixin.qq.com/cgi-bin/token?grant_type=client_credential&appid={$appid}&secret={$secret}\";\n$ch = curl_init();\ncurl_setopt($ch,CURLOPT_URL,$api_url);\ncurl_setopt($ch,CURLOPT_RETURNTRANSFER,1);\ncurl_setopt($ch, CURLOPT_SSL_VERIFYPEER, false);\ncurl_setopt($ch, CURLOPT_SSL_VERIFYHOST, false);\n$json_result = curl_exec($ch);\ncurl_close($ch);\necho $json_result;\n```\n\n利用获取到的 Access Token，下一步可以配置自定义菜单。目前还需要自己编写自定义菜单的JSON，以后有时间会加上可视化界面。通过POST方法向服务器提交JSON的JS代码如下：\n\n```javascript\nfunction changeButton()\n{\n    var url = \"button_manage.php?access_token=\"+$(\"#accessToken\").val();\n    var button_json = $(\"#buttonBody\").val();\n    $.post(url,{\"button_json\":button_json}, function (data,status) {\n        var result = eval(\"(\"+data+\")\");\n        if(result[\"errcode\"] == 0)\n        {\n            alert(\"配置成功\");\n        }\n        else\n        {\n            alert(\"配置失败，错误代码：\"+result[\"errcode\"]+\"错误信息：\"+result[\"errmsg\"]);\n        }\n    })\n}\n```\n\n服务器端的PHP代码如下：\n\n```php\n$access_token = $_GET[\"access_token\"];\n$api_url = \"https://api.weixin.qq.com/cgi-bin/menu/create?access_token={$access_token}\";\n$button_json = $_POST[\"button_json\"];\n$ch = curl_init();\ncurl_setopt($ch,CURLOPT_URL,$api_url);\ncurl_setopt($ch,CURLOPT_RETURNTRANSFER,1);\ncurl_setopt($ch, CURLOPT_SSL_VERIFYPEER, false);\ncurl_setopt($ch, CURLOPT_SSL_VERIFYHOST, false);\ncurl_setopt($ch, CURLOPT_POST, 1);\ncurl_setopt($ch, CURLOPT_POSTFIELDS, $button_json);\n$json_result = curl_exec($ch);\ncurl_close($ch);\necho $json_result;\n```\n\n实现效果可访问：\n\n[http://leo07.sinaapp.com/button_manage.html](http://leo07.sinaapp.com/button_manage.html)\n\n\n\n","source":"_posts/wechat-button-manage.md","raw":"---\nlayout: post\ntitle: \"微信公众平台自定义菜单配置工具的实现\"\ndescription: \"wechat button manage\"\ncategory: WeChat\ntags: [php, wechat, curl, tools]\ndate: 2015-12-09\n---\n\n由于JS脚本跨域访问的问题，无法通过jQuery的Ajax方法直接调用微信的API，故采用服务器端转发的方式与微信API交互。\n\n配置自定义菜单须先获取Access Token，前端JS代码如下：\n\n```javascript\nfunction getAccessToken()\n{\n    var appidParam = $(\"#appid\").val();\n    var secretParam = $(\"#secret\").val();\n    var date = new Date();\n    var url = \"get_access_token.php?appid=\"+appidParam+\"&secret=\"+secretParam+\"&time=\"+date.getTime();\n    $.get(url, function (data,status) {\n        var result = eval(\"(\"+data+\")\");\n        $(\"#info\").css(\"display\",\"block\");\n        if(typeof (result[\"errcode\"])!=\"undefined\")\n        {\n            var errorInfo = \"错误代码：\"+result[\"errcode\"]+\";错误信息：\"+result[\"errmsg\"];\n            $(\"#info\").html(errorInfo);\n            $(\"#changeBtn\").attr(\"disabled\",\"disabled\");\n        }\n        else\n        {\n            var successInfo = \"获取Access Token 成功：\" + result[\"access_token\"];\n            $(\"#accessToken\").val(result[\"access_token\"]);\n            $(\"#info\").html(successInfo);\n            $(\"#changeBtn\").removeAttr(\"disabled\");\n        }\n    })\n\n}\n\n```\n\n服务器端使用PHP的curl工具进行转发，代码如下\n\n```php\n$appid = $_GET[\"appid\"];\n$secret = $_GET[\"secret\"];\n$api_url = \"https://api.weixin.qq.com/cgi-bin/token?grant_type=client_credential&appid={$appid}&secret={$secret}\";\n$ch = curl_init();\ncurl_setopt($ch,CURLOPT_URL,$api_url);\ncurl_setopt($ch,CURLOPT_RETURNTRANSFER,1);\ncurl_setopt($ch, CURLOPT_SSL_VERIFYPEER, false);\ncurl_setopt($ch, CURLOPT_SSL_VERIFYHOST, false);\n$json_result = curl_exec($ch);\ncurl_close($ch);\necho $json_result;\n```\n\n利用获取到的 Access Token，下一步可以配置自定义菜单。目前还需要自己编写自定义菜单的JSON，以后有时间会加上可视化界面。通过POST方法向服务器提交JSON的JS代码如下：\n\n```javascript\nfunction changeButton()\n{\n    var url = \"button_manage.php?access_token=\"+$(\"#accessToken\").val();\n    var button_json = $(\"#buttonBody\").val();\n    $.post(url,{\"button_json\":button_json}, function (data,status) {\n        var result = eval(\"(\"+data+\")\");\n        if(result[\"errcode\"] == 0)\n        {\n            alert(\"配置成功\");\n        }\n        else\n        {\n            alert(\"配置失败，错误代码：\"+result[\"errcode\"]+\"错误信息：\"+result[\"errmsg\"]);\n        }\n    })\n}\n```\n\n服务器端的PHP代码如下：\n\n```php\n$access_token = $_GET[\"access_token\"];\n$api_url = \"https://api.weixin.qq.com/cgi-bin/menu/create?access_token={$access_token}\";\n$button_json = $_POST[\"button_json\"];\n$ch = curl_init();\ncurl_setopt($ch,CURLOPT_URL,$api_url);\ncurl_setopt($ch,CURLOPT_RETURNTRANSFER,1);\ncurl_setopt($ch, CURLOPT_SSL_VERIFYPEER, false);\ncurl_setopt($ch, CURLOPT_SSL_VERIFYHOST, false);\ncurl_setopt($ch, CURLOPT_POST, 1);\ncurl_setopt($ch, CURLOPT_POSTFIELDS, $button_json);\n$json_result = curl_exec($ch);\ncurl_close($ch);\necho $json_result;\n```\n\n实现效果可访问：\n\n[http://leo07.sinaapp.com/button_manage.html](http://leo07.sinaapp.com/button_manage.html)\n\n\n\n","slug":"wechat-button-manage","published":1,"updated":"2017-02-08T05:28:56.199Z","comments":1,"photos":[],"link":"","_id":"ciyy89nia000zbsub7kom2xxg","content":"<p>由于JS脚本跨域访问的问题，无法通过jQuery的Ajax方法直接调用微信的API，故采用服务器端转发的方式与微信API交互。</p>\n<p>配置自定义菜单须先获取Access Token，前端JS代码如下：</p>\n<figure class=\"highlight javascript\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div><div class=\"line\">6</div><div class=\"line\">7</div><div class=\"line\">8</div><div class=\"line\">9</div><div class=\"line\">10</div><div class=\"line\">11</div><div class=\"line\">12</div><div class=\"line\">13</div><div class=\"line\">14</div><div class=\"line\">15</div><div class=\"line\">16</div><div class=\"line\">17</div><div class=\"line\">18</div><div class=\"line\">19</div><div class=\"line\">20</div><div class=\"line\">21</div><div class=\"line\">22</div><div class=\"line\">23</div><div class=\"line\">24</div><div class=\"line\">25</div></pre></td><td class=\"code\"><pre><div class=\"line\"><span class=\"function\"><span class=\"keyword\">function</span> <span class=\"title\">getAccessToken</span>(<span class=\"params\"></span>)</span></div><div class=\"line\">&#123;</div><div class=\"line\">    <span class=\"keyword\">var</span> appidParam = $(<span class=\"string\">\"#appid\"</span>).val();</div><div class=\"line\">    <span class=\"keyword\">var</span> secretParam = $(<span class=\"string\">\"#secret\"</span>).val();</div><div class=\"line\">    <span class=\"keyword\">var</span> date = <span class=\"keyword\">new</span> <span class=\"built_in\">Date</span>();</div><div class=\"line\">    <span class=\"keyword\">var</span> url = <span class=\"string\">\"get_access_token.php?appid=\"</span>+appidParam+<span class=\"string\">\"&amp;secret=\"</span>+secretParam+<span class=\"string\">\"&amp;time=\"</span>+date.getTime();</div><div class=\"line\">    $.get(url, <span class=\"function\"><span class=\"keyword\">function</span> (<span class=\"params\">data,status</span>) </span>&#123;</div><div class=\"line\">        <span class=\"keyword\">var</span> result = <span class=\"built_in\">eval</span>(<span class=\"string\">\"(\"</span>+data+<span class=\"string\">\")\"</span>);</div><div class=\"line\">        $(<span class=\"string\">\"#info\"</span>).css(<span class=\"string\">\"display\"</span>,<span class=\"string\">\"block\"</span>);</div><div class=\"line\">        <span class=\"keyword\">if</span>(<span class=\"keyword\">typeof</span> (result[<span class=\"string\">\"errcode\"</span>])!=<span class=\"string\">\"undefined\"</span>)</div><div class=\"line\">        &#123;</div><div class=\"line\">            <span class=\"keyword\">var</span> errorInfo = <span class=\"string\">\"错误代码：\"</span>+result[<span class=\"string\">\"errcode\"</span>]+<span class=\"string\">\";错误信息：\"</span>+result[<span class=\"string\">\"errmsg\"</span>];</div><div class=\"line\">            $(<span class=\"string\">\"#info\"</span>).html(errorInfo);</div><div class=\"line\">            $(<span class=\"string\">\"#changeBtn\"</span>).attr(<span class=\"string\">\"disabled\"</span>,<span class=\"string\">\"disabled\"</span>);</div><div class=\"line\">        &#125;</div><div class=\"line\">        <span class=\"keyword\">else</span></div><div class=\"line\">        &#123;</div><div class=\"line\">            <span class=\"keyword\">var</span> successInfo = <span class=\"string\">\"获取Access Token 成功：\"</span> + result[<span class=\"string\">\"access_token\"</span>];</div><div class=\"line\">            $(<span class=\"string\">\"#accessToken\"</span>).val(result[<span class=\"string\">\"access_token\"</span>]);</div><div class=\"line\">            $(<span class=\"string\">\"#info\"</span>).html(successInfo);</div><div class=\"line\">            $(<span class=\"string\">\"#changeBtn\"</span>).removeAttr(<span class=\"string\">\"disabled\"</span>);</div><div class=\"line\">        &#125;</div><div class=\"line\">    &#125;)</div><div class=\"line\"></div><div class=\"line\">&#125;</div></pre></td></tr></table></figure>\n<p>服务器端使用PHP的curl工具进行转发，代码如下</p>\n<figure class=\"highlight php\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div><div class=\"line\">6</div><div class=\"line\">7</div><div class=\"line\">8</div><div class=\"line\">9</div><div class=\"line\">10</div><div class=\"line\">11</div></pre></td><td class=\"code\"><pre><div class=\"line\">$appid = $_GET[<span class=\"string\">\"appid\"</span>];</div><div class=\"line\">$secret = $_GET[<span class=\"string\">\"secret\"</span>];</div><div class=\"line\">$api_url = <span class=\"string\">\"https://api.weixin.qq.com/cgi-bin/token?grant_type=client_credential&amp;appid=&#123;$appid&#125;&amp;secret=&#123;$secret&#125;\"</span>;</div><div class=\"line\">$ch = curl_init();</div><div class=\"line\">curl_setopt($ch,CURLOPT_URL,$api_url);</div><div class=\"line\">curl_setopt($ch,CURLOPT_RETURNTRANSFER,<span class=\"number\">1</span>);</div><div class=\"line\">curl_setopt($ch, CURLOPT_SSL_VERIFYPEER, <span class=\"keyword\">false</span>);</div><div class=\"line\">curl_setopt($ch, CURLOPT_SSL_VERIFYHOST, <span class=\"keyword\">false</span>);</div><div class=\"line\">$json_result = curl_exec($ch);</div><div class=\"line\">curl_close($ch);</div><div class=\"line\"><span class=\"keyword\">echo</span> $json_result;</div></pre></td></tr></table></figure>\n<p>利用获取到的 Access Token，下一步可以配置自定义菜单。目前还需要自己编写自定义菜单的JSON，以后有时间会加上可视化界面。通过POST方法向服务器提交JSON的JS代码如下：</p>\n<figure class=\"highlight javascript\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div><div class=\"line\">6</div><div class=\"line\">7</div><div class=\"line\">8</div><div class=\"line\">9</div><div class=\"line\">10</div><div class=\"line\">11</div><div class=\"line\">12</div><div class=\"line\">13</div><div class=\"line\">14</div><div class=\"line\">15</div><div class=\"line\">16</div></pre></td><td class=\"code\"><pre><div class=\"line\"><span class=\"function\"><span class=\"keyword\">function</span> <span class=\"title\">changeButton</span>(<span class=\"params\"></span>)</span></div><div class=\"line\">&#123;</div><div class=\"line\">    <span class=\"keyword\">var</span> url = <span class=\"string\">\"button_manage.php?access_token=\"</span>+$(<span class=\"string\">\"#accessToken\"</span>).val();</div><div class=\"line\">    <span class=\"keyword\">var</span> button_json = $(<span class=\"string\">\"#buttonBody\"</span>).val();</div><div class=\"line\">    $.post(url,&#123;<span class=\"string\">\"button_json\"</span>:button_json&#125;, <span class=\"function\"><span class=\"keyword\">function</span> (<span class=\"params\">data,status</span>) </span>&#123;</div><div class=\"line\">        <span class=\"keyword\">var</span> result = <span class=\"built_in\">eval</span>(<span class=\"string\">\"(\"</span>+data+<span class=\"string\">\")\"</span>);</div><div class=\"line\">        <span class=\"keyword\">if</span>(result[<span class=\"string\">\"errcode\"</span>] == <span class=\"number\">0</span>)</div><div class=\"line\">        &#123;</div><div class=\"line\">            alert(<span class=\"string\">\"配置成功\"</span>);</div><div class=\"line\">        &#125;</div><div class=\"line\">        <span class=\"keyword\">else</span></div><div class=\"line\">        &#123;</div><div class=\"line\">            alert(<span class=\"string\">\"配置失败，错误代码：\"</span>+result[<span class=\"string\">\"errcode\"</span>]+<span class=\"string\">\"错误信息：\"</span>+result[<span class=\"string\">\"errmsg\"</span>]);</div><div class=\"line\">        &#125;</div><div class=\"line\">    &#125;)</div><div class=\"line\">&#125;</div></pre></td></tr></table></figure>\n<p>服务器端的PHP代码如下：</p>\n<figure class=\"highlight php\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div><div class=\"line\">6</div><div class=\"line\">7</div><div class=\"line\">8</div><div class=\"line\">9</div><div class=\"line\">10</div><div class=\"line\">11</div><div class=\"line\">12</div><div class=\"line\">13</div></pre></td><td class=\"code\"><pre><div class=\"line\">$access_token = $_GET[<span class=\"string\">\"access_token\"</span>];</div><div class=\"line\">$api_url = <span class=\"string\">\"https://api.weixin.qq.com/cgi-bin/menu/create?access_token=&#123;$access_token&#125;\"</span>;</div><div class=\"line\">$button_json = $_POST[<span class=\"string\">\"button_json\"</span>];</div><div class=\"line\">$ch = curl_init();</div><div class=\"line\">curl_setopt($ch,CURLOPT_URL,$api_url);</div><div class=\"line\">curl_setopt($ch,CURLOPT_RETURNTRANSFER,<span class=\"number\">1</span>);</div><div class=\"line\">curl_setopt($ch, CURLOPT_SSL_VERIFYPEER, <span class=\"keyword\">false</span>);</div><div class=\"line\">curl_setopt($ch, CURLOPT_SSL_VERIFYHOST, <span class=\"keyword\">false</span>);</div><div class=\"line\">curl_setopt($ch, CURLOPT_POST, <span class=\"number\">1</span>);</div><div class=\"line\">curl_setopt($ch, CURLOPT_POSTFIELDS, $button_json);</div><div class=\"line\">$json_result = curl_exec($ch);</div><div class=\"line\">curl_close($ch);</div><div class=\"line\"><span class=\"keyword\">echo</span> $json_result;</div></pre></td></tr></table></figure>\n<p>实现效果可访问：</p>\n<p><a href=\"http://leo07.sinaapp.com/button_manage.html\" target=\"_blank\" rel=\"external\">http://leo07.sinaapp.com/button_manage.html</a></p>\n","excerpt":"","more":"<p>由于JS脚本跨域访问的问题，无法通过jQuery的Ajax方法直接调用微信的API，故采用服务器端转发的方式与微信API交互。</p>\n<p>配置自定义菜单须先获取Access Token，前端JS代码如下：</p>\n<figure class=\"highlight javascript\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div><div class=\"line\">6</div><div class=\"line\">7</div><div class=\"line\">8</div><div class=\"line\">9</div><div class=\"line\">10</div><div class=\"line\">11</div><div class=\"line\">12</div><div class=\"line\">13</div><div class=\"line\">14</div><div class=\"line\">15</div><div class=\"line\">16</div><div class=\"line\">17</div><div class=\"line\">18</div><div class=\"line\">19</div><div class=\"line\">20</div><div class=\"line\">21</div><div class=\"line\">22</div><div class=\"line\">23</div><div class=\"line\">24</div><div class=\"line\">25</div></pre></td><td class=\"code\"><pre><div class=\"line\"><span class=\"function\"><span class=\"keyword\">function</span> <span class=\"title\">getAccessToken</span>(<span class=\"params\"></span>)</div><div class=\"line\"></span>&#123;</div><div class=\"line\">    <span class=\"keyword\">var</span> appidParam = $(<span class=\"string\">\"#appid\"</span>).val();</div><div class=\"line\">    <span class=\"keyword\">var</span> secretParam = $(<span class=\"string\">\"#secret\"</span>).val();</div><div class=\"line\">    <span class=\"keyword\">var</span> date = <span class=\"keyword\">new</span> <span class=\"built_in\">Date</span>();</div><div class=\"line\">    <span class=\"keyword\">var</span> url = <span class=\"string\">\"get_access_token.php?appid=\"</span>+appidParam+<span class=\"string\">\"&amp;secret=\"</span>+secretParam+<span class=\"string\">\"&amp;time=\"</span>+date.getTime();</div><div class=\"line\">    $.get(url, <span class=\"function\"><span class=\"keyword\">function</span> (<span class=\"params\">data,status</span>) </span>&#123;</div><div class=\"line\">        <span class=\"keyword\">var</span> result = <span class=\"built_in\">eval</span>(<span class=\"string\">\"(\"</span>+data+<span class=\"string\">\")\"</span>);</div><div class=\"line\">        $(<span class=\"string\">\"#info\"</span>).css(<span class=\"string\">\"display\"</span>,<span class=\"string\">\"block\"</span>);</div><div class=\"line\">        <span class=\"keyword\">if</span>(<span class=\"keyword\">typeof</span> (result[<span class=\"string\">\"errcode\"</span>])!=<span class=\"string\">\"undefined\"</span>)</div><div class=\"line\">        &#123;</div><div class=\"line\">            <span class=\"keyword\">var</span> errorInfo = <span class=\"string\">\"错误代码：\"</span>+result[<span class=\"string\">\"errcode\"</span>]+<span class=\"string\">\";错误信息：\"</span>+result[<span class=\"string\">\"errmsg\"</span>];</div><div class=\"line\">            $(<span class=\"string\">\"#info\"</span>).html(errorInfo);</div><div class=\"line\">            $(<span class=\"string\">\"#changeBtn\"</span>).attr(<span class=\"string\">\"disabled\"</span>,<span class=\"string\">\"disabled\"</span>);</div><div class=\"line\">        &#125;</div><div class=\"line\">        <span class=\"keyword\">else</span></div><div class=\"line\">        &#123;</div><div class=\"line\">            <span class=\"keyword\">var</span> successInfo = <span class=\"string\">\"获取Access Token 成功：\"</span> + result[<span class=\"string\">\"access_token\"</span>];</div><div class=\"line\">            $(<span class=\"string\">\"#accessToken\"</span>).val(result[<span class=\"string\">\"access_token\"</span>]);</div><div class=\"line\">            $(<span class=\"string\">\"#info\"</span>).html(successInfo);</div><div class=\"line\">            $(<span class=\"string\">\"#changeBtn\"</span>).removeAttr(<span class=\"string\">\"disabled\"</span>);</div><div class=\"line\">        &#125;</div><div class=\"line\">    &#125;)</div><div class=\"line\"></div><div class=\"line\">&#125;</div></pre></td></tr></table></figure>\n<p>服务器端使用PHP的curl工具进行转发，代码如下</p>\n<figure class=\"highlight php\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div><div class=\"line\">6</div><div class=\"line\">7</div><div class=\"line\">8</div><div class=\"line\">9</div><div class=\"line\">10</div><div class=\"line\">11</div></pre></td><td class=\"code\"><pre><div class=\"line\">$appid = $_GET[<span class=\"string\">\"appid\"</span>];</div><div class=\"line\">$secret = $_GET[<span class=\"string\">\"secret\"</span>];</div><div class=\"line\">$api_url = <span class=\"string\">\"https://api.weixin.qq.com/cgi-bin/token?grant_type=client_credential&amp;appid=&#123;$appid&#125;&amp;secret=&#123;$secret&#125;\"</span>;</div><div class=\"line\">$ch = curl_init();</div><div class=\"line\">curl_setopt($ch,CURLOPT_URL,$api_url);</div><div class=\"line\">curl_setopt($ch,CURLOPT_RETURNTRANSFER,<span class=\"number\">1</span>);</div><div class=\"line\">curl_setopt($ch, CURLOPT_SSL_VERIFYPEER, <span class=\"keyword\">false</span>);</div><div class=\"line\">curl_setopt($ch, CURLOPT_SSL_VERIFYHOST, <span class=\"keyword\">false</span>);</div><div class=\"line\">$json_result = curl_exec($ch);</div><div class=\"line\">curl_close($ch);</div><div class=\"line\"><span class=\"keyword\">echo</span> $json_result;</div></pre></td></tr></table></figure>\n<p>利用获取到的 Access Token，下一步可以配置自定义菜单。目前还需要自己编写自定义菜单的JSON，以后有时间会加上可视化界面。通过POST方法向服务器提交JSON的JS代码如下：</p>\n<figure class=\"highlight javascript\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div><div class=\"line\">6</div><div class=\"line\">7</div><div class=\"line\">8</div><div class=\"line\">9</div><div class=\"line\">10</div><div class=\"line\">11</div><div class=\"line\">12</div><div class=\"line\">13</div><div class=\"line\">14</div><div class=\"line\">15</div><div class=\"line\">16</div></pre></td><td class=\"code\"><pre><div class=\"line\"><span class=\"function\"><span class=\"keyword\">function</span> <span class=\"title\">changeButton</span>(<span class=\"params\"></span>)</div><div class=\"line\"></span>&#123;</div><div class=\"line\">    <span class=\"keyword\">var</span> url = <span class=\"string\">\"button_manage.php?access_token=\"</span>+$(<span class=\"string\">\"#accessToken\"</span>).val();</div><div class=\"line\">    <span class=\"keyword\">var</span> button_json = $(<span class=\"string\">\"#buttonBody\"</span>).val();</div><div class=\"line\">    $.post(url,&#123;<span class=\"string\">\"button_json\"</span>:button_json&#125;, <span class=\"function\"><span class=\"keyword\">function</span> (<span class=\"params\">data,status</span>) </span>&#123;</div><div class=\"line\">        <span class=\"keyword\">var</span> result = <span class=\"built_in\">eval</span>(<span class=\"string\">\"(\"</span>+data+<span class=\"string\">\")\"</span>);</div><div class=\"line\">        <span class=\"keyword\">if</span>(result[<span class=\"string\">\"errcode\"</span>] == <span class=\"number\">0</span>)</div><div class=\"line\">        &#123;</div><div class=\"line\">            alert(<span class=\"string\">\"配置成功\"</span>);</div><div class=\"line\">        &#125;</div><div class=\"line\">        <span class=\"keyword\">else</span></div><div class=\"line\">        &#123;</div><div class=\"line\">            alert(<span class=\"string\">\"配置失败，错误代码：\"</span>+result[<span class=\"string\">\"errcode\"</span>]+<span class=\"string\">\"错误信息：\"</span>+result[<span class=\"string\">\"errmsg\"</span>]);</div><div class=\"line\">        &#125;</div><div class=\"line\">    &#125;)</div><div class=\"line\">&#125;</div></pre></td></tr></table></figure>\n<p>服务器端的PHP代码如下：</p>\n<figure class=\"highlight php\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div><div class=\"line\">6</div><div class=\"line\">7</div><div class=\"line\">8</div><div class=\"line\">9</div><div class=\"line\">10</div><div class=\"line\">11</div><div class=\"line\">12</div><div class=\"line\">13</div></pre></td><td class=\"code\"><pre><div class=\"line\">$access_token = $_GET[<span class=\"string\">\"access_token\"</span>];</div><div class=\"line\">$api_url = <span class=\"string\">\"https://api.weixin.qq.com/cgi-bin/menu/create?access_token=&#123;$access_token&#125;\"</span>;</div><div class=\"line\">$button_json = $_POST[<span class=\"string\">\"button_json\"</span>];</div><div class=\"line\">$ch = curl_init();</div><div class=\"line\">curl_setopt($ch,CURLOPT_URL,$api_url);</div><div class=\"line\">curl_setopt($ch,CURLOPT_RETURNTRANSFER,<span class=\"number\">1</span>);</div><div class=\"line\">curl_setopt($ch, CURLOPT_SSL_VERIFYPEER, <span class=\"keyword\">false</span>);</div><div class=\"line\">curl_setopt($ch, CURLOPT_SSL_VERIFYHOST, <span class=\"keyword\">false</span>);</div><div class=\"line\">curl_setopt($ch, CURLOPT_POST, <span class=\"number\">1</span>);</div><div class=\"line\">curl_setopt($ch, CURLOPT_POSTFIELDS, $button_json);</div><div class=\"line\">$json_result = curl_exec($ch);</div><div class=\"line\">curl_close($ch);</div><div class=\"line\"><span class=\"keyword\">echo</span> $json_result;</div></pre></td></tr></table></figure>\n<p>实现效果可访问：</p>\n<p><a href=\"http://leo07.sinaapp.com/button_manage.html\">http://leo07.sinaapp.com/button_manage.html</a></p>\n"}],"PostAsset":[],"PostCategory":[{"post_id":"ciyy89nh50007bsubolg0lxmt","category_id":"ciyy89ngw0004bsubbn7or143","_id":"ciyy89nhi000cbsubenrep9g0"},{"post_id":"ciyy89ngi0000bsubbegt07jn","category_id":"ciyy89ngw0004bsubbn7or143","_id":"ciyy89nhl000gbsubmpjyngio"},{"post_id":"ciyy89ngr0002bsub7xs7dkgq","category_id":"ciyy89nhe0009bsubl7nmhyxd","_id":"ciyy89nht000kbsub53h89q7l"},{"post_id":"ciyy89nh20006bsub8o1a3cha","category_id":"ciyy89nhj000ebsublvn42taa","_id":"ciyy89ni1000qbsubamfwx6wy"},{"post_id":"ciyy89nh90008bsub8t9vcz4e","category_id":"ciyy89nhv000nbsub0v9ej4ve","_id":"ciyy89ni7000vbsub5py8ynd1"},{"post_id":"ciyy89nhg000bbsubsi8igtlw","category_id":"ciyy89ni3000sbsub7ka4czsv","_id":"ciyy89nib0010bsub867emdcq"},{"post_id":"ciyy89nhi000dbsubx9jdvztc","category_id":"ciyy89ni9000ybsub5mhvtnfc","_id":"ciyy89nij0015bsubz4urdt2h"},{"post_id":"ciyy89nhm000hbsub8qbvfbwt","category_id":"ciyy89ni9000ybsub5mhvtnfc","_id":"ciyy89nin001absubyxfwteqz"},{"post_id":"ciyy89nhq000jbsubxgto2o6g","category_id":"ciyy89nik0016bsub76nrrw4a","_id":"ciyy89nip001dbsubuw2jy6ll"},{"post_id":"ciyy89nhw000obsubhuvrdb5e","category_id":"ciyy89nin001bbsub4pbjcz49","_id":"ciyy89nir001hbsub42vlw7w8"},{"post_id":"ciyy89nhz000pbsubwmsrp9oh","category_id":"ciyy89nip001ebsubaz2zs9vo","_id":"ciyy89niv001nbsubwnciusuy"},{"post_id":"ciyy89ni3000tbsub9e0upi2e","category_id":"ciyy89ni3000sbsub7ka4czsv","_id":"ciyy89niz001rbsub9g1mcubd"},{"post_id":"ciyy89ni6000ubsubyw0c5n10","category_id":"ciyy89nip001ebsubaz2zs9vo","_id":"ciyy89nj2001ubsub8cnmt5h9"},{"post_id":"ciyy89ni8000xbsublcrbv01c","category_id":"ciyy89ni9000ybsub5mhvtnfc","_id":"ciyy89nj6001ybsubecuzv75m"},{"post_id":"ciyy89nia000zbsub7kom2xxg","category_id":"ciyy89nip001ebsubaz2zs9vo","_id":"ciyy89nj70022bsubnw2q0z6z"}],"PostTag":[{"post_id":"ciyy89ngi0000bsubbegt07jn","tag_id":"ciyy89nh10005bsubf9cyp76r","_id":"ciyy89nhp000ibsubx3qxogs3"},{"post_id":"ciyy89ngi0000bsubbegt07jn","tag_id":"ciyy89nhf000absubal9c66xu","_id":"ciyy89nht000lbsubi37ky75g"},{"post_id":"ciyy89ngr0002bsub7xs7dkgq","tag_id":"ciyy89nhf000absubal9c66xu","_id":"ciyy89nif0013bsub3qt1n4g3"},{"post_id":"ciyy89ngr0002bsub7xs7dkgq","tag_id":"ciyy89nhu000mbsubohjsdz9y","_id":"ciyy89nii0014bsubxkkb27tu"},{"post_id":"ciyy89ngr0002bsub7xs7dkgq","tag_id":"ciyy89ni2000rbsub8bzp90vv","_id":"ciyy89nim0018bsubda6qmdqj"},{"post_id":"ciyy89ngr0002bsub7xs7dkgq","tag_id":"ciyy89ni7000wbsubwy06d2jg","_id":"ciyy89nin0019bsubt8kf1els"},{"post_id":"ciyy89nh20006bsub8o1a3cha","tag_id":"ciyy89nic0011bsubw4pxx37f","_id":"ciyy89niq001gbsubsfgqupzw"},{"post_id":"ciyy89nh20006bsub8o1a3cha","tag_id":"ciyy89nik0017bsub1a1mc237","_id":"ciyy89nir001ibsubrvu7z4n0"},{"post_id":"ciyy89nh20006bsub8o1a3cha","tag_id":"ciyy89nio001cbsub6szg1mq2","_id":"ciyy89nis001lbsubs6a0qszq"},{"post_id":"ciyy89nh50007bsubolg0lxmt","tag_id":"ciyy89nh10005bsubf9cyp76r","_id":"ciyy89niu001mbsubf3afmk23"},{"post_id":"ciyy89nh50007bsubolg0lxmt","tag_id":"ciyy89nhf000absubal9c66xu","_id":"ciyy89niy001qbsub0gd35zbe"},{"post_id":"ciyy89nh90008bsub8t9vcz4e","tag_id":"ciyy89nir001jbsubtdjt7ynn","_id":"ciyy89nj5001xbsubv9is2yyj"},{"post_id":"ciyy89nh90008bsub8t9vcz4e","tag_id":"ciyy89niw001pbsubssrbs3hl","_id":"ciyy89nj6001zbsubguxn8p29"},{"post_id":"ciyy89nh90008bsub8t9vcz4e","tag_id":"ciyy89ni7000wbsubwy06d2jg","_id":"ciyy89nj70021bsubjnqtqqno"},{"post_id":"ciyy89nhg000bbsubsi8igtlw","tag_id":"ciyy89nh10005bsubf9cyp76r","_id":"ciyy89nj90024bsubo9uc8sod"},{"post_id":"ciyy89nhg000bbsubsi8igtlw","tag_id":"ciyy89nj4001wbsubwe4mnx5c","_id":"ciyy89nja0025bsubjmnsc2kq"},{"post_id":"ciyy89nhg000bbsubsi8igtlw","tag_id":"ciyy89nj70020bsubus4qfvcn","_id":"ciyy89njf0027bsub6q94kf1v"},{"post_id":"ciyy89nhi000dbsubx9jdvztc","tag_id":"ciyy89nj80023bsubs71jljzp","_id":"ciyy89njh0029bsube0rsl21j"},{"post_id":"ciyy89nhi000dbsubx9jdvztc","tag_id":"ciyy89nja0026bsub45n68ty7","_id":"ciyy89nji002absub4qlizi8z"},{"post_id":"ciyy89nhm000hbsub8qbvfbwt","tag_id":"ciyy89nj80023bsubs71jljzp","_id":"ciyy89njm002dbsubisabqn4n"},{"post_id":"ciyy89nhm000hbsub8qbvfbwt","tag_id":"ciyy89nji002bbsubxmbccb99","_id":"ciyy89njn002ebsubfpx7ksma"},{"post_id":"ciyy89nhq000jbsubxgto2o6g","tag_id":"ciyy89njl002cbsubjen2rb0u","_id":"ciyy89njn002gbsub5gkp1zzm"},{"post_id":"ciyy89nhw000obsubhuvrdb5e","tag_id":"ciyy89njn002fbsubgtxgybi8","_id":"ciyy89njv002kbsubgm8ans0i"},{"post_id":"ciyy89nhw000obsubhuvrdb5e","tag_id":"ciyy89nic0011bsubw4pxx37f","_id":"ciyy89njv002lbsub4y952yh3"},{"post_id":"ciyy89nhw000obsubhuvrdb5e","tag_id":"ciyy89njt002ibsub5vb6hkg2","_id":"ciyy89njw002nbsubqkysemde"},{"post_id":"ciyy89nhz000pbsubwmsrp9oh","tag_id":"ciyy89nh10005bsubf9cyp76r","_id":"ciyy89njx002obsub2m98hqkc"},{"post_id":"ciyy89nhz000pbsubwmsrp9oh","tag_id":"ciyy89nju002jbsubzkod104t","_id":"ciyy89njy002qbsubsgzmd47o"},{"post_id":"ciyy89ni3000tbsub9e0upi2e","tag_id":"ciyy89nh10005bsubf9cyp76r","_id":"ciyy89njy002rbsubf4p5fyq3"},{"post_id":"ciyy89ni3000tbsub9e0upi2e","tag_id":"ciyy89njv002mbsub5vo1u9j3","_id":"ciyy89njz002tbsubgld9mwal"},{"post_id":"ciyy89ni6000ubsubyw0c5n10","tag_id":"ciyy89nh10005bsubf9cyp76r","_id":"ciyy89nk1002wbsub01e5nwwt"},{"post_id":"ciyy89ni6000ubsubyw0c5n10","tag_id":"ciyy89nju002jbsubzkod104t","_id":"ciyy89nk1002xbsubvupjyqq9"},{"post_id":"ciyy89ni6000ubsubyw0c5n10","tag_id":"ciyy89nj4001wbsubwe4mnx5c","_id":"ciyy89nk1002zbsubfc1zrgeb"},{"post_id":"ciyy89ni6000ubsubyw0c5n10","tag_id":"ciyy89njz002ubsubypaj0bw6","_id":"ciyy89nk20030bsubvuozjhoy"},{"post_id":"ciyy89ni8000xbsublcrbv01c","tag_id":"ciyy89nj80023bsubs71jljzp","_id":"ciyy89nk40033bsubjnp5mgms"},{"post_id":"ciyy89ni8000xbsublcrbv01c","tag_id":"ciyy89nk1002ybsubhfdevbwz","_id":"ciyy89nk40034bsubqm5gskgn"},{"post_id":"ciyy89ni8000xbsublcrbv01c","tag_id":"ciyy89nk20031bsub36bh3db6","_id":"ciyy89nk60036bsubc5725ix3"},{"post_id":"ciyy89nia000zbsub7kom2xxg","tag_id":"ciyy89nh10005bsubf9cyp76r","_id":"ciyy89nk80038bsubrzcfta0x"},{"post_id":"ciyy89nia000zbsub7kom2xxg","tag_id":"ciyy89nju002jbsubzkod104t","_id":"ciyy89nk80039bsubhzhqz4uf"},{"post_id":"ciyy89nia000zbsub7kom2xxg","tag_id":"ciyy89nj4001wbsubwe4mnx5c","_id":"ciyy89nk8003absubc2d7k8w4"},{"post_id":"ciyy89nia000zbsub7kom2xxg","tag_id":"ciyy89njz002ubsubypaj0bw6","_id":"ciyy89nk9003bbsubgy2myclk"}],"Tag":[{"name":"php","_id":"ciyy89nh10005bsubf9cyp76r"},{"name":"c","_id":"ciyy89nhf000absubal9c66xu"},{"name":"buffer","_id":"ciyy89nhu000mbsubohjsdz9y"},{"name":"LF","_id":"ciyy89ni2000rbsub8bzp90vv"},{"name":"windows","_id":"ciyy89ni7000wbsubwy06d2jg"},{"name":"c#","_id":"ciyy89nic0011bsubw4pxx37f"},{"name":"tcp","_id":"ciyy89nik0017bsub1a1mc237"},{"name":"udp","_id":"ciyy89nio001cbsub6szg1mq2"},{"name":"git","_id":"ciyy89nir001jbsubtdjt7ynn"},{"name":"server","_id":"ciyy89niw001pbsubssrbs3hl"},{"name":"curl","_id":"ciyy89nj4001wbsubwe4mnx5c"},{"name":"post","_id":"ciyy89nj70020bsubus4qfvcn"},{"name":"javascript","_id":"ciyy89nj80023bsubs71jljzp"},{"name":"regex","_id":"ciyy89nja0026bsub45n68ty7"},{"name":"math","_id":"ciyy89nji002bbsubxmbccb99"},{"name":"nginx","_id":"ciyy89njl002cbsubjen2rb0u"},{"name":"mvvm","_id":"ciyy89njn002fbsubgtxgybi8"},{"name":"wpf","_id":"ciyy89njt002ibsub5vb6hkg2"},{"name":"wechat","_id":"ciyy89nju002jbsubzkod104t"},{"name":"convert","_id":"ciyy89njv002mbsub5vo1u9j3"},{"name":"tools","_id":"ciyy89njz002ubsubypaj0bw6"},{"name":"jsonp","_id":"ciyy89nk1002ybsubhfdevbwz"},{"name":"cross-domain","_id":"ciyy89nk20031bsub36bh3db6"}]}}